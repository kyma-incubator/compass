apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ord-query-parameters-encode
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      app: istio-ingressgateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              local function urlencode (str)
                str = string.gsub (str, "([^0-9a-zA-Z =()._~-])", -- locale independent
                function (c) return string.format ("%%%02X", string.byte(c)) end)
                str = string.gsub (str, " ", "+")
                return str
              end
              
              function urldecode(s)
                s = s:gsub('+', ' ')
                    :gsub('%%(%x%x)', function(h)
                    return string.char(tonumber(h, 16))end)
                return s
              end
              
              function parsequery(s)
                encodedQueries = ""
                for k, v in s:gmatch('([^&]-)=([^&]+)') do
                  encodedQueries = (encodedQueries .. urlencode(k) .. "=" .. urlencode(v) .. "&")
                end
                encodedQueries = encodedQueries:sub(1, -2)
                return (url .. "?" .. encodedQueries)
              end
              
              function envoy_on_request(request_handle)
                local headers = request_handle:headers()
                local path = headers:get(":path")
              
                if path:find("open%-resource%-discovery%-service") and path:match("(.+)?(.+)") then
                  url, query = path:match("(.+)?(.+)")
                  if query:match("[:?#%[%]@%!$'*,;/?]") then
                    headers:replace(":path", parsequery(urldecode(query)))
                  end
                end
              end