// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// WebhookService is an autogenerated mock type for the WebhookService type
type WebhookService struct {
	mock.Mock
}

// GetByIDAndWebhookTypeGlobal provides a mock function with given fields: ctx, objectID, objectType, webhookType
func (_m *WebhookService) GetByIDAndWebhookTypeGlobal(ctx context.Context, objectID string, objectType model.WebhookReferenceObjectType, webhookType model.WebhookType) (*model.Webhook, error) {
	ret := _m.Called(ctx, objectID, objectType, webhookType)

	var r0 *model.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.WebhookReferenceObjectType, model.WebhookType) (*model.Webhook, error)); ok {
		return rf(ctx, objectID, objectType, webhookType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.WebhookReferenceObjectType, model.WebhookType) *model.Webhook); ok {
		r0 = rf(ctx, objectID, objectType, webhookType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.WebhookReferenceObjectType, model.WebhookType) error); ok {
		r1 = rf(ctx, objectID, objectType, webhookType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWebhookService creates a new instance of WebhookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookService {
	mock := &WebhookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
