// Code generated by mockery v2.12.1. DO NOT EDIT.

package automock

import (
	context "context"

	healthz "github.com/kyma-incubator/compass/components/director/internal/healthz"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Indicator is an autogenerated mock type for the Indicator type
type Indicator struct {
	mock.Mock
}

// Configure provides a mock function with given fields: _a0
func (_m *Indicator) Configure(_a0 healthz.IndicatorConfig) {
	_m.Called(_a0)
}

// Name provides a mock function with given fields:
func (_m *Indicator) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields: ctx
func (_m *Indicator) Run(ctx context.Context) {
	_m.Called(ctx)
}

// Status provides a mock function with given fields:
func (_m *Indicator) Status() healthz.Status {
	ret := _m.Called()

	var r0 healthz.Status
	if rf, ok := ret.Get(0).(func() healthz.Status); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(healthz.Status)
		}
	}

	return r0
}

// NewIndicator creates a new instance of Indicator. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIndicator(t testing.TB) *Indicator {
	mock := &Indicator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
