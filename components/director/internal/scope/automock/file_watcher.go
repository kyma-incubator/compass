// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import fsnotify "github.com/fsnotify/fsnotify"
import mock "github.com/stretchr/testify/mock"

// FileWatcher is an autogenerated mock type for the FileWatcher type
type FileWatcher struct {
	mock.Mock
}

// Add provides a mock function with given fields: fileName
func (_m *FileWatcher) Add(fileName string) error {
	ret := _m.Called(fileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *FileWatcher) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ErrorsChannel provides a mock function with given fields:
func (_m *FileWatcher) ErrorsChannel() chan error {
	ret := _m.Called()

	var r0 chan error
	if rf, ok := ret.Get(0).(func() chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan error)
		}
	}

	return r0
}

// FileChangeEventsChannel provides a mock function with given fields:
func (_m *FileWatcher) FileChangeEventsChannel() chan fsnotify.Event {
	ret := _m.Called()

	var r0 chan fsnotify.Event
	if rf, ok := ret.Get(0).(func() chan fsnotify.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan fsnotify.Event)
		}
	}

	return r0
}
