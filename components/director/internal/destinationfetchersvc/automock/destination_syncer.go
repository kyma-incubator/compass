// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// DestinationSyncer is an autogenerated mock type for the DestinationSyncer type
type DestinationSyncer struct {
	mock.Mock
}

// GetSubscribedTenantIDs provides a mock function with given fields: ctx
func (_m *DestinationSyncer) GetSubscribedTenantIDs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncTenantDestinations provides a mock function with given fields: ctx, tenantID
func (_m *DestinationSyncer) SyncTenantDestinations(ctx context.Context, tenantID string) error {
	ret := _m.Called(ctx, tenantID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDestinationSyncer creates a new instance of DestinationSyncer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewDestinationSyncer(t testing.TB) *DestinationSyncer {
	mock := &DestinationSyncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
