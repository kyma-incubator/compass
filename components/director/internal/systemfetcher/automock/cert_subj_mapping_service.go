// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// CertSubjMappingService is an autogenerated mock type for the certSubjMappingService type
type CertSubjMappingService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, item
func (_m *CertSubjMappingService) Create(ctx context.Context, item *model.CertSubjectMapping) (string, error) {
	ret := _m.Called(ctx, item)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CertSubjectMapping) (string, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CertSubjectMapping) string); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CertSubjectMapping) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByConsumerID provides a mock function with given fields: ctx, consumerID
func (_m *CertSubjMappingService) ListByConsumerID(ctx context.Context, consumerID string) ([]*model.CertSubjectMapping, error) {
	ret := _m.Called(ctx, consumerID)

	var r0 []*model.CertSubjectMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.CertSubjectMapping, error)); ok {
		return rf(ctx, consumerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.CertSubjectMapping); ok {
		r0 = rf(ctx, consumerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CertSubjectMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, consumerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in
func (_m *CertSubjMappingService) Update(ctx context.Context, in *model.CertSubjectMapping) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CertSubjectMapping) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCertSubjMappingService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCertSubjMappingService creates a new instance of CertSubjMappingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCertSubjMappingService(t mockConstructorTestingTNewCertSubjMappingService) *CertSubjMappingService {
	mock := &CertSubjMappingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
