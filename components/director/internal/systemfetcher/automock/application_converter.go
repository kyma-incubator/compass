// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ApplicationConverter is an autogenerated mock type for the applicationConverter type
type ApplicationConverter struct {
	mock.Mock
}

// CreateInputJSONToModel provides a mock function with given fields: ctx, in
func (_m *ApplicationConverter) CreateInputJSONToModel(ctx context.Context, in string) (model.ApplicationRegisterInput, error) {
	ret := _m.Called(ctx, in)

	var r0 model.ApplicationRegisterInput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.ApplicationRegisterInput, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.ApplicationRegisterInput); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(model.ApplicationRegisterInput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApplicationConverter creates a new instance of ApplicationConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationConverter {
	mock := &ApplicationConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
