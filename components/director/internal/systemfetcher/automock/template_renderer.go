// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"

	systemfetcher "github.com/kyma-incubator/compass/components/director/internal/systemfetcher"
)

// TemplateRenderer is an autogenerated mock type for the TemplateRenderer type
type TemplateRenderer struct {
	mock.Mock
}

// ApplicationRegisterInputFromTemplate provides a mock function with given fields: ctx, sc
func (_m *TemplateRenderer) ApplicationRegisterInputFromTemplate(ctx context.Context, sc systemfetcher.System) (*model.ApplicationRegisterInput, error) {
	ret := _m.Called(ctx, sc)

	var r0 *model.ApplicationRegisterInput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, systemfetcher.System) (*model.ApplicationRegisterInput, error)); ok {
		return rf(ctx, sc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, systemfetcher.System) *model.ApplicationRegisterInput); ok {
		r0 = rf(ctx, sc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationRegisterInput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, systemfetcher.System) error); ok {
		r1 = rf(ctx, sc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateAppRegisterInput provides a mock function with given fields: ctx, sc, appTemplate, overridePlaceholders
func (_m *TemplateRenderer) GenerateAppRegisterInput(ctx context.Context, sc systemfetcher.System, appTemplate *model.ApplicationTemplate, overridePlaceholders bool) (*model.ApplicationRegisterInput, error) {
	ret := _m.Called(ctx, sc, appTemplate, overridePlaceholders)

	var r0 *model.ApplicationRegisterInput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, systemfetcher.System, *model.ApplicationTemplate, bool) (*model.ApplicationRegisterInput, error)); ok {
		return rf(ctx, sc, appTemplate, overridePlaceholders)
	}
	if rf, ok := ret.Get(0).(func(context.Context, systemfetcher.System, *model.ApplicationTemplate, bool) *model.ApplicationRegisterInput); ok {
		r0 = rf(ctx, sc, appTemplate, overridePlaceholders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationRegisterInput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, systemfetcher.System, *model.ApplicationTemplate, bool) error); ok {
		r1 = rf(ctx, sc, appTemplate, overridePlaceholders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTemplateRenderer creates a new instance of TemplateRenderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTemplateRenderer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TemplateRenderer {
	mock := &TemplateRenderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
