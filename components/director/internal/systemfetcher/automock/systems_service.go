// Code generated by mockery v2.5.1. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// SystemsService is an autogenerated mock type for the SystemsService type
type SystemsService struct {
	mock.Mock
}

// CreateManyIfNotExistsWithEventualTemplate provides a mock function with given fields: ctx, applicationInputs
func (_m *SystemsService) CreateManyIfNotExistsWithEventualTemplate(ctx context.Context, applicationInputs []model.ApplicationRegisterInputWithTemplate) error {
	ret := _m.Called(ctx, applicationInputs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.ApplicationRegisterInputWithTemplate) error); ok {
		r0 = rf(ctx, applicationInputs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
// GetByNameAndSystemNumber provides a mock function with given fields: ctx, name, systemNumber
func (_m *SystemsService) GetByNameAndSystemNumber(ctx context.Context, name string, systemNumber string) (*model.Application, error) {
	ret := _m.Called(ctx, name, systemNumber)

	var r0 *model.Application
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Application); ok {
		r0 = rf(ctx, name, systemNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, systemNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
