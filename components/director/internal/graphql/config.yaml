schema: schema.graphql

# Let gqlgen know where to put the generated server
exec:
  filename: schema_gen.go
  package: graphql

# Let gqlgen know where to the generated models (if any)
model:
  filename: models_gen.go
  package: graphql

# Optional turns on binding to field names by tag provided
struct_tag: json

# Tell gqlgen about any existing models you want to reuse for
# graphql. These normally come from the db or a remote api.
models:
  Labels:
    model: "github.com/kyma-incubator/compass/components/director/internal/graphql.Labels"
  Timestamp:
    model: "github.com/kyma-incubator/compass/components/director/internal/graphql.Timestamp"
  Tenant:
    model: "github.com/kyma-incubator/compass/components/director/internal/graphql.Tenant"
  Annotations:
    model: "github.com/kyma-incubator/compass/components/director/internal/graphql.Annotations"
  HttpHeaders:
    model: "github.com/kyma-incubator/compass/components/director/internal/graphql.HttpHeaders"
  QueryParams:
    model: "github.com/kyma-incubator/compass/components/director/internal/graphql.QueryParams"
  CLOB:
    model: "github.com/kyma-incubator/compass/components/director/internal/graphql.CLOB"
  PageCursor:
    model: "github.com/kyma-incubator/compass/components/director/internal/graphql.PageCursor"
  Application:
    fields:
      agentAuth:
        resolver: true
      documents:
        resolver: true
      eventAPIs:
        resolver: true
      apis:
        resolver: true
      webhooks:
        resolver: true
#  Annotations:
#    model: "github.com/kyma-incubator/compass/internal/graphql.Annotations"