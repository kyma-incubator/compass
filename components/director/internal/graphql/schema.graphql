# Scalars

scalar Timestamp # -> time.Time

scalar Tenant # -> String

scalar Labels # -> map[string][]string

scalar Annotations # -> map[string]string

scalar HttpHeaders # -> map[string][]string

scalar QueryParams # -> map[string][]string

scalar CLOB # -> String

scalar PageCursor # -> String

type Label {
    key: String!
    values: [String!]!
}

type Annotation {
    key: String!
    value: String!
}

# Runtime

type Runtime {
    id: ID!
    name: String!
    description: String
    tenant: Tenant!
    labels(key: String): Labels!
    annotations(key: String): Annotations!
    status: RuntimeStatus!
    """directive for checking auth"""
    agentAuth: Auth!
}

type RuntimeStatus {
    condition: RuntimeStatusCondition!
    timestamp: Timestamp!
}

enum RuntimeStatusCondition {
    INITIAL
    READY
    FAILED
}

# Application

type Application {
    id: ID!
    tenant: Tenant!
    name: String!
    description: String
    labels(key: String): Labels!
    annotations(key: String): Annotations!
    status: ApplicationStatus!
    webhooks: [ApplicationWebhook!]!
    healthCheckURL: String
    """ group allows to find different versions of the same API """
    apis(group: String, first: Int = 100, after: PageCursor): APIDefinitionPage!
    """ group allows to find different versions of the same event API """
    eventAPIs(group: String, first: Int = 100, after: PageCursor): EventAPIDefinitionPage!
    documents(first: Int = 100, after: PageCursor): DocumentPage!
}

""" Every query that implements pagination returns object that implements Pageable interface.
To specify page details, query specify two parameters: `first` and `after`.
`first` specify page size, `after` is a cursor for the next page. When requesting first page, set `after` to empty value.
For requesting next page, set `after` to `pageInfo.endCursor` returned from previous query. """
interface Pageable {
    pageInfo: PageInfo!
    totalCount: Int!
}

type PageInfo {
    startCursor: PageCursor!
    endCursor: PageCursor!
    hasNextPage: Boolean!
}

type ApplicationPage implements Pageable {
    data: [Application!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type RuntimePage implements Pageable {
    data: [Runtime!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type HealthCheckPage implements Pageable {
    data: [HealthCheck!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type APIDefinitionPage implements Pageable {
    data: [APIDefinition!]!
    pageInfo: PageInfo!
    totalCount: Int!
}
type EventAPIDefinitionPage implements Pageable {
    data: [EventAPIDefinition!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type DocumentPage implements Pageable {
    data: [Document!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ApplicationStatus {
    condition: ApplicationStatusCondition!
    timestamp: Timestamp!
}

enum ApplicationStatusCondition {
    INITIAL
    UNKNOWN
    READY
    FAILED
}

type ApplicationWebhook {
    id: ID!
    type: ApplicationWebhookType!
    url: String!
    auth: Auth
}

enum ApplicationWebhookType {
    CONFIGURATION_CHANGED
}

# API

type Version {
    """for example 4.6"""
    value: String!
    deprecated: Boolean
    """for example 4.5"""
    deprecatedSince: String
    """if true, will be removed in the next version"""
    forRemoval: Boolean
}

type APIDefinition {
    id: ID!
    name: String!
    description: String
    spec: APISpec
    targetURL: String!
    """ group allows you to find the same API but in different version """
    group: String
    """"If runtime does not exist, an error is returned. If runtime exists but Auth for it is not set, defaultAuth is returned if specified."""
    auth(runtimeID: ID!): RuntimeAuth
    """Returns authentication details for all runtimes, even for a runtime, where Auth is not yet specified."""
    auths: [RuntimeAuth!]!
    """If defaultAuth is specified, it will be used for all Runtimes that does not specify Auth explicitly."""
    defaultAuth: Auth
    version: Version
}

type RuntimeAuth {
    runtimeID: ID!
    auth: Auth
}

type APISpec {
    """when fetch request specified, data will be automatically populated"""
    data: CLOB
    format: SpecFormat
    type: APISpecType!
    fetchRequest: FetchRequest
}

enum SpecFormat {
    YAML
    JSON
}

enum APISpecType {
    ODATA,
    OPEN_API
}

enum EventAPISpecType {
    ASYNC_API
}

# Event

type EventAPIDefinition {
    id: ID!
    name: String!
    description: String
    """group allows you to find the same API but in different version"""
    group: String
    spec: EventAPISpec!
    version: Version
}

type EventAPISpec {
    data: CLOB
    type: EventAPISpecType!
    format: SpecFormat
    fetchRequest: FetchRequest
}

# Document

type Document {
    id: ID!
    title: String!
    format: DocumentFormat!
    """for example Service Class, API etc"""
    kind: String
    data: CLOB
    fetchRequest: FetchRequest
}

enum DocumentFormat {
    MARKDOWN
}


""" Compass performs fetch to validate if request is correct and stores a copy"""
type FetchRequest {
    url: String!
    auth: Auth
    mode: FetchMode!
    filter: String
    status: FetchRequestStatus!
}

type FetchRequestStatus {
    condition: FetchRequestStatusCondition!
    timestamp: Timestamp!
}

enum FetchRequestStatusCondition {
    INITIAL
    SUCCEEDED
    FAILED
}

enum FetchMode {
    SINGLE
    PACKAGE
    INDEX
}

# Authentication
type Auth {
    credential: CredentialData!
    additionalHeaders: HttpHeaders
    additionalQueryParams: QueryParams
    requestAuth: CredentialRequestAuth
}

union CredentialData = BasicCredentialData | OAuthCredentialData

type OAuthCredentialData {
    clientId: ID!
    clientSecret: String!
    url: String!
}

type BasicCredentialData {
    username: String!
    password: String!
}

type CredentialRequestAuth {
    csrf: CSRFTokenCredentialRequestAuth
}

type CSRFTokenCredentialRequestAuth {
    tokenEndpointURL: String!
    auth: Auth
}

# HealthCheck


enum HealthCheckStatusCondition {
    SUCCEEDED
    FAILED
}

enum HealthCheckType {
    MANAGEMENT_PLANE_APPLICATION_HEALTHCHECK
}

type HealthCheck {
    type: HealthCheckType!
    condition: HealthCheckStatusCondition!
    origin: ID
    message: String
    timestamp: Timestamp!
}


# INPUTS

# Application Input

input ApplicationInput {
    name: String!
    description: String
    labels: Labels
    annotations: Annotations
    webhooks: [ApplicationWebhookInput!]
    healthCheckURL: String
    apis: [APIDefinitionInput!]
    events: [EventAPIDefinitionInput!]
    documents: [DocumentInput!]
}

# Runtime Input

input RuntimeInput {
    name: String!
    description: String
    labels: Labels
    annotations: Annotations
}

# FetchRequest Input

input FetchRequestInput {
    url: String!
    auth: AuthInput
    mode: FetchMode
    filter: String
}

# Webhook Input

input ApplicationWebhookInput {
    type: ApplicationWebhookType!
    url: String!
    auth: AuthInput
}

# API Input
# You can specify defaultAuth to specify Auth used for all runtimes. If you want to specify auth only for a dedicated Runtime,
# you need to perform separate mutation setAPIAuth.
input APIDefinitionInput {
    name: String!
    description: String
    targetURL: String!
    group: String
    spec: APISpecInput
    version: VersionInput
    defaultAuth: AuthInput
}

input VersionInput {
    value: String!
    deprecated: Boolean = false
    deprecatedSince: String
    forRemoval: Boolean = false
}


input APISpecInput {
    data: CLOB
    type: APISpecType!
    format: SpecFormat!
    fetchRequest: FetchRequestInput
}

# Event Input

input EventAPIDefinitionInput {
    name: String!
    description: String
    spec: EventAPISpecInput!
    group: String
    version: VersionInput
}

input EventAPISpecInput {
    data: CLOB
    eventSpecType: EventAPISpecType!
    fetchRequest: FetchRequestInput
}

# Document Input

input DocumentInput {
    title: String!
    displayName: String!
    description: String!
    format: DocumentFormat!
    kind: String
    data: CLOB
    fetchRequest: FetchRequestInput
}


# Auth Input

input AuthInput {
    credential: CredentialDataInput!
    additionalHeaders: HttpHeaders #
    additionalQueryParams: QueryParams
    requestAuth: CredentialRequestAuthInput
}

input CredentialRequestAuthInput {
    csrf: CSRFTokenCredentialRequestAuthInput
}

input CSRFTokenCredentialRequestAuthInput {
    tokenEndpointURL: String!
    auth: AuthInput
}

input CredentialDataInput {
    basic: BasicCredentialDataInput
    oauth: OAuthCredentialDataInput
}

input OAuthCredentialDataInput {
    clientId: ID!
    clientSecret: String!
    url: String!
}

input BasicCredentialDataInput {
    username: String!
    password: String!
}

# HealthCheck Input

enum FilterOperator {
    ALL, ANY
}

input LabelFilter {
    label: String!
    values: [String!]!
    operator: FilterOperator = ALL
}


type Query {
    applications(filter: [LabelFilter!], first: Int = 100, after: PageCursor):  ApplicationPage!
    application(id: ID!): Application

    runtimes(filter: [LabelFilter!], first: Int = 100, after: PageCursor): RuntimePage!
    runtime(id: ID!): Runtime

    healthChecks(types: [HealthCheckType!], origin: ID, first: Int = 100, after: PageCursor): HealthCheckPage!
}

type Mutation {
    # Application
    createApplication(in: ApplicationInput!): Application!
    updateApplication(id: ID!, in: ApplicationInput!): Application!
    deleteApplication(id: ID!): Application

    addApplicationLabel(applicationID: ID!, label: String!, values: [String!]!): [String!]!
    # if application does not exist, return error
    deleteApplicationLabel(applicationID: ID!, label: String!, values: [String!]!): [String!]

    addApplicationAnnotation(applicationID: ID!, annotation: String!, value: String!): String!
    deleteApplicationAnnotation(applicationID: ID!, annotation: String!): String

    addApplicationWebhook(applicationID: ID!, in: ApplicationWebhookInput!): ApplicationWebhook!
    updateApplicationWebhook(webhookID: ID!, in: ApplicationWebhookInput!): ApplicationWebhook!
    deleteApplicationWebhook(webhookID: ID!): ApplicationWebhook

    addAPI(applicationID: ID!, in: APIDefinitionInput!): APIDefinition!
    updateAPI(id: ID!, in: APIDefinitionInput!): APIDefinition!
    deleteAPI(id: ID!): APIDefinition
    refetchAPISpec(apiID: ID!): APISpec

    """
    Sets Auth for given Application and Runtime. To set default Auth for API, use updateAPI mutation
    """
    setAPIAuth(apiID: ID!, runtimeID: ID!, in: AuthInput!): RuntimeAuth!
    deleteAPIAuth(apiID: ID!, runtimeID: ID!): RuntimeAuth!


    addEventAPI(applicationID: ID!, in: EventAPIDefinitionInput!): EventAPIDefinition!
    updateEventAPI(id: ID!, in: EventAPIDefinitionInput!): EventAPIDefinition!
    deleteEventAPI(id: ID!): EventAPIDefinition
    refetchEventAPISpec(eventID: ID!): EventAPISpec

    # Runtime
    createRuntime(in: RuntimeInput!): Runtime!
    updateRuntime(id: ID!, in: RuntimeInput!): Runtime!
    deleteRuntime(id: ID!): Runtime

    """If the label key exists, it appends values to existing label."""
    addRuntimeLabel(runtimeID: ID!, key: String!, values: [String!]!): Label!

    """If values are not specified, it deletes the label. If values are specified, it deletes values from a specific label."""
    deleteRuntimeLabel(runtimeID: ID!, key: String!, values: [String!]): Label

    """If the annotation key exists, it returns an error."""
    addRuntimeAnnotation(runtimeID: ID!, key: String!, value: String!): Annotation!

    """If values are not specified, it deletes the annotation. If values are specified, it deletes values from a specific annotation."""
    deleteRuntimeAnnotation(runtimeID: ID!, key: String!): Annotation
}
