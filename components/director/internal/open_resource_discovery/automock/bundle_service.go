// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"

	resource "github.com/kyma-incubator/compass/components/director/pkg/resource"
)

// BundleService is an autogenerated mock type for the BundleService type
type BundleService struct {
	mock.Mock
}

// CreateBundle provides a mock function with given fields: ctx, resourceType, resourceID, in, bndlHash
func (_m *BundleService) CreateBundle(ctx context.Context, resourceType resource.Type, resourceID string, in model.BundleCreateInput, bndlHash uint64) (string, error) {
	ret := _m.Called(ctx, resourceType, resourceID, in, bndlHash)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, resource.Type, string, model.BundleCreateInput, uint64) string); ok {
		r0 = rf(ctx, resourceType, resourceID, in, bndlHash)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, resource.Type, string, model.BundleCreateInput, uint64) error); ok {
		r1 = rf(ctx, resourceType, resourceID, in, bndlHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *BundleService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListByApplicationIDNoPaging provides a mock function with given fields: ctx, appID
func (_m *BundleService) ListByApplicationIDNoPaging(ctx context.Context, appID string) ([]*model.Bundle, error) {
	ret := _m.Called(ctx, appID)

	var r0 []*model.Bundle
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Bundle); ok {
		r0 = rf(ctx, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Bundle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByApplicationTemplateVersionIDNoPaging provides a mock function with given fields: ctx, appTemplateVersionID
func (_m *BundleService) ListByApplicationTemplateVersionIDNoPaging(ctx context.Context, appTemplateVersionID string) ([]*model.Bundle, error) {
	ret := _m.Called(ctx, appTemplateVersionID)

	var r0 []*model.Bundle
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Bundle); ok {
		r0 = rf(ctx, appTemplateVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Bundle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appTemplateVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBundle provides a mock function with given fields: ctx, id, in, bndlHash
func (_m *BundleService) UpdateBundle(ctx context.Context, id string, in model.BundleUpdateInput, bndlHash uint64) error {
	ret := _m.Called(ctx, id, in, bndlHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.BundleUpdateInput, uint64) error); ok {
		r0 = rf(ctx, id, in, bndlHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBundleGlobal provides a mock function with given fields: ctx, id, in, bndlHash
func (_m *BundleService) UpdateBundleGlobal(ctx context.Context, id string, in model.BundleUpdateInput, bndlHash uint64) error {
	ret := _m.Called(ctx, id, in, bndlHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.BundleUpdateInput, uint64) error); ok {
		r0 = rf(ctx, id, in, bndlHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBundleService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBundleService creates a new instance of BundleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBundleService(t mockConstructorTestingTNewBundleService) *BundleService {
	mock := &BundleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
