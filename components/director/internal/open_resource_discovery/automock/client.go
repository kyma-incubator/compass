// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	application "github.com/kyma-incubator/compass/components/director/internal/domain/application"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	ord "github.com/kyma-incubator/compass/components/director/internal/open_resource_discovery"

	webhook "github.com/kyma-incubator/compass/components/director/pkg/webhook"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// FetchOpenResourceDiscoveryDocuments provides a mock function with given fields: ctx, resource, _a2, ordWebhookMapping, appBaseURL
func (_m *Client) FetchOpenResourceDiscoveryDocuments(ctx context.Context, resource ord.Resource, _a2 *model.Webhook, ordWebhookMapping application.ORDWebhookMapping, appBaseURL webhook.OpenResourceDiscoveryWebhookRequestObject) (ord.Documents, string, error) {
	ret := _m.Called(ctx, resource, _a2, ordWebhookMapping, appBaseURL)

	var r0 ord.Documents
	if rf, ok := ret.Get(0).(func(context.Context, ord.Resource, *model.Webhook, application.ORDWebhookMapping, webhook.OpenResourceDiscoveryWebhookRequestObject) ord.Documents); ok {
		r0 = rf(ctx, resource, _a2, ordWebhookMapping, appBaseURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ord.Documents)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, ord.Resource, *model.Webhook, application.ORDWebhookMapping, webhook.OpenResourceDiscoveryWebhookRequestObject) string); ok {
		r1 = rf(ctx, resource, _a2, ordWebhookMapping, appBaseURL)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, ord.Resource, *model.Webhook, application.ORDWebhookMapping, webhook.OpenResourceDiscoveryWebhookRequestObject) error); ok {
		r2 = rf(ctx, resource, _a2, ordWebhookMapping, appBaseURL)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
