// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"

	processor "github.com/kyma-incubator/compass/components/director/internal/open_resource_discovery/processor"

	resource "github.com/kyma-incubator/compass/components/director/pkg/resource"
)

// TombstonedResourcesDeleter is an autogenerated mock type for the TombstonedResourcesDeleter type
type TombstonedResourcesDeleter struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, resourceType, vendorsFromDB, productsFromDB, packagesFromDB, bundlesFromDB, apisFromDB, eventsFromDB, entityTypesFromDB, capabilitiesFromDB, integrationDependenciesFromDB, tombstonesFromDB, fetchRequests
func (_m *TombstonedResourcesDeleter) Delete(ctx context.Context, resourceType resource.Type, vendorsFromDB []*model.Vendor, productsFromDB []*model.Product, packagesFromDB []*model.Package, bundlesFromDB []*model.Bundle, apisFromDB []*model.APIDefinition, eventsFromDB []*model.EventDefinition, entityTypesFromDB []*model.EntityType, capabilitiesFromDB []*model.Capability, integrationDependenciesFromDB []*model.IntegrationDependency, tombstonesFromDB []*model.Tombstone, fetchRequests []*processor.OrdFetchRequest) ([]*processor.OrdFetchRequest, error) {
	ret := _m.Called(ctx, resourceType, vendorsFromDB, productsFromDB, packagesFromDB, bundlesFromDB, apisFromDB, eventsFromDB, entityTypesFromDB, capabilitiesFromDB, integrationDependenciesFromDB, tombstonesFromDB, fetchRequests)

	var r0 []*processor.OrdFetchRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.Type, []*model.Vendor, []*model.Product, []*model.Package, []*model.Bundle, []*model.APIDefinition, []*model.EventDefinition, []*model.EntityType, []*model.Capability, []*model.IntegrationDependency, []*model.Tombstone, []*processor.OrdFetchRequest) ([]*processor.OrdFetchRequest, error)); ok {
		return rf(ctx, resourceType, vendorsFromDB, productsFromDB, packagesFromDB, bundlesFromDB, apisFromDB, eventsFromDB, entityTypesFromDB, capabilitiesFromDB, integrationDependenciesFromDB, tombstonesFromDB, fetchRequests)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resource.Type, []*model.Vendor, []*model.Product, []*model.Package, []*model.Bundle, []*model.APIDefinition, []*model.EventDefinition, []*model.EntityType, []*model.Capability, []*model.IntegrationDependency, []*model.Tombstone, []*processor.OrdFetchRequest) []*processor.OrdFetchRequest); ok {
		r0 = rf(ctx, resourceType, vendorsFromDB, productsFromDB, packagesFromDB, bundlesFromDB, apisFromDB, eventsFromDB, entityTypesFromDB, capabilitiesFromDB, integrationDependenciesFromDB, tombstonesFromDB, fetchRequests)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*processor.OrdFetchRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resource.Type, []*model.Vendor, []*model.Product, []*model.Package, []*model.Bundle, []*model.APIDefinition, []*model.EventDefinition, []*model.EntityType, []*model.Capability, []*model.IntegrationDependency, []*model.Tombstone, []*processor.OrdFetchRequest) error); ok {
		r1 = rf(ctx, resourceType, vendorsFromDB, productsFromDB, packagesFromDB, bundlesFromDB, apisFromDB, eventsFromDB, entityTypesFromDB, capabilitiesFromDB, integrationDependenciesFromDB, tombstonesFromDB, fetchRequests)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTombstonedResourcesDeleter creates a new instance of TombstonedResourcesDeleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTombstonedResourcesDeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TombstonedResourcesDeleter {
	mock := &TombstonedResourcesDeleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
