// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ORDService is an autogenerated mock type for the ORDService type
type ORDService struct {
	mock.Mock
}

// ProcessAppInAppTemplateContext provides a mock function with given fields: ctx, appTemplateID, appID
func (_m *ORDService) ProcessAppInAppTemplateContext(ctx context.Context, appTemplateID string, appID string) error {
	ret := _m.Called(ctx, appTemplateID, appID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, appTemplateID, appID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessApplication provides a mock function with given fields: ctx, appID
func (_m *ORDService) ProcessApplication(ctx context.Context, appID string) error {
	ret := _m.Called(ctx, appID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, appID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessApplicationTemplate provides a mock function with given fields: ctx, appTemplateID
func (_m *ORDService) ProcessApplicationTemplate(ctx context.Context, appTemplateID string) error {
	ret := _m.Called(ctx, appTemplateID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, appTemplateID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewORDService interface {
	mock.TestingT
	Cleanup(func())
}

// NewORDService creates a new instance of ORDService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewORDService(t mockConstructorTestingTNewORDService) *ORDService {
	mock := &ORDService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
