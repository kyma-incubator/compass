// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	ord "github.com/kyma-incubator/compass/components/director/internal/open_resource_discovery"
	mock "github.com/stretchr/testify/mock"
)

// ORDService is an autogenerated mock type for the ORDService type
type ORDService struct {
	mock.Mock
}

// ProcessApplicationTemplates provides a mock function with given fields: ctx, cfg, appTemplateIDs
func (_m *ORDService) ProcessApplicationTemplates(ctx context.Context, cfg ord.MetricsConfig, appTemplateIDs []string) error {
	ret := _m.Called(ctx, cfg, appTemplateIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ord.MetricsConfig, []string) error); ok {
		r0 = rf(ctx, cfg, appTemplateIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessApplications provides a mock function with given fields: ctx, cfg, appIDs
func (_m *ORDService) ProcessApplications(ctx context.Context, cfg ord.MetricsConfig, appIDs []string) error {
	ret := _m.Called(ctx, cfg, appIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ord.MetricsConfig, []string) error); ok {
		r0 = rf(ctx, cfg, appIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewORDService interface {
	mock.TestingT
	Cleanup(func())
}

// NewORDService creates a new instance of ORDService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewORDService(t mockConstructorTestingTNewORDService) *ORDService {
	mock := &ORDService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
