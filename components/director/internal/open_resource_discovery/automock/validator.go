// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	ord "github.com/kyma-incubator/compass/components/director/internal/open_resource_discovery"
	mock "github.com/stretchr/testify/mock"
)

// Validator is an autogenerated mock type for the Validator type
type Validator struct {
	mock.Mock
}

// Validate provides a mock function with given fields: ctx, documents, baseURL, globalResourcesOrdIDs, docsString
func (_m *Validator) Validate(ctx context.Context, documents []*ord.Document, baseURL string, globalResourcesOrdIDs map[string]bool, docsString []string) ([]*ord.ValidationError, error) {
	ret := _m.Called(ctx, documents, baseURL, globalResourcesOrdIDs, docsString)

	var r0 []*ord.ValidationError
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*ord.Document, string, map[string]bool, []string) ([]*ord.ValidationError, error)); ok {
		return rf(ctx, documents, baseURL, globalResourcesOrdIDs, docsString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*ord.Document, string, map[string]bool, []string) []*ord.ValidationError); ok {
		r0 = rf(ctx, documents, baseURL, globalResourcesOrdIDs, docsString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ord.ValidationError)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*ord.Document, string, map[string]bool, []string) error); ok {
		r1 = rf(ctx, documents, baseURL, globalResourcesOrdIDs, docsString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewValidator creates a new instance of Validator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Validator {
	mock := &Validator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
