// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"

	resource "github.com/kyma-incubator/compass/components/director/pkg/resource"
)

// TombstoneProcessor is an autogenerated mock type for the TombstoneProcessor type
type TombstoneProcessor struct {
	mock.Mock
}

// Process provides a mock function with given fields: ctx, resourceType, resourceID, tombstones
func (_m *TombstoneProcessor) Process(ctx context.Context, resourceType resource.Type, resourceID string, tombstones []*model.TombstoneInput) ([]*model.Tombstone, error) {
	ret := _m.Called(ctx, resourceType, resourceID, tombstones)

	var r0 []*model.Tombstone
	if rf, ok := ret.Get(0).(func(context.Context, resource.Type, string, []*model.TombstoneInput) []*model.Tombstone); ok {
		r0 = rf(ctx, resourceType, resourceID, tombstones)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Tombstone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, resource.Type, string, []*model.TombstoneInput) error); ok {
		r1 = rf(ctx, resourceType, resourceID, tombstones)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTombstoneProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// NewTombstoneProcessor creates a new instance of TombstoneProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTombstoneProcessor(t mockConstructorTestingTNewTombstoneProcessor) *TombstoneProcessor {
	mock := &TombstoneProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
