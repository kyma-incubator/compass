// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// EntityTypeService is an autogenerated mock type for the EntityTypeService type
type EntityTypeService struct {
	mock.Mock
}

// ListByApplicationID provides a mock function with given fields: ctx, appID
func (_m *EntityTypeService) ListByApplicationID(ctx context.Context, appID string) ([]*model.EntityType, error) {
	ret := _m.Called(ctx, appID)

	var r0 []*model.EntityType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.EntityType, error)); ok {
		return rf(ctx, appID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.EntityType); ok {
		r0 = rf(ctx, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.EntityType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByApplicationTemplateVersionID provides a mock function with given fields: ctx, appTemplateVersionID
func (_m *EntityTypeService) ListByApplicationTemplateVersionID(ctx context.Context, appTemplateVersionID string) ([]*model.EntityType, error) {
	ret := _m.Called(ctx, appTemplateVersionID)

	var r0 []*model.EntityType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.EntityType, error)); ok {
		return rf(ctx, appTemplateVersionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.EntityType); ok {
		r0 = rf(ctx, appTemplateVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.EntityType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appTemplateVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEntityTypeService creates a new instance of EntityTypeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEntityTypeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EntityTypeService {
	mock := &EntityTypeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
