// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"

	resource "github.com/kyma-incubator/compass/components/director/pkg/resource"
)

// VendorProcessor is an autogenerated mock type for the VendorProcessor type
type VendorProcessor struct {
	mock.Mock
}

// Process provides a mock function with given fields: ctx, resourceType, resourceID, vendors
func (_m *VendorProcessor) Process(ctx context.Context, resourceType resource.Type, resourceID string, vendors []*model.VendorInput) ([]*model.Vendor, error) {
	ret := _m.Called(ctx, resourceType, resourceID, vendors)

	var r0 []*model.Vendor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.Type, string, []*model.VendorInput) ([]*model.Vendor, error)); ok {
		return rf(ctx, resourceType, resourceID, vendors)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resource.Type, string, []*model.VendorInput) []*model.Vendor); ok {
		r0 = rf(ctx, resourceType, resourceID, vendors)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Vendor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resource.Type, string, []*model.VendorInput) error); ok {
		r1 = rf(ctx, resourceType, resourceID, vendors)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVendorProcessor creates a new instance of VendorProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVendorProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *VendorProcessor {
	mock := &VendorProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
