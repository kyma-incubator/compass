// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// OperationsManager is an autogenerated mock type for the OperationsManager type
type OperationsManager struct {
	mock.Mock
}

// CreateOperation provides a mock function with given fields: ctx, in
func (_m *OperationsManager) CreateOperation(ctx context.Context, in *model.OperationInput) (string, error) {
	ret := _m.Called(ctx, in)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *model.OperationInput) string); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.OperationInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOperationByData provides a mock function with given fields: ctx, data
func (_m *OperationsManager) FindOperationByData(ctx context.Context, data interface{}) (*model.Operation, error) {
	ret := _m.Called(ctx, data)

	var r0 *model.Operation
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *model.Operation); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RescheduleOperation provides a mock function with given fields: ctx, operationID
func (_m *OperationsManager) RescheduleOperation(ctx context.Context, operationID string) error {
	ret := _m.Called(ctx, operationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, operationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOperationsManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewOperationsManager creates a new instance of OperationsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOperationsManager(t mockConstructorTestingTNewOperationsManager) *OperationsManager {
	mock := &OperationsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
