// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/director/internal/model"
import runtime_auth "github.com/kyma-incubator/compass/components/director/internal/domain/runtime_auth"

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: in
func (_m *Converter) FromEntity(in runtime_auth.Entity) (model.RuntimeAuth, error) {
	ret := _m.Called(in)

	var r0 model.RuntimeAuth
	if rf, ok := ret.Get(0).(func(runtime_auth.Entity) model.RuntimeAuth); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(model.RuntimeAuth)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(runtime_auth.Entity) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToEntity provides a mock function with given fields: in
func (_m *Converter) ToEntity(in model.RuntimeAuth) (runtime_auth.Entity, error) {
	ret := _m.Called(in)

	var r0 runtime_auth.Entity
	if rf, ok := ret.Get(0).(func(model.RuntimeAuth) runtime_auth.Entity); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(runtime_auth.Entity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.RuntimeAuth) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
