// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	webhook "github.com/kyma-incubator/compass/components/director/pkg/webhook"
)

// CertSubjectInputBuilder is an autogenerated mock type for the certSubjectInputBuilder type
type CertSubjectInputBuilder struct {
	mock.Mock
}

// GetTrustDetailsForObject provides a mock function with given fields: ctx, objectID
func (_m *CertSubjectInputBuilder) GetTrustDetailsForObject(ctx context.Context, objectID string) (*webhook.TrustDetails, error) {
	ret := _m.Called(ctx, objectID)

	var r0 *webhook.TrustDetails
	if rf, ok := ret.Get(0).(func(context.Context, string) *webhook.TrustDetails); ok {
		r0 = rf(ctx, objectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.TrustDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, objectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrustDetailsForObjects provides a mock function with given fields: ctx, objectIDs
func (_m *CertSubjectInputBuilder) GetTrustDetailsForObjects(ctx context.Context, objectIDs []string) (map[string]*webhook.TrustDetails, error) {
	ret := _m.Called(ctx, objectIDs)

	var r0 map[string]*webhook.TrustDetails
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]*webhook.TrustDetails); ok {
		r0 = rf(ctx, objectIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*webhook.TrustDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, objectIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCertSubjectInputBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewCertSubjectInputBuilder creates a new instance of CertSubjectInputBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCertSubjectInputBuilder(t mockConstructorTestingTNewCertSubjectInputBuilder) *CertSubjectInputBuilder {
	mock := &CertSubjectInputBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
