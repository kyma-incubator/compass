// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	resource "github.com/kyma-incubator/compass/components/director/pkg/resource"

	webhook "github.com/kyma-incubator/compass/components/director/pkg/webhook"
)

// TenantInputBuilder is an autogenerated mock type for the tenantInputBuilder type
type TenantInputBuilder struct {
	mock.Mock
}

// GetTenantForApplicationTemplate provides a mock function with given fields: ctx, tenant, labels
func (_m *TenantInputBuilder) GetTenantForApplicationTemplate(ctx context.Context, tenant string, labels map[string]string) (*webhook.TenantWithLabels, error) {
	ret := _m.Called(ctx, tenant, labels)

	var r0 *webhook.TenantWithLabels
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) *webhook.TenantWithLabels); ok {
		r0 = rf(ctx, tenant, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.TenantWithLabels)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, tenant, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantForObject provides a mock function with given fields: ctx, objectID, resourceType
func (_m *TenantInputBuilder) GetTenantForObject(ctx context.Context, objectID string, resourceType resource.Type) (*webhook.TenantWithLabels, error) {
	ret := _m.Called(ctx, objectID, resourceType)

	var r0 *webhook.TenantWithLabels
	if rf, ok := ret.Get(0).(func(context.Context, string, resource.Type) *webhook.TenantWithLabels); ok {
		r0 = rf(ctx, objectID, resourceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.TenantWithLabels)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, resource.Type) error); ok {
		r1 = rf(ctx, objectID, resourceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantsForApplicationTemplates provides a mock function with given fields: ctx, tenant, labels, objectIDs
func (_m *TenantInputBuilder) GetTenantsForApplicationTemplates(ctx context.Context, tenant string, labels map[string]map[string]string, objectIDs []string) (map[string]*webhook.TenantWithLabels, error) {
	ret := _m.Called(ctx, tenant, labels, objectIDs)

	var r0 map[string]*webhook.TenantWithLabels
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]map[string]string, []string) map[string]*webhook.TenantWithLabels); ok {
		r0 = rf(ctx, tenant, labels, objectIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*webhook.TenantWithLabels)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]map[string]string, []string) error); ok {
		r1 = rf(ctx, tenant, labels, objectIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantsForObjects provides a mock function with given fields: ctx, tenant, objectIDs, resourceType
func (_m *TenantInputBuilder) GetTenantsForObjects(ctx context.Context, tenant string, objectIDs []string, resourceType resource.Type) (map[string]*webhook.TenantWithLabels, error) {
	ret := _m.Called(ctx, tenant, objectIDs, resourceType)

	var r0 map[string]*webhook.TenantWithLabels
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, resource.Type) map[string]*webhook.TenantWithLabels); ok {
		r0 = rf(ctx, tenant, objectIDs, resourceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*webhook.TenantWithLabels)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string, resource.Type) error); ok {
		r1 = rf(ctx, tenant, objectIDs, resourceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTenantInputBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewTenantInputBuilder creates a new instance of TenantInputBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTenantInputBuilder(t mockConstructorTestingTNewTenantInputBuilder) *TenantInputBuilder {
	mock := &TenantInputBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
