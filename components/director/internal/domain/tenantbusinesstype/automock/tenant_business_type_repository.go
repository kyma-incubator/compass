// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// TenantBusinessTypeRepository is an autogenerated mock type for the TenantBusinessTypeRepository type
type TenantBusinessTypeRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, item
func (_m *TenantBusinessTypeRepository) Create(ctx context.Context, item *model.TenantBusinessType) error {
	ret := _m.Called(ctx, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TenantBusinessType) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TenantBusinessTypeRepository) GetByID(ctx context.Context, id string) (*model.TenantBusinessType, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.TenantBusinessType
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.TenantBusinessType); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TenantBusinessType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: ctx
func (_m *TenantBusinessTypeRepository) ListAll(ctx context.Context) ([]*model.TenantBusinessType, error) {
	ret := _m.Called(ctx)

	var r0 []*model.TenantBusinessType
	if rf, ok := ret.Get(0).(func(context.Context) []*model.TenantBusinessType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TenantBusinessType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTenantBusinessTypeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTenantBusinessTypeRepository creates a new instance of TenantBusinessTypeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTenantBusinessTypeRepository(t mockConstructorTestingTNewTenantBusinessTypeRepository) *TenantBusinessTypeRepository {
	mock := &TenantBusinessTypeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
