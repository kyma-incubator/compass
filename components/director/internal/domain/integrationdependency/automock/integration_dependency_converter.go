// Code generated by mockery. DO NOT EDIT.

package automock

import (
	integrationdependency "github.com/kyma-incubator/compass/components/director/internal/domain/integrationdependency"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// IntegrationDependencyConverter is an autogenerated mock type for the IntegrationDependencyConverter type
type IntegrationDependencyConverter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: entity
func (_m *IntegrationDependencyConverter) FromEntity(entity *integrationdependency.Entity) *model.IntegrationDependency {
	ret := _m.Called(entity)

	var r0 *model.IntegrationDependency
	if rf, ok := ret.Get(0).(func(*integrationdependency.Entity) *model.IntegrationDependency); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.IntegrationDependency)
		}
	}

	return r0
}

// ToEntity provides a mock function with given fields: integrationDependencyModel
func (_m *IntegrationDependencyConverter) ToEntity(integrationDependencyModel *model.IntegrationDependency) *integrationdependency.Entity {
	ret := _m.Called(integrationDependencyModel)

	var r0 *integrationdependency.Entity
	if rf, ok := ret.Get(0).(func(*model.IntegrationDependency) *integrationdependency.Entity); ok {
		r0 = rf(integrationDependencyModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integrationdependency.Entity)
		}
	}

	return r0
}

// NewIntegrationDependencyConverter creates a new instance of IntegrationDependencyConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntegrationDependencyConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntegrationDependencyConverter {
	mock := &IntegrationDependencyConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
