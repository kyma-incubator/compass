// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	resource "github.com/kyma-incubator/compass/components/director/pkg/resource"
)

// IntegrationDependencyService is an autogenerated mock type for the IntegrationDependencyService type
type IntegrationDependencyService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, resourceType, resourceID, packageID, in, integrationDependencyHash
func (_m *IntegrationDependencyService) Create(ctx context.Context, resourceType resource.Type, resourceID string, packageID *string, in model.IntegrationDependencyInput, integrationDependencyHash uint64) (string, error) {
	ret := _m.Called(ctx, resourceType, resourceID, packageID, in, integrationDependencyHash)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.Type, string, *string, model.IntegrationDependencyInput, uint64) (string, error)); ok {
		return rf(ctx, resourceType, resourceID, packageID, in, integrationDependencyHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resource.Type, string, *string, model.IntegrationDependencyInput, uint64) string); ok {
		r0 = rf(ctx, resourceType, resourceID, packageID, in, integrationDependencyHash)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, resource.Type, string, *string, model.IntegrationDependencyInput, uint64) error); ok {
		r1 = rf(ctx, resourceType, resourceID, packageID, in, integrationDependencyHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, resourceType, id
func (_m *IntegrationDependencyService) Delete(ctx context.Context, resourceType resource.Type, id string) error {
	ret := _m.Called(ctx, resourceType, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.Type, string) error); ok {
		r0 = rf(ctx, resourceType, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *IntegrationDependencyService) Get(ctx context.Context, id string) (*model.IntegrationDependency, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.IntegrationDependency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.IntegrationDependency, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.IntegrationDependency); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.IntegrationDependency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByPackageID provides a mock function with given fields: ctx, packageID
func (_m *IntegrationDependencyService) ListByPackageID(ctx context.Context, packageID string) ([]*model.IntegrationDependency, error) {
	ret := _m.Called(ctx, packageID)

	var r0 []*model.IntegrationDependency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.IntegrationDependency, error)); ok {
		return rf(ctx, packageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.IntegrationDependency); ok {
		r0 = rf(ctx, packageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.IntegrationDependency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, packageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIntegrationDependencyService creates a new instance of IntegrationDependencyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntegrationDependencyService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntegrationDependencyService {
	mock := &IntegrationDependencyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
