// Code generated by mockery. DO NOT EDIT.

package automock

import (
	dataproduct "github.com/kyma-incubator/compass/components/director/internal/domain/dataproduct"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// DataProductConverter is an autogenerated mock type for the DataProductConverter type
type DataProductConverter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: entity
func (_m *DataProductConverter) FromEntity(entity *dataproduct.Entity) *model.DataProduct {
	ret := _m.Called(entity)

	var r0 *model.DataProduct
	if rf, ok := ret.Get(0).(func(*dataproduct.Entity) *model.DataProduct); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DataProduct)
		}
	}

	return r0
}

// ToEntity provides a mock function with given fields: dataProductModel
func (_m *DataProductConverter) ToEntity(dataProductModel *model.DataProduct) *dataproduct.Entity {
	ret := _m.Called(dataProductModel)

	var r0 *dataproduct.Entity
	if rf, ok := ret.Get(0).(func(*model.DataProduct) *dataproduct.Entity); ok {
		r0 = rf(dataProductModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataproduct.Entity)
		}
	}

	return r0
}

// NewDataProductConverter creates a new instance of DataProductConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataProductConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataProductConverter {
	mock := &DataProductConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
