// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// AspectRepository is an autogenerated mock type for the AspectRepository type
type AspectRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tenant, item
func (_m *AspectRepository) Create(ctx context.Context, tenant string, item *model.Aspect) error {
	ret := _m.Called(ctx, tenant, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Aspect) error); ok {
		r0 = rf(ctx, tenant, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByIntegrationDependencyID provides a mock function with given fields: ctx, tenant, integrationDependencyID
func (_m *AspectRepository) DeleteByIntegrationDependencyID(ctx context.Context, tenant string, integrationDependencyID string) error {
	ret := _m.Called(ctx, tenant, integrationDependencyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tenant, integrationDependencyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAspectRepository creates a new instance of AspectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAspectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AspectRepository {
	mock := &AspectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
