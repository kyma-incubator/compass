// Code generated by mockery. DO NOT EDIT.

package automock

import (
	aspect "github.com/kyma-incubator/compass/components/director/internal/domain/aspect"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// AspectConverter is an autogenerated mock type for the AspectConverter type
type AspectConverter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: entity
func (_m *AspectConverter) FromEntity(entity *aspect.Entity) *model.Aspect {
	ret := _m.Called(entity)

	var r0 *model.Aspect
	if rf, ok := ret.Get(0).(func(*aspect.Entity) *model.Aspect); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Aspect)
		}
	}

	return r0
}

// ToEntity provides a mock function with given fields: aspectModel
func (_m *AspectConverter) ToEntity(aspectModel *model.Aspect) *aspect.Entity {
	ret := _m.Called(aspectModel)

	var r0 *aspect.Entity
	if rf, ok := ret.Get(0).(func(*model.Aspect) *aspect.Entity); ok {
		r0 = rf(aspectModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aspect.Entity)
		}
	}

	return r0
}

// NewAspectConverter creates a new instance of AspectConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAspectConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AspectConverter {
	mock := &AspectConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
