// Code generated by mockery. DO NOT EDIT.

package automock

import (
	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// FormationTemplateConverter is an autogenerated mock type for the FormationTemplateConverter type
type FormationTemplateConverter struct {
	mock.Mock
}

// FromModelRegisterInputToModel provides a mock function with given fields: in, id, tenantID
func (_m *FormationTemplateConverter) FromModelRegisterInputToModel(in *model.FormationTemplateRegisterInput, id string, tenantID string) *model.FormationTemplate {
	ret := _m.Called(in, id, tenantID)

	var r0 *model.FormationTemplate
	if rf, ok := ret.Get(0).(func(*model.FormationTemplateRegisterInput, string, string) *model.FormationTemplate); ok {
		r0 = rf(in, id, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FormationTemplate)
		}
	}

	return r0
}

// FromModelUpdateInputToModel provides a mock function with given fields: in, id, tenantID
func (_m *FormationTemplateConverter) FromModelUpdateInputToModel(in *model.FormationTemplateUpdateInput, id string, tenantID string) *model.FormationTemplate {
	ret := _m.Called(in, id, tenantID)

	var r0 *model.FormationTemplate
	if rf, ok := ret.Get(0).(func(*model.FormationTemplateUpdateInput, string, string) *model.FormationTemplate); ok {
		r0 = rf(in, id, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FormationTemplate)
		}
	}

	return r0
}

// FromRegisterInputGraphQL provides a mock function with given fields: in
func (_m *FormationTemplateConverter) FromRegisterInputGraphQL(in *graphql.FormationTemplateRegisterInput) (*model.FormationTemplateRegisterInput, error) {
	ret := _m.Called(in)

	var r0 *model.FormationTemplateRegisterInput
	var r1 error
	if rf, ok := ret.Get(0).(func(*graphql.FormationTemplateRegisterInput) (*model.FormationTemplateRegisterInput, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*graphql.FormationTemplateRegisterInput) *model.FormationTemplateRegisterInput); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FormationTemplateRegisterInput)
		}
	}

	if rf, ok := ret.Get(1).(func(*graphql.FormationTemplateRegisterInput) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FromUpdateInputGraphQL provides a mock function with given fields: in
func (_m *FormationTemplateConverter) FromUpdateInputGraphQL(in *graphql.FormationTemplateUpdateInput) (*model.FormationTemplateUpdateInput, error) {
	ret := _m.Called(in)

	var r0 *model.FormationTemplateUpdateInput
	var r1 error
	if rf, ok := ret.Get(0).(func(*graphql.FormationTemplateUpdateInput) (*model.FormationTemplateUpdateInput, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*graphql.FormationTemplateUpdateInput) *model.FormationTemplateUpdateInput); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FormationTemplateUpdateInput)
		}
	}

	if rf, ok := ret.Get(1).(func(*graphql.FormationTemplateUpdateInput) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultipleToGraphQL provides a mock function with given fields: in
func (_m *FormationTemplateConverter) MultipleToGraphQL(in []*model.FormationTemplate) ([]*graphql.FormationTemplate, error) {
	ret := _m.Called(in)

	var r0 []*graphql.FormationTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func([]*model.FormationTemplate) ([]*graphql.FormationTemplate, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func([]*model.FormationTemplate) []*graphql.FormationTemplate); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graphql.FormationTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func([]*model.FormationTemplate) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToGraphQL provides a mock function with given fields: in
func (_m *FormationTemplateConverter) ToGraphQL(in *model.FormationTemplate) (*graphql.FormationTemplate, error) {
	ret := _m.Called(in)

	var r0 *graphql.FormationTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.FormationTemplate) (*graphql.FormationTemplate, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*model.FormationTemplate) *graphql.FormationTemplate); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphql.FormationTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.FormationTemplate) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFormationTemplateConverter creates a new instance of FormationTemplateConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormationTemplateConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *FormationTemplateConverter {
	mock := &FormationTemplateConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
