// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// AssignmentOperationRepository is an autogenerated mock type for the AssignmentOperationRepository type
type AssignmentOperationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, item
func (_m *AssignmentOperationRepository) Create(ctx context.Context, item *model.AssignmentOperation) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AssignmentOperation) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByIDs provides a mock function with given fields: ctx, ids
func (_m *AssignmentOperationRepository) DeleteByIDs(ctx context.Context, ids []string) error {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByIDs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLatestOperation provides a mock function with given fields: ctx, formationAssignmentID, formationID, operationType
func (_m *AssignmentOperationRepository) GetLatestOperation(ctx context.Context, formationAssignmentID string, formationID string, operationType model.AssignmentOperationType) (*model.AssignmentOperation, error) {
	ret := _m.Called(ctx, formationAssignmentID, formationID, operationType)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestOperation")
	}

	var r0 *model.AssignmentOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, model.AssignmentOperationType) (*model.AssignmentOperation, error)); ok {
		return rf(ctx, formationAssignmentID, formationID, operationType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, model.AssignmentOperationType) *model.AssignmentOperation); ok {
		r0 = rf(ctx, formationAssignmentID, formationID, operationType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignmentOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, model.AssignmentOperationType) error); ok {
		r1 = rf(ctx, formationAssignmentID, formationID, operationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListForFormationAssignmentIDs provides a mock function with given fields: ctx, assignmentIDs, pageSize, cursor
func (_m *AssignmentOperationRepository) ListForFormationAssignmentIDs(ctx context.Context, assignmentIDs []string, pageSize int, cursor string) ([]*model.AssignmentOperationPage, error) {
	ret := _m.Called(ctx, assignmentIDs, pageSize, cursor)

	if len(ret) == 0 {
		panic("no return value specified for ListForFormationAssignmentIDs")
	}

	var r0 []*model.AssignmentOperationPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, int, string) ([]*model.AssignmentOperationPage, error)); ok {
		return rf(ctx, assignmentIDs, pageSize, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, int, string) []*model.AssignmentOperationPage); ok {
		r0 = rf(ctx, assignmentIDs, pageSize, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AssignmentOperationPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, int, string) error); ok {
		r1 = rf(ctx, assignmentIDs, pageSize, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, m
func (_m *AssignmentOperationRepository) Update(ctx context.Context, m *model.AssignmentOperation) error {
	ret := _m.Called(ctx, m)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AssignmentOperation) error); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAssignmentOperationRepository creates a new instance of AssignmentOperationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssignmentOperationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssignmentOperationRepository {
	mock := &AssignmentOperationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
