// Code generated by mockery. DO NOT EDIT.

package automock

import (
	labeldef "github.com/kyma-incubator/compass/components/director/internal/domain/labeldef"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	testing "testing"
)

// EntityConverter is an autogenerated mock type for the EntityConverter type
type EntityConverter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: in
func (_m *EntityConverter) FromEntity(in labeldef.Entity) (model.LabelDefinition, error) {
	ret := _m.Called(in)

	var r0 model.LabelDefinition
	if rf, ok := ret.Get(0).(func(labeldef.Entity) model.LabelDefinition); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(model.LabelDefinition)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(labeldef.Entity) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToEntity provides a mock function with given fields: in
func (_m *EntityConverter) ToEntity(in model.LabelDefinition) (labeldef.Entity, error) {
	ret := _m.Called(in)

	var r0 labeldef.Entity
	if rf, ok := ret.Get(0).(func(model.LabelDefinition) labeldef.Entity); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(labeldef.Entity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.LabelDefinition) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEntityConverter creates a new instance of EntityConverter. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewEntityConverter(t testing.TB) *EntityConverter {
	mock := &EntityConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
