// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
import labeldef "github.com/kyma-incubator/compass/components/director/internal/domain/labeldef"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/director/internal/model"

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

// FromGraphQL provides a mock function with given fields: input, tenant
func (_m *Converter) FromGraphQL(input graphql.LabelDefinitionInput, tenant string) model.LabelDefinition {
	ret := _m.Called(input, tenant)

	var r0 model.LabelDefinition
	if rf, ok := ret.Get(0).(func(graphql.LabelDefinitionInput, string) model.LabelDefinition); ok {
		r0 = rf(input, tenant)
	} else {
		r0 = ret.Get(0).(model.LabelDefinition)
	}

	return r0
}

// ToEntity provides a mock function with given fields: in
func (_m *Converter) ToEntity(in model.LabelDefinition) (labeldef.Entity, error) {
	ret := _m.Called(in)

	var r0 labeldef.Entity
	if rf, ok := ret.Get(0).(func(model.LabelDefinition) labeldef.Entity); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(labeldef.Entity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.LabelDefinition) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToGraphQL provides a mock function with given fields: definition
func (_m *Converter) ToGraphQL(definition model.LabelDefinition) graphql.LabelDefinition {
	ret := _m.Called(definition)

	var r0 graphql.LabelDefinition
	if rf, ok := ret.Get(0).(func(model.LabelDefinition) graphql.LabelDefinition); ok {
		r0 = rf(definition)
	} else {
		r0 = ret.Get(0).(graphql.LabelDefinition)
	}

	return r0
}
