// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// EventingService is an autogenerated mock type for the EventingService type
type EventingService struct {
	mock.Mock
}

// GetForRuntime provides a mock function with given fields: ctx, runtimeID
func (_m *EventingService) GetForRuntime(ctx context.Context, runtimeID uuid.UUID) (*model.RuntimeEventingConfiguration, error) {
	ret := _m.Called(ctx, runtimeID)

	if len(ret) == 0 {
		panic("no return value specified for GetForRuntime")
	}

	var r0 *model.RuntimeEventingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.RuntimeEventingConfiguration, error)); ok {
		return rf(ctx, runtimeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.RuntimeEventingConfiguration); ok {
		r0 = rf(ctx, runtimeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RuntimeEventingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, runtimeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventingService creates a new instance of EventingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventingService {
	mock := &EventingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
