// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// FormationService is an autogenerated mock type for the formationService type
type FormationService struct {
	mock.Mock
}

// AssignFormation provides a mock function with given fields: ctx, tnt, objectID, objectType, formation
func (_m *FormationService) AssignFormation(ctx context.Context, tnt string, objectID string, objectType graphql.FormationObjectType, formation model.Formation) (*model.Formation, error) {
	ret := _m.Called(ctx, tnt, objectID, objectType, formation)

	if len(ret) == 0 {
		panic("no return value specified for AssignFormation")
	}

	var r0 *model.Formation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, graphql.FormationObjectType, model.Formation) (*model.Formation, error)); ok {
		return rf(ctx, tnt, objectID, objectType, formation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, graphql.FormationObjectType, model.Formation) *model.Formation); ok {
		r0 = rf(ctx, tnt, objectID, objectType, formation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Formation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, graphql.FormationObjectType, model.Formation) error); ok {
		r1 = rf(ctx, tnt, objectID, objectType, formation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjectIDsOfTypeForFormations provides a mock function with given fields: ctx, tenantID, formationNames, objectType
func (_m *FormationService) ListObjectIDsOfTypeForFormations(ctx context.Context, tenantID string, formationNames []string, objectType model.FormationAssignmentType) ([]string, error) {
	ret := _m.Called(ctx, tenantID, formationNames, objectType)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectIDsOfTypeForFormations")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, model.FormationAssignmentType) ([]string, error)); ok {
		return rf(ctx, tenantID, formationNames, objectType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, model.FormationAssignmentType) []string); ok {
		r0 = rf(ctx, tenantID, formationNames, objectType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, model.FormationAssignmentType) error); ok {
		r1 = rf(ctx, tenantID, formationNames, objectType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MergeScenariosFromInputLabelsAndAssignments provides a mock function with given fields: ctx, inputLabels, runtimeID
func (_m *FormationService) MergeScenariosFromInputLabelsAndAssignments(ctx context.Context, inputLabels map[string]interface{}, runtimeID string) ([]interface{}, error) {
	ret := _m.Called(ctx, inputLabels, runtimeID)

	if len(ret) == 0 {
		panic("no return value specified for MergeScenariosFromInputLabelsAndAssignments")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, string) ([]interface{}, error)); ok {
		return rf(ctx, inputLabels, runtimeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, string) []interface{}); ok {
		r0 = rf(ctx, inputLabels, runtimeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}, string) error); ok {
		r1 = rf(ctx, inputLabels, runtimeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnassignFormation provides a mock function with given fields: ctx, tnt, objectID, objectType, formation, ignoreASA
func (_m *FormationService) UnassignFormation(ctx context.Context, tnt string, objectID string, objectType graphql.FormationObjectType, formation model.Formation, ignoreASA bool) (*model.Formation, error) {
	ret := _m.Called(ctx, tnt, objectID, objectType, formation, ignoreASA)

	if len(ret) == 0 {
		panic("no return value specified for UnassignFormation")
	}

	var r0 *model.Formation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, graphql.FormationObjectType, model.Formation, bool) (*model.Formation, error)); ok {
		return rf(ctx, tnt, objectID, objectType, formation, ignoreASA)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, graphql.FormationObjectType, model.Formation, bool) *model.Formation); ok {
		r0 = rf(ctx, tnt, objectID, objectType, formation, ignoreASA)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Formation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, graphql.FormationObjectType, model.Formation, bool) error); ok {
		r1 = rf(ctx, tnt, objectID, objectType, formation, ignoreASA)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnassignFormationsComingFromASA provides a mock function with given fields: ctx, in
func (_m *FormationService) UnassignFormationsComingFromASA(ctx context.Context, in []*model.AutomaticScenarioAssignment) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for UnassignFormationsComingFromASA")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.AutomaticScenarioAssignment) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFormationService creates a new instance of FormationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FormationService {
	mock := &FormationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
