// Code generated by mockery 2.9.0. DO NOT EDIT.

package automock

import (
	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// RuntimeConverter is an autogenerated mock type for the RuntimeConverter type
type RuntimeConverter struct {
	mock.Mock
}

// MultipleToGraphQL provides a mock function with given fields: in
func (_m *RuntimeConverter) MultipleToGraphQL(in []*model.Runtime) []*graphql.Runtime {
	ret := _m.Called(in)

	var r0 []*graphql.Runtime
	if rf, ok := ret.Get(0).(func([]*model.Runtime) []*graphql.Runtime); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graphql.Runtime)
		}
	}

	return r0
}

// RegisterInputFromGraphQL provides a mock function with given fields: in
func (_m *RuntimeConverter) RegisterInputFromGraphQL(in graphql.RuntimeRegisterInput) (model.RuntimeRegisterInput, error) {
	ret := _m.Called(in)

	var r0 model.RuntimeRegisterInput
	if rf, ok := ret.Get(0).(func(graphql.RuntimeRegisterInput) model.RuntimeRegisterInput); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(model.RuntimeRegisterInput)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(graphql.RuntimeRegisterInput) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToGraphQL provides a mock function with given fields: in
func (_m *RuntimeConverter) ToGraphQL(in *model.Runtime) *graphql.Runtime {
	ret := _m.Called(in)

	var r0 *graphql.Runtime
	if rf, ok := ret.Get(0).(func(*model.Runtime) *graphql.Runtime); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphql.Runtime)
		}
	}

	return r0
}

// UpdateInputFromGraphQL provides a mock function with given fields: in
func (_m *RuntimeConverter) UpdateInputFromGraphQL(in graphql.RuntimeUpdateInput) model.RuntimeUpdateInput {
	ret := _m.Called(in)

	var r0 model.RuntimeUpdateInput
	if rf, ok := ret.Get(0).(func(graphql.RuntimeUpdateInput) model.RuntimeUpdateInput); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(model.RuntimeUpdateInput)
	}

	return r0
}
