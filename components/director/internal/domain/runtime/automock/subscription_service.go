// Code generated by mockery 2.9.0. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SubscriptionService is an autogenerated mock type for the SubscriptionService type
type SubscriptionService struct {
	mock.Mock
}

// SubscribeTenant provides a mock function with given fields: ctx, runtimeId, subaccountTenantID, region
func (_m *SubscriptionService) SubscribeTenant(ctx context.Context, runtimeId string, subaccountTenantID string, region string) (bool, error) {
	ret := _m.Called(ctx, runtimeId, subaccountTenantID, region)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, runtimeId, subaccountTenantID, region)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, runtimeId, subaccountTenantID, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsubscribeTenant provides a mock function with given fields: ctx, runtimeId, subaccountTenantID, region
func (_m *SubscriptionService) UnsubscribeTenant(ctx context.Context, runtimeId string, subaccountTenantID string, region string) (bool, error) {
	ret := _m.Called(ctx, runtimeId, subaccountTenantID, region)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, runtimeId, subaccountTenantID, region)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, runtimeId, subaccountTenantID, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
