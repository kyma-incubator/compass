// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// WebhookService is an autogenerated mock type for the WebhookService type
type WebhookService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, owningResourceID, in, objectType
func (_m *WebhookService) Create(ctx context.Context, owningResourceID string, in model.WebhookInput, objectType model.WebhookReferenceObjectType) (string, error) {
	ret := _m.Called(ctx, owningResourceID, in, objectType)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.WebhookInput, model.WebhookReferenceObjectType) (string, error)); ok {
		return rf(ctx, owningResourceID, in, objectType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.WebhookInput, model.WebhookReferenceObjectType) string); ok {
		r0 = rf(ctx, owningResourceID, in, objectType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.WebhookInput, model.WebhookReferenceObjectType) error); ok {
		r1 = rf(ctx, owningResourceID, in, objectType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListForRuntime provides a mock function with given fields: ctx, runtimeID
func (_m *WebhookService) ListForRuntime(ctx context.Context, runtimeID string) ([]*model.Webhook, error) {
	ret := _m.Called(ctx, runtimeID)

	if len(ret) == 0 {
		panic("no return value specified for ListForRuntime")
	}

	var r0 []*model.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Webhook, error)); ok {
		return rf(ctx, runtimeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Webhook); ok {
		r0 = rf(ctx, runtimeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, runtimeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWebhookService creates a new instance of WebhookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookService {
	mock := &WebhookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
