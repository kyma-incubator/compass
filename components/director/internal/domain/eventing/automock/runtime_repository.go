// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	labelfilter "github.com/kyma-incubator/compass/components/director/internal/labelfilter"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// RuntimeRepository is an autogenerated mock type for the RuntimeRepository type
type RuntimeRepository struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, tenant, id
func (_m *RuntimeRepository) GetByID(ctx context.Context, tenant string, id string) (*model.Runtime, error) {
	ret := _m.Called(ctx, tenant, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Runtime
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Runtime, error)); ok {
		return rf(ctx, tenant, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Runtime); ok {
		r0 = rf(ctx, tenant, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Runtime)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenant, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOldestFromIDs provides a mock function with given fields: ctx, tenant, runtimeIDs
func (_m *RuntimeRepository) GetOldestFromIDs(ctx context.Context, tenant string, runtimeIDs []string) (*model.Runtime, error) {
	ret := _m.Called(ctx, tenant, runtimeIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetOldestFromIDs")
	}

	var r0 *model.Runtime
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (*model.Runtime, error)); ok {
		return rf(ctx, tenant, runtimeIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) *model.Runtime); ok {
		r0 = rf(ctx, tenant, runtimeIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Runtime)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, tenant, runtimeIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, tenant, runtimeIDs, filters, pageSize, cursor
func (_m *RuntimeRepository) List(ctx context.Context, tenant string, runtimeIDs []string, filters []*labelfilter.LabelFilter, pageSize int, cursor string) (*model.RuntimePage, error) {
	ret := _m.Called(ctx, tenant, runtimeIDs, filters, pageSize, cursor)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *model.RuntimePage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, []*labelfilter.LabelFilter, int, string) (*model.RuntimePage, error)); ok {
		return rf(ctx, tenant, runtimeIDs, filters, pageSize, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, []*labelfilter.LabelFilter, int, string) *model.RuntimePage); ok {
		r0 = rf(ctx, tenant, runtimeIDs, filters, pageSize, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RuntimePage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, []*labelfilter.LabelFilter, int, string) error); ok {
		r1 = rf(ctx, tenant, runtimeIDs, filters, pageSize, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRuntimeRepository creates a new instance of RuntimeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuntimeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RuntimeRepository {
	mock := &RuntimeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
