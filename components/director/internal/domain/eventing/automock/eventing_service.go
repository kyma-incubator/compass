// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import context "context"

import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/director/internal/model"
import uuid "github.com/google/uuid"

// EventingService is an autogenerated mock type for the EventingService type
type EventingService struct {
	mock.Mock
}

// SetForApplication provides a mock function with given fields: ctx, runtimeID, app
func (_m *EventingService) SetForApplication(ctx context.Context, runtimeID uuid.UUID, app model.Application) (*model.ApplicationEventingConfiguration, error) {
	ret := _m.Called(ctx, runtimeID, app)

	var r0 *model.ApplicationEventingConfiguration
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.Application) *model.ApplicationEventingConfiguration); ok {
		r0 = rf(ctx, runtimeID, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationEventingConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, model.Application) error); ok {
		r1 = rf(ctx, runtimeID, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsetForApplication provides a mock function with given fields: ctx, app
func (_m *EventingService) UnsetForApplication(ctx context.Context, app model.Application) (*model.ApplicationEventingConfiguration, error) {
	ret := _m.Called(ctx, app)

	var r0 *model.ApplicationEventingConfiguration
	if rf, ok := ret.Get(0).(func(context.Context, model.Application) *model.ApplicationEventingConfiguration); ok {
		r0 = rf(ctx, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationEventingConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Application) error); ok {
		r1 = rf(ctx, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
