// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// OperationService is an autogenerated mock type for the OperationService type
type OperationService struct {
	mock.Mock
}

// GetByDataAndType provides a mock function with given fields: ctx, data, opType
func (_m *OperationService) GetByDataAndType(ctx context.Context, data interface{}, opType model.OperationType) (*model.Operation, error) {
	ret := _m.Called(ctx, data, opType)

	var r0 *model.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, model.OperationType) (*model.Operation, error)); ok {
		return rf(ctx, data, opType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, model.OperationType) *model.Operation); ok {
		r0 = rf(ctx, data, opType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, model.OperationType) error); ok {
		r1 = rf(ctx, data, opType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOperationService creates a new instance of OperationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OperationService {
	mock := &OperationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
