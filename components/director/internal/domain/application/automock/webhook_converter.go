// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import "github.com/kyma-incubator/compass/components/director/pkg/graphql"
import "github.com/stretchr/testify/mock"
import "github.com/kyma-incubator/compass/components/director/internal/model"

// WebhookConverter is an autogenerated mock type for the WebhookConverter type
type WebhookConverter struct {
	mock.Mock
}

// InputFromGraphQL provides a mock function with given fields: in
func (_m *WebhookConverter) InputFromGraphQL(in *graphql.ApplicationWebhookInput) *model.ApplicationWebhookInput {
	ret := _m.Called(in)

	var r0 *model.ApplicationWebhookInput
	if rf, ok := ret.Get(0).(func(*graphql.ApplicationWebhookInput) *model.ApplicationWebhookInput); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationWebhookInput)
		}
	}

	return r0
}

// MultipleInputFromGraphQL provides a mock function with given fields: in
func (_m *WebhookConverter) MultipleInputFromGraphQL(in []*graphql.ApplicationWebhookInput) []*model.ApplicationWebhookInput {
	ret := _m.Called(in)

	var r0 []*model.ApplicationWebhookInput
	if rf, ok := ret.Get(0).(func([]*graphql.ApplicationWebhookInput) []*model.ApplicationWebhookInput); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ApplicationWebhookInput)
		}
	}

	return r0
}

// MultipleToGraphQL provides a mock function with given fields: in
func (_m *WebhookConverter) MultipleToGraphQL(in []*model.ApplicationWebhook) []*graphql.ApplicationWebhook {
	ret := _m.Called(in)

	var r0 []*graphql.ApplicationWebhook
	if rf, ok := ret.Get(0).(func([]*model.ApplicationWebhook) []*graphql.ApplicationWebhook); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graphql.ApplicationWebhook)
		}
	}

	return r0
}

// ToGraphQL provides a mock function with given fields: in
func (_m *WebhookConverter) ToGraphQL(in *model.ApplicationWebhook) *graphql.ApplicationWebhook {
	ret := _m.Called(in)

	var r0 *graphql.ApplicationWebhook
	if rf, ok := ret.Get(0).(func(*model.ApplicationWebhook) *graphql.ApplicationWebhook); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphql.ApplicationWebhook)
		}
	}

	return r0
}
