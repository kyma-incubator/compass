// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/director/internal/model"

// WebhookConverter is an autogenerated mock type for the WebhookConverter type
type WebhookConverter struct {
	mock.Mock
}

// InputFromGraphQL provides a mock function with given fields: in
func (_m *WebhookConverter) InputFromGraphQL(in *graphql.WebhookInput) *model.WebhookInput {
	ret := _m.Called(in)

	var r0 *model.WebhookInput
	if rf, ok := ret.Get(0).(func(*graphql.WebhookInput) *model.WebhookInput); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WebhookInput)
		}
	}

	return r0
}

// MultipleInputFromGraphQL provides a mock function with given fields: in
func (_m *WebhookConverter) MultipleInputFromGraphQL(in []*graphql.WebhookInput) []*model.WebhookInput {
	ret := _m.Called(in)

	var r0 []*model.WebhookInput
	if rf, ok := ret.Get(0).(func([]*graphql.WebhookInput) []*model.WebhookInput); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.WebhookInput)
		}
	}

	return r0
}

// MultipleToGraphQL provides a mock function with given fields: in
func (_m *WebhookConverter) MultipleToGraphQL(in []*model.Webhook) []*graphql.Webhook {
	ret := _m.Called(in)

	var r0 []*graphql.Webhook
	if rf, ok := ret.Get(0).(func([]*model.Webhook) []*graphql.Webhook); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graphql.Webhook)
		}
	}

	return r0
}

// ToGraphQL provides a mock function with given fields: in
func (_m *WebhookConverter) ToGraphQL(in *model.Webhook) *graphql.Webhook {
	ret := _m.Called(in)

	var r0 *graphql.Webhook
	if rf, ok := ret.Get(0).(func(*model.Webhook) *graphql.Webhook); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphql.Webhook)
		}
	}

	return r0
}
