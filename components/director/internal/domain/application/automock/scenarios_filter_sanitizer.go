// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	filtersanitizer "github.com/kyma-incubator/compass/components/director/internal/domain/filtersanitizer"
	labelfilter "github.com/kyma-incubator/compass/components/director/internal/labelfilter"

	mock "github.com/stretchr/testify/mock"
)

// ScenariosFilterSanitizer is an autogenerated mock type for the ScenariosFilterSanitizer type
type ScenariosFilterSanitizer struct {
	mock.Mock
}

// RemoveScenarioFilter provides a mock function with given fields: ctx, tenant, filters, isGlobal, listerFunc, globalListerFunc
func (_m *ScenariosFilterSanitizer) RemoveScenarioFilter(ctx context.Context, tenant string, filters []*labelfilter.LabelFilter, isGlobal bool, listerFunc filtersanitizer.ObjectIDListerFunc, globalListerFunc filtersanitizer.ObjectIDListerFuncGlobal) (bool, []string, []*labelfilter.LabelFilter, error) {
	ret := _m.Called(ctx, tenant, filters, isGlobal, listerFunc, globalListerFunc)

	if len(ret) == 0 {
		panic("no return value specified for RemoveScenarioFilter")
	}

	var r0 bool
	var r1 []string
	var r2 []*labelfilter.LabelFilter
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*labelfilter.LabelFilter, bool, filtersanitizer.ObjectIDListerFunc, filtersanitizer.ObjectIDListerFuncGlobal) (bool, []string, []*labelfilter.LabelFilter, error)); ok {
		return rf(ctx, tenant, filters, isGlobal, listerFunc, globalListerFunc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []*labelfilter.LabelFilter, bool, filtersanitizer.ObjectIDListerFunc, filtersanitizer.ObjectIDListerFuncGlobal) bool); ok {
		r0 = rf(ctx, tenant, filters, isGlobal, listerFunc, globalListerFunc)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []*labelfilter.LabelFilter, bool, filtersanitizer.ObjectIDListerFunc, filtersanitizer.ObjectIDListerFuncGlobal) []string); ok {
		r1 = rf(ctx, tenant, filters, isGlobal, listerFunc, globalListerFunc)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, []*labelfilter.LabelFilter, bool, filtersanitizer.ObjectIDListerFunc, filtersanitizer.ObjectIDListerFuncGlobal) []*labelfilter.LabelFilter); ok {
		r2 = rf(ctx, tenant, filters, isGlobal, listerFunc, globalListerFunc)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]*labelfilter.LabelFilter)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, []*labelfilter.LabelFilter, bool, filtersanitizer.ObjectIDListerFunc, filtersanitizer.ObjectIDListerFuncGlobal) error); ok {
		r3 = rf(ctx, tenant, filters, isGlobal, listerFunc, globalListerFunc)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewScenariosFilterSanitizer creates a new instance of ScenariosFilterSanitizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScenariosFilterSanitizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScenariosFilterSanitizer {
	mock := &ScenariosFilterSanitizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
