// Code generated by mockery. DO NOT EDIT.

package automock

import (
	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	tenant "github.com/kyma-incubator/compass/components/director/pkg/tenant"
)

// TenantConverter is an autogenerated mock type for the TenantConverter type
type TenantConverter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: in
func (_m *TenantConverter) FromEntity(in *tenant.Entity) *model.BusinessTenantMapping {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for FromEntity")
	}

	var r0 *model.BusinessTenantMapping
	if rf, ok := ret.Get(0).(func(*tenant.Entity) *model.BusinessTenantMapping); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BusinessTenantMapping)
		}
	}

	return r0
}

// MultipleToGraphQL provides a mock function with given fields: in
func (_m *TenantConverter) MultipleToGraphQL(in []*model.BusinessTenantMapping) []*graphql.Tenant {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for MultipleToGraphQL")
	}

	var r0 []*graphql.Tenant
	if rf, ok := ret.Get(0).(func([]*model.BusinessTenantMapping) []*graphql.Tenant); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graphql.Tenant)
		}
	}

	return r0
}

// NewTenantConverter creates a new instance of TenantConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTenantConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TenantConverter {
	mock := &TenantConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
