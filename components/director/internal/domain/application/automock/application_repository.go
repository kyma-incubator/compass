// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	labelfilter "github.com/kyma-incubator/compass/components/director/internal/labelfilter"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	uuid "github.com/google/uuid"
)

// ApplicationRepository is an autogenerated mock type for the ApplicationRepository type
type ApplicationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tenant, item
func (_m *ApplicationRepository) Create(ctx context.Context, tenant string, item *model.Application) error {
	ret := _m.Called(ctx, tenant, item)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Application) error); ok {
		r0 = rf(ctx, tenant, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, tenant, id
func (_m *ApplicationRepository) Delete(ctx context.Context, tenant string, id string) error {
	ret := _m.Called(ctx, tenant, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tenant, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGlobal provides a mock function with given fields: ctx, id
func (_m *ApplicationRepository) DeleteGlobal(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGlobal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, tenant, id
func (_m *ApplicationRepository) Exists(ctx context.Context, tenant string, id string) (bool, error) {
	ret := _m.Called(ctx, tenant, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, tenant, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, tenant, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenant, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsGlobal provides a mock function with given fields: ctx, id
func (_m *ApplicationRepository) ExistsGlobal(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ExistsGlobal")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByFilter provides a mock function with given fields: ctx, tenant, filter
func (_m *ApplicationRepository) GetByFilter(ctx context.Context, tenant string, filter []*labelfilter.LabelFilter) (*model.Application, error) {
	ret := _m.Called(ctx, tenant, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilter")
	}

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*labelfilter.LabelFilter) (*model.Application, error)); ok {
		return rf(ctx, tenant, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []*labelfilter.LabelFilter) *model.Application); ok {
		r0 = rf(ctx, tenant, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []*labelfilter.LabelFilter) error); ok {
		r1 = rf(ctx, tenant, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, tenant, id
func (_m *ApplicationRepository) GetByID(ctx context.Context, tenant string, id string) (*model.Application, error) {
	ret := _m.Called(ctx, tenant, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Application, error)); ok {
		return rf(ctx, tenant, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Application); ok {
		r0 = rf(ctx, tenant, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenant, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDForUpdate provides a mock function with given fields: ctx, tenant, id
func (_m *ApplicationRepository) GetByIDForUpdate(ctx context.Context, tenant string, id string) (*model.Application, error) {
	ret := _m.Called(ctx, tenant, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDForUpdate")
	}

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Application, error)); ok {
		return rf(ctx, tenant, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Application); ok {
		r0 = rf(ctx, tenant, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenant, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByLocalTenantIDAndAppTemplateID provides a mock function with given fields: ctx, tenant, localTenantID, appTemplateID
func (_m *ApplicationRepository) GetByLocalTenantIDAndAppTemplateID(ctx context.Context, tenant string, localTenantID string, appTemplateID string) (*model.Application, error) {
	ret := _m.Called(ctx, tenant, localTenantID, appTemplateID)

	if len(ret) == 0 {
		panic("no return value specified for GetByLocalTenantIDAndAppTemplateID")
	}

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*model.Application, error)); ok {
		return rf(ctx, tenant, localTenantID, appTemplateID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *model.Application); ok {
		r0 = rf(ctx, tenant, localTenantID, appTemplateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenant, localTenantID, appTemplateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySystemNumber provides a mock function with given fields: ctx, tenant, systemNumber
func (_m *ApplicationRepository) GetBySystemNumber(ctx context.Context, tenant string, systemNumber string) (*model.Application, error) {
	ret := _m.Called(ctx, tenant, systemNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetBySystemNumber")
	}

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Application, error)); ok {
		return rf(ctx, tenant, systemNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Application); ok {
		r0 = rf(ctx, tenant, systemNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenant, systemNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlobalByID provides a mock function with given fields: ctx, id
func (_m *ApplicationRepository) GetGlobalByID(ctx context.Context, id string) (*model.Application, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalByID")
	}

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Application, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Application); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: ctx, tenant
func (_m *ApplicationRepository) ListAll(ctx context.Context, tenant string) ([]*model.Application, error) {
	ret := _m.Called(ctx, tenant)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []*model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Application, error)); ok {
		return rf(ctx, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Application); ok {
		r0 = rf(ctx, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllByApplicationTemplateID provides a mock function with given fields: ctx, applicationTemplateID
func (_m *ApplicationRepository) ListAllByApplicationTemplateID(ctx context.Context, applicationTemplateID string) ([]*model.Application, error) {
	ret := _m.Called(ctx, applicationTemplateID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllByApplicationTemplateID")
	}

	var r0 []*model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Application, error)); ok {
		return rf(ctx, applicationTemplateID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Application); ok {
		r0 = rf(ctx, applicationTemplateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, applicationTemplateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllByFilter provides a mock function with given fields: ctx, tenant, filter
func (_m *ApplicationRepository) ListAllByFilter(ctx context.Context, tenant string, filter []*labelfilter.LabelFilter) ([]*model.Application, error) {
	ret := _m.Called(ctx, tenant, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListAllByFilter")
	}

	var r0 []*model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*labelfilter.LabelFilter) ([]*model.Application, error)); ok {
		return rf(ctx, tenant, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []*labelfilter.LabelFilter) []*model.Application); ok {
		r0 = rf(ctx, tenant, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []*labelfilter.LabelFilter) error); ok {
		r1 = rf(ctx, tenant, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllByIDs provides a mock function with given fields: ctx, tenantID, ids
func (_m *ApplicationRepository) ListAllByIDs(ctx context.Context, tenantID string, ids []string) ([]*model.Application, error) {
	ret := _m.Called(ctx, tenantID, ids)

	if len(ret) == 0 {
		panic("no return value specified for ListAllByIDs")
	}

	var r0 []*model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]*model.Application, error)); ok {
		return rf(ctx, tenantID, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []*model.Application); ok {
		r0 = rf(ctx, tenantID, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, tenantID, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllGlobalByFilter provides a mock function with given fields: ctx, appIDs, filter, pageSize, cursor
func (_m *ApplicationRepository) ListAllGlobalByFilter(ctx context.Context, appIDs []string, filter []*labelfilter.LabelFilter, pageSize int, cursor string) (*model.ApplicationWithTenantsPage, error) {
	ret := _m.Called(ctx, appIDs, filter, pageSize, cursor)

	if len(ret) == 0 {
		panic("no return value specified for ListAllGlobalByFilter")
	}

	var r0 *model.ApplicationWithTenantsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, []*labelfilter.LabelFilter, int, string) (*model.ApplicationWithTenantsPage, error)); ok {
		return rf(ctx, appIDs, filter, pageSize, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, []*labelfilter.LabelFilter, int, string) *model.ApplicationWithTenantsPage); ok {
		r0 = rf(ctx, appIDs, filter, pageSize, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationWithTenantsPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, []*labelfilter.LabelFilter, int, string) error); ok {
		r1 = rf(ctx, appIDs, filter, pageSize, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByIDsAndFilters provides a mock function with given fields: ctx, tenant, appIDs, filters, pageSize, cursor
func (_m *ApplicationRepository) ListByIDsAndFilters(ctx context.Context, tenant string, appIDs []string, filters []*labelfilter.LabelFilter, pageSize int, cursor string) (*model.ApplicationPage, error) {
	ret := _m.Called(ctx, tenant, appIDs, filters, pageSize, cursor)

	if len(ret) == 0 {
		panic("no return value specified for ListByIDsAndFilters")
	}

	var r0 *model.ApplicationPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, []*labelfilter.LabelFilter, int, string) (*model.ApplicationPage, error)); ok {
		return rf(ctx, tenant, appIDs, filters, pageSize, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, []*labelfilter.LabelFilter, int, string) *model.ApplicationPage); ok {
		r0 = rf(ctx, tenant, appIDs, filters, pageSize, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, []*labelfilter.LabelFilter, int, string) error); ok {
		r1 = rf(ctx, tenant, appIDs, filters, pageSize, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByLocalTenantID provides a mock function with given fields: ctx, tenant, localTenantID, appIDs, filters, pageSize, cursor
func (_m *ApplicationRepository) ListByLocalTenantID(ctx context.Context, tenant string, localTenantID string, appIDs []string, filters []*labelfilter.LabelFilter, pageSize int, cursor string) (*model.ApplicationPage, error) {
	ret := _m.Called(ctx, tenant, localTenantID, appIDs, filters, pageSize, cursor)

	if len(ret) == 0 {
		panic("no return value specified for ListByLocalTenantID")
	}

	var r0 *model.ApplicationPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, []*labelfilter.LabelFilter, int, string) (*model.ApplicationPage, error)); ok {
		return rf(ctx, tenant, localTenantID, appIDs, filters, pageSize, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, []*labelfilter.LabelFilter, int, string) *model.ApplicationPage); ok {
		r0 = rf(ctx, tenant, localTenantID, appIDs, filters, pageSize, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string, []*labelfilter.LabelFilter, int, string) error); ok {
		r1 = rf(ctx, tenant, localTenantID, appIDs, filters, pageSize, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByScenarios provides a mock function with given fields: ctx, tenantID, scenarios, pageSize, cursor, hidingSelectors
func (_m *ApplicationRepository) ListByScenarios(ctx context.Context, tenantID uuid.UUID, scenarios []string, pageSize int, cursor string, hidingSelectors map[string][]string) (*model.ApplicationPage, error) {
	ret := _m.Called(ctx, tenantID, scenarios, pageSize, cursor, hidingSelectors)

	if len(ret) == 0 {
		panic("no return value specified for ListByScenarios")
	}

	var r0 *model.ApplicationPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []string, int, string, map[string][]string) (*model.ApplicationPage, error)); ok {
		return rf(ctx, tenantID, scenarios, pageSize, cursor, hidingSelectors)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []string, int, string, map[string][]string) *model.ApplicationPage); ok {
		r0 = rf(ctx, tenantID, scenarios, pageSize, cursor, hidingSelectors)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []string, int, string, map[string][]string) error); ok {
		r1 = rf(ctx, tenantID, scenarios, pageSize, cursor, hidingSelectors)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByScenariosAndIDs provides a mock function with given fields: ctx, tenant, scenarios, ids
func (_m *ApplicationRepository) ListByScenariosAndIDs(ctx context.Context, tenant string, scenarios []string, ids []string) ([]*model.Application, error) {
	ret := _m.Called(ctx, tenant, scenarios, ids)

	if len(ret) == 0 {
		panic("no return value specified for ListByScenariosAndIDs")
	}

	var r0 []*model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, []string) ([]*model.Application, error)); ok {
		return rf(ctx, tenant, scenarios, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, []string) []*model.Application); ok {
		r0 = rf(ctx, tenant, scenarios, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, []string) error); ok {
		r1 = rf(ctx, tenant, scenarios, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByScenariosNoPaging provides a mock function with given fields: ctx, tenant, scenarios
func (_m *ApplicationRepository) ListByScenariosNoPaging(ctx context.Context, tenant string, scenarios []string) ([]*model.Application, error) {
	ret := _m.Called(ctx, tenant, scenarios)

	if len(ret) == 0 {
		panic("no return value specified for ListByScenariosNoPaging")
	}

	var r0 []*model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]*model.Application, error)); ok {
		return rf(ctx, tenant, scenarios)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []*model.Application); ok {
		r0 = rf(ctx, tenant, scenarios)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, tenant, scenarios)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGlobal provides a mock function with given fields: ctx, pageSize, cursor
func (_m *ApplicationRepository) ListGlobal(ctx context.Context, pageSize int, cursor string) (*model.ApplicationPage, error) {
	ret := _m.Called(ctx, pageSize, cursor)

	if len(ret) == 0 {
		panic("no return value specified for ListGlobal")
	}

	var r0 *model.ApplicationPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (*model.ApplicationPage, error)); ok {
		return rf(ctx, pageSize, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *model.ApplicationPage); ok {
		r0 = rf(ctx, pageSize, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, pageSize, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListListeningApplications provides a mock function with given fields: ctx, tenant, whType
func (_m *ApplicationRepository) ListListeningApplications(ctx context.Context, tenant string, whType model.WebhookType) ([]*model.Application, error) {
	ret := _m.Called(ctx, tenant, whType)

	if len(ret) == 0 {
		panic("no return value specified for ListListeningApplications")
	}

	var r0 []*model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.WebhookType) ([]*model.Application, error)); ok {
		return rf(ctx, tenant, whType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.WebhookType) []*model.Application); ok {
		r0 = rf(ctx, tenant, whType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.WebhookType) error); ok {
		r1 = rf(ctx, tenant, whType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OwnerExists provides a mock function with given fields: ctx, tenant, id
func (_m *ApplicationRepository) OwnerExists(ctx context.Context, tenant string, id string) (bool, error) {
	ret := _m.Called(ctx, tenant, id)

	if len(ret) == 0 {
		panic("no return value specified for OwnerExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, tenant, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, tenant, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenant, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TechnicalUpdate provides a mock function with given fields: ctx, item
func (_m *ApplicationRepository) TechnicalUpdate(ctx context.Context, item *model.Application) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for TechnicalUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Application) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrustedUpsert provides a mock function with given fields: ctx, tenant, _a2
func (_m *ApplicationRepository) TrustedUpsert(ctx context.Context, tenant string, _a2 *model.Application) (string, error) {
	ret := _m.Called(ctx, tenant, _a2)

	if len(ret) == 0 {
		panic("no return value specified for TrustedUpsert")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Application) (string, error)); ok {
		return rf(ctx, tenant, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Application) string); ok {
		r0 = rf(ctx, tenant, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *model.Application) error); ok {
		r1 = rf(ctx, tenant, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tenant, item
func (_m *ApplicationRepository) Update(ctx context.Context, tenant string, item *model.Application) error {
	ret := _m.Called(ctx, tenant, item)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Application) error); ok {
		r0 = rf(ctx, tenant, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: ctx, tenant, _a2
func (_m *ApplicationRepository) Upsert(ctx context.Context, tenant string, _a2 *model.Application) (string, error) {
	ret := _m.Called(ctx, tenant, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Application) (string, error)); ok {
		return rf(ctx, tenant, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Application) string); ok {
		r0 = rf(ctx, tenant, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *model.Application) error); ok {
		r1 = rf(ctx, tenant, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApplicationRepository creates a new instance of ApplicationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationRepository {
	mock := &ApplicationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
