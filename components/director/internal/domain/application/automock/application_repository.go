// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import labelfilter "github.com/kyma-incubator/compass/components/director/internal/labelfilter"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/director/internal/model"

// ApplicationRepository is an autogenerated mock type for the ApplicationRepository type
type ApplicationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: item
func (_m *ApplicationRepository) Create(item *model.Application) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Application) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: item
func (_m *ApplicationRepository) Delete(item *model.Application) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Application) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exist provides a mock function with given fields: tenant, id
func (_m *ApplicationRepository) Exist(tenant string, id string) (bool, error) {
	ret := _m.Called(tenant, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(tenant, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tenant, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByTenantAndRuntimeID provides a mock function with given fields: tenant, runtimeID
func (_m *ApplicationRepository) GetAllByTenantAndRuntimeID(tenant string, runtimeID string) ([]*model.Application, error) {
	ret := _m.Called(tenant, runtimeID)

	var r0 []*model.Application
	if rf, ok := ret.Get(0).(func(string, string) []*model.Application); ok {
		r0 = rf(tenant, runtimeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tenant, runtimeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: tenant, id
func (_m *ApplicationRepository) GetByID(tenant string, id string) (*model.Application, error) {
	ret := _m.Called(tenant, id)

	var r0 *model.Application
	if rf, ok := ret.Get(0).(func(string, string) *model.Application); ok {
		r0 = rf(tenant, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tenant, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: tenant, filter, pageSize, cursor
func (_m *ApplicationRepository) List(tenant string, filter []*labelfilter.LabelFilter, pageSize *int, cursor *string) (*model.ApplicationPage, error) {
	ret := _m.Called(tenant, filter, pageSize, cursor)

	var r0 *model.ApplicationPage
	if rf, ok := ret.Get(0).(func(string, []*labelfilter.LabelFilter, *int, *string) *model.ApplicationPage); ok {
		r0 = rf(tenant, filter, pageSize, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationPage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []*labelfilter.LabelFilter, *int, *string) error); ok {
		r1 = rf(tenant, filter, pageSize, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: item
func (_m *ApplicationRepository) Update(item *model.Application) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Application) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
