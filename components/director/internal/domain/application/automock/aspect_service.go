// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// AspectService is an autogenerated mock type for the AspectService type
type AspectService struct {
	mock.Mock
}

// ListByApplicationIDs provides a mock function with given fields: ctx, applicationIDs, pageSize, cursor
func (_m *AspectService) ListByApplicationIDs(ctx context.Context, applicationIDs []string, pageSize int, cursor string) ([]*model.Aspect, map[string]int, error) {
	ret := _m.Called(ctx, applicationIDs, pageSize, cursor)

	var r0 []*model.Aspect
	var r1 map[string]int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, int, string) ([]*model.Aspect, map[string]int, error)); ok {
		return rf(ctx, applicationIDs, pageSize, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, int, string) []*model.Aspect); ok {
		r0 = rf(ctx, applicationIDs, pageSize, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Aspect)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, int, string) map[string]int); ok {
		r1 = rf(ctx, applicationIDs, pageSize, cursor)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]int)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string, int, string) error); ok {
		r2 = rf(ctx, applicationIDs, pageSize, cursor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewAspectService creates a new instance of AspectService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAspectService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AspectService {
	mock := &AspectService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
