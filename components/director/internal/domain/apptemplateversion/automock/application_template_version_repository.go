// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ApplicationTemplateVersionRepository is an autogenerated mock type for the ApplicationTemplateVersionRepository type
type ApplicationTemplateVersionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, item
func (_m *ApplicationTemplateVersionRepository) Create(ctx context.Context, item model.ApplicationTemplateVersion) error {
	ret := _m.Called(ctx, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ApplicationTemplateVersion) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, id
func (_m *ApplicationTemplateVersionRepository) Exists(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByAppTemplateIDAndVersion provides a mock function with given fields: ctx, appTemplateID, version
func (_m *ApplicationTemplateVersionRepository) GetByAppTemplateIDAndVersion(ctx context.Context, appTemplateID string, version string) (*model.ApplicationTemplateVersion, error) {
	ret := _m.Called(ctx, appTemplateID, version)

	var r0 *model.ApplicationTemplateVersion
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.ApplicationTemplateVersion); ok {
		r0 = rf(ctx, appTemplateID, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationTemplateVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appTemplateID, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByAppTemplateID provides a mock function with given fields: ctx, appTemplateID
func (_m *ApplicationTemplateVersionRepository) ListByAppTemplateID(ctx context.Context, appTemplateID string) ([]*model.ApplicationTemplateVersion, error) {
	ret := _m.Called(ctx, appTemplateID)

	var r0 []*model.ApplicationTemplateVersion
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.ApplicationTemplateVersion); ok {
		r0 = rf(ctx, appTemplateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ApplicationTemplateVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appTemplateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *ApplicationTemplateVersionRepository) Update(ctx context.Context, _a1 model.ApplicationTemplateVersion) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ApplicationTemplateVersion) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewApplicationTemplateVersionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplicationTemplateVersionRepository creates a new instance of ApplicationTemplateVersionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplicationTemplateVersionRepository(t mockConstructorTestingTNewApplicationTemplateVersionRepository) *ApplicationTemplateVersionRepository {
	mock := &ApplicationTemplateVersionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
