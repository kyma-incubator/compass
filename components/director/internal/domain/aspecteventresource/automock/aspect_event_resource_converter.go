// Code generated by mockery. DO NOT EDIT.

package automock

import (
	aspecteventresource "github.com/kyma-incubator/compass/components/director/internal/domain/aspecteventresource"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// AspectEventResourceConverter is an autogenerated mock type for the AspectEventResourceConverter type
type AspectEventResourceConverter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: entity
func (_m *AspectEventResourceConverter) FromEntity(entity *aspecteventresource.Entity) *model.AspectEventResource {
	ret := _m.Called(entity)

	var r0 *model.AspectEventResource
	if rf, ok := ret.Get(0).(func(*aspecteventresource.Entity) *model.AspectEventResource); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AspectEventResource)
		}
	}

	return r0
}

// ToEntity provides a mock function with given fields: aspectEventResourceModel
func (_m *AspectEventResourceConverter) ToEntity(aspectEventResourceModel *model.AspectEventResource) *aspecteventresource.Entity {
	ret := _m.Called(aspectEventResourceModel)

	var r0 *aspecteventresource.Entity
	if rf, ok := ret.Get(0).(func(*model.AspectEventResource) *aspecteventresource.Entity); ok {
		r0 = rf(aspectEventResourceModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aspecteventresource.Entity)
		}
	}

	return r0
}

// NewAspectEventResourceConverter creates a new instance of AspectEventResourceConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAspectEventResourceConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AspectEventResourceConverter {
	mock := &AspectEventResourceConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
