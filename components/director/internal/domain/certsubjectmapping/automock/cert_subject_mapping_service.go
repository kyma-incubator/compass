// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// CertSubjectMappingService is an autogenerated mock type for the CertSubjectMappingService type
type CertSubjectMappingService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in
func (_m *CertSubjectMappingService) Create(ctx context.Context, in *model.CertSubjectMapping) (string, error) {
	ret := _m.Called(ctx, in)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *model.CertSubjectMapping) string); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.CertSubjectMapping) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CertSubjectMappingService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, id
func (_m *CertSubjectMappingService) Exists(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *CertSubjectMappingService) Get(ctx context.Context, id string) (*model.CertSubjectMapping, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.CertSubjectMapping
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.CertSubjectMapping); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CertSubjectMapping)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, pageSize, cursor
func (_m *CertSubjectMappingService) List(ctx context.Context, pageSize int, cursor string) (*model.CertSubjectMappingPage, error) {
	ret := _m.Called(ctx, pageSize, cursor)

	var r0 *model.CertSubjectMappingPage
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *model.CertSubjectMappingPage); ok {
		r0 = rf(ctx, pageSize, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CertSubjectMappingPage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, pageSize, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in
func (_m *CertSubjectMappingService) Update(ctx context.Context, in *model.CertSubjectMapping) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CertSubjectMapping) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCertSubjectMappingService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCertSubjectMappingService creates a new instance of CertSubjectMappingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCertSubjectMappingService(t mockConstructorTestingTNewCertSubjectMappingService) *CertSubjectMappingService {
	mock := &CertSubjectMappingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
