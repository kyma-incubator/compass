// Code generated by mockery. DO NOT EDIT.

package automock

import (
	spec "github.com/kyma-incubator/compass/components/director/internal/domain/spec"
	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: in
func (_m *Converter) FromEntity(in *spec.Entity) (*model.Spec, error) {
	ret := _m.Called(in)

	var r0 *model.Spec
	var r1 error
	if rf, ok := ret.Get(0).(func(*spec.Entity) (*model.Spec, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*spec.Entity) *model.Spec); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Spec)
		}
	}

	if rf, ok := ret.Get(1).(func(*spec.Entity) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToEntity provides a mock function with given fields: in
func (_m *Converter) ToEntity(in *model.Spec) *spec.Entity {
	ret := _m.Called(in)

	var r0 *spec.Entity
	if rf, ok := ret.Get(0).(func(*model.Spec) *spec.Entity); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*spec.Entity)
		}
	}

	return r0
}

// NewConverter creates a new instance of Converter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Converter {
	mock := &Converter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
