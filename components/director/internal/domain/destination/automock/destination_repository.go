// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// DestinationRepository is an autogenerated mock type for the destinationRepository type
type DestinationRepository struct {
	mock.Mock
}

// CreateDestination provides a mock function with given fields: ctx, _a1
func (_m *DestinationRepository) CreateDestination(ctx context.Context, _a1 *model.Destination) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Destination) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByAssignmentID provides a mock function with given fields: ctx, destinationName, tenantID, formationAssignmentID
func (_m *DestinationRepository) DeleteByAssignmentID(ctx context.Context, destinationName string, tenantID string, formationAssignmentID string) error {
	ret := _m.Called(ctx, destinationName, tenantID, formationAssignmentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, destinationName, tenantID, formationAssignmentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDestinationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDestinationRepository creates a new instance of DestinationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDestinationRepository(t mockConstructorTestingTNewDestinationRepository) *DestinationRepository {
	mock := &DestinationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
