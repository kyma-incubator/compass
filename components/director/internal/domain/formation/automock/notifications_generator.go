// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	webhook "github.com/kyma-incubator/compass/components/director/pkg/webhook"

	webhookclient "github.com/kyma-incubator/compass/components/director/pkg/webhook_client"
)

// NotificationsGenerator is an autogenerated mock type for the notificationsGenerator type
type NotificationsGenerator struct {
	mock.Mock
}

// GenerateNotificationsAboutApplicationsForTheRuntimeContextThatIsAssigned provides a mock function with given fields: ctx, tenant, runtimeCtxID, _a3, operation, customerTenantContext
func (_m *NotificationsGenerator) GenerateNotificationsAboutApplicationsForTheRuntimeContextThatIsAssigned(ctx context.Context, tenant string, runtimeCtxID string, _a3 *model.Formation, operation model.FormationOperation, customerTenantContext *webhook.CustomerTenantContext) ([]*webhookclient.NotificationRequest, error) {
	ret := _m.Called(ctx, tenant, runtimeCtxID, _a3, operation, customerTenantContext)

	var r0 []*webhookclient.NotificationRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) []*webhookclient.NotificationRequest); ok {
		r0 = rf(ctx, tenant, runtimeCtxID, _a3, operation, customerTenantContext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*webhookclient.NotificationRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) error); ok {
		r1 = rf(ctx, tenant, runtimeCtxID, _a3, operation, customerTenantContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateNotificationsAboutApplicationsForTheRuntimeThatIsAssigned provides a mock function with given fields: ctx, tenant, runtimeID, _a3, operation, customerTenantContext
func (_m *NotificationsGenerator) GenerateNotificationsAboutApplicationsForTheRuntimeThatIsAssigned(ctx context.Context, tenant string, runtimeID string, _a3 *model.Formation, operation model.FormationOperation, customerTenantContext *webhook.CustomerTenantContext) ([]*webhookclient.NotificationRequest, error) {
	ret := _m.Called(ctx, tenant, runtimeID, _a3, operation, customerTenantContext)

	var r0 []*webhookclient.NotificationRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) []*webhookclient.NotificationRequest); ok {
		r0 = rf(ctx, tenant, runtimeID, _a3, operation, customerTenantContext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*webhookclient.NotificationRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) error); ok {
		r1 = rf(ctx, tenant, runtimeID, _a3, operation, customerTenantContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateNotificationsAboutRuntimeAndRuntimeContextForTheApplicationThatIsAssigned provides a mock function with given fields: ctx, tenant, appID, _a3, operation, customerTenantContext
func (_m *NotificationsGenerator) GenerateNotificationsAboutRuntimeAndRuntimeContextForTheApplicationThatIsAssigned(ctx context.Context, tenant string, appID string, _a3 *model.Formation, operation model.FormationOperation, customerTenantContext *webhook.CustomerTenantContext) ([]*webhookclient.NotificationRequest, error) {
	ret := _m.Called(ctx, tenant, appID, _a3, operation, customerTenantContext)

	var r0 []*webhookclient.NotificationRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) []*webhookclient.NotificationRequest); ok {
		r0 = rf(ctx, tenant, appID, _a3, operation, customerTenantContext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*webhookclient.NotificationRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) error); ok {
		r1 = rf(ctx, tenant, appID, _a3, operation, customerTenantContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateNotificationsForApplicationsAboutTheApplicationThatIsAssigned provides a mock function with given fields: ctx, tenant, appID, _a3, operation, customerTenantContext
func (_m *NotificationsGenerator) GenerateNotificationsForApplicationsAboutTheApplicationThatIsAssigned(ctx context.Context, tenant string, appID string, _a3 *model.Formation, operation model.FormationOperation, customerTenantContext *webhook.CustomerTenantContext) ([]*webhookclient.NotificationRequest, error) {
	ret := _m.Called(ctx, tenant, appID, _a3, operation, customerTenantContext)

	var r0 []*webhookclient.NotificationRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) []*webhookclient.NotificationRequest); ok {
		r0 = rf(ctx, tenant, appID, _a3, operation, customerTenantContext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*webhookclient.NotificationRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) error); ok {
		r1 = rf(ctx, tenant, appID, _a3, operation, customerTenantContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateNotificationsForApplicationsAboutTheRuntimeContextThatIsAssigned provides a mock function with given fields: ctx, tenant, runtimeCtxID, _a3, operation, customerTenantContext
func (_m *NotificationsGenerator) GenerateNotificationsForApplicationsAboutTheRuntimeContextThatIsAssigned(ctx context.Context, tenant string, runtimeCtxID string, _a3 *model.Formation, operation model.FormationOperation, customerTenantContext *webhook.CustomerTenantContext) ([]*webhookclient.NotificationRequest, error) {
	ret := _m.Called(ctx, tenant, runtimeCtxID, _a3, operation, customerTenantContext)

	var r0 []*webhookclient.NotificationRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) []*webhookclient.NotificationRequest); ok {
		r0 = rf(ctx, tenant, runtimeCtxID, _a3, operation, customerTenantContext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*webhookclient.NotificationRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) error); ok {
		r1 = rf(ctx, tenant, runtimeCtxID, _a3, operation, customerTenantContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateNotificationsForApplicationsAboutTheRuntimeThatIsAssigned provides a mock function with given fields: ctx, tenant, runtimeID, _a3, operation, customerTenantContext
func (_m *NotificationsGenerator) GenerateNotificationsForApplicationsAboutTheRuntimeThatIsAssigned(ctx context.Context, tenant string, runtimeID string, _a3 *model.Formation, operation model.FormationOperation, customerTenantContext *webhook.CustomerTenantContext) ([]*webhookclient.NotificationRequest, error) {
	ret := _m.Called(ctx, tenant, runtimeID, _a3, operation, customerTenantContext)

	var r0 []*webhookclient.NotificationRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) []*webhookclient.NotificationRequest); ok {
		r0 = rf(ctx, tenant, runtimeID, _a3, operation, customerTenantContext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*webhookclient.NotificationRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) error); ok {
		r1 = rf(ctx, tenant, runtimeID, _a3, operation, customerTenantContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateNotificationsForRuntimeAboutTheApplicationThatIsAssigned provides a mock function with given fields: ctx, tenant, appID, _a3, operation, customerTenantContext
func (_m *NotificationsGenerator) GenerateNotificationsForRuntimeAboutTheApplicationThatIsAssigned(ctx context.Context, tenant string, appID string, _a3 *model.Formation, operation model.FormationOperation, customerTenantContext *webhook.CustomerTenantContext) ([]*webhookclient.NotificationRequest, error) {
	ret := _m.Called(ctx, tenant, appID, _a3, operation, customerTenantContext)

	var r0 []*webhookclient.NotificationRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) []*webhookclient.NotificationRequest); ok {
		r0 = rf(ctx, tenant, appID, _a3, operation, customerTenantContext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*webhookclient.NotificationRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *model.Formation, model.FormationOperation, *webhook.CustomerTenantContext) error); ok {
		r1 = rf(ctx, tenant, appID, _a3, operation, customerTenantContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewNotificationsGeneratorT interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotificationsGenerator creates a new instance of NotificationsGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNotificationsGenerator(t NewNotificationsGeneratorT) *NotificationsGenerator {
	mock := &NotificationsGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
