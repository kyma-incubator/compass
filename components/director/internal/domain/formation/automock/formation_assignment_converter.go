// Code generated by mockery. DO NOT EDIT.

package automock

import (
	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// FormationAssignmentConverter is an autogenerated mock type for the FormationAssignmentConverter type
type FormationAssignmentConverter struct {
	mock.Mock
}

// MultipleToGraphQL provides a mock function with given fields: in
func (_m *FormationAssignmentConverter) MultipleToGraphQL(in []*model.FormationAssignment) ([]*graphql.FormationAssignment, error) {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for MultipleToGraphQL")
	}

	var r0 []*graphql.FormationAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func([]*model.FormationAssignment) ([]*graphql.FormationAssignment, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func([]*model.FormationAssignment) []*graphql.FormationAssignment); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graphql.FormationAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func([]*model.FormationAssignment) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToGraphQL provides a mock function with given fields: in
func (_m *FormationAssignmentConverter) ToGraphQL(in *model.FormationAssignment) (*graphql.FormationAssignment, error) {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for ToGraphQL")
	}

	var r0 *graphql.FormationAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.FormationAssignment) (*graphql.FormationAssignment, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*model.FormationAssignment) *graphql.FormationAssignment); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphql.FormationAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.FormationAssignment) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFormationAssignmentConverter creates a new instance of FormationAssignmentConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormationAssignmentConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *FormationAssignmentConverter {
	mock := &FormationAssignmentConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
