// Code generated by mockery. DO NOT EDIT.

package automock

import (
	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	testing "testing"
)

// FormationAssignmentConverter is an autogenerated mock type for the FormationAssignmentConverter type
type FormationAssignmentConverter struct {
	mock.Mock
}

// MultipleToGraphQL provides a mock function with given fields: in
func (_m *FormationAssignmentConverter) MultipleToGraphQL(in []*model.FormationAssignment) []*graphql.FormationAssignment {
	ret := _m.Called(in)

	var r0 []*graphql.FormationAssignment
	if rf, ok := ret.Get(0).(func([]*model.FormationAssignment) []*graphql.FormationAssignment); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graphql.FormationAssignment)
		}
	}

	return r0
}

// ToGraphQL provides a mock function with given fields: in
func (_m *FormationAssignmentConverter) ToGraphQL(in *model.FormationAssignment) *graphql.FormationAssignment {
	ret := _m.Called(in)

	var r0 *graphql.FormationAssignment
	if rf, ok := ret.Get(0).(func(*model.FormationAssignment) *graphql.FormationAssignment); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphql.FormationAssignment)
		}
	}

	return r0
}

// NewFormationAssignmentConverter creates a new instance of FormationAssignmentConverter. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFormationAssignmentConverter(t testing.TB) *FormationAssignmentConverter {
	mock := &FormationAssignmentConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
