// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	webhook "github.com/kyma-incubator/compass/components/director/pkg/webhook"

	webhookclient "github.com/kyma-incubator/compass/components/director/pkg/webhook_client"
)

// WebhookClient is an autogenerated mock type for the webhookClient type
type WebhookClient struct {
	mock.Mock
}

// Do provides a mock function with given fields: ctx, request
func (_m *WebhookClient) Do(ctx context.Context, request webhookclient.WebhookRequest) (*webhook.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *webhook.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, webhookclient.WebhookRequest) (*webhook.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webhookclient.WebhookRequest) *webhook.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, webhookclient.WebhookRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWebhookClient creates a new instance of WebhookClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookClient {
	mock := &WebhookClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
