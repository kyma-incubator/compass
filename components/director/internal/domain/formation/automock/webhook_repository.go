// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// WebhookRepository is an autogenerated mock type for the webhookRepository type
type WebhookRepository struct {
	mock.Mock
}

// ListByReferenceObjectIDGlobal provides a mock function with given fields: ctx, objID, objType
func (_m *WebhookRepository) ListByReferenceObjectIDGlobal(ctx context.Context, objID string, objType model.WebhookReferenceObjectType) ([]*model.Webhook, error) {
	ret := _m.Called(ctx, objID, objType)

	if len(ret) == 0 {
		panic("no return value specified for ListByReferenceObjectIDGlobal")
	}

	var r0 []*model.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.WebhookReferenceObjectType) ([]*model.Webhook, error)); ok {
		return rf(ctx, objID, objType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.WebhookReferenceObjectType) []*model.Webhook); ok {
		r0 = rf(ctx, objID, objType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.WebhookReferenceObjectType) error); ok {
		r1 = rf(ctx, objID, objType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWebhookRepository creates a new instance of WebhookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookRepository {
	mock := &WebhookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
