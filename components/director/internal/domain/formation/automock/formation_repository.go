// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	testing "testing"
)

// FormationRepository is an autogenerated mock type for the FormationRepository type
type FormationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, item, id, tenant, formationTemplateID
func (_m *FormationRepository) Create(ctx context.Context, item *model.Formation, id string, tenant string, formationTemplateID string) error {
	ret := _m.Called(ctx, item, id, tenant, formationTemplateID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Formation, string, string, string) error); ok {
		r0 = rf(ctx, item, id, tenant, formationTemplateID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByName provides a mock function with given fields: ctx, name, tenantID
func (_m *FormationRepository) DeleteByName(ctx context.Context, name string, tenantID string) error {
	ret := _m.Called(ctx, name, tenantID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFormationRepository creates a new instance of FormationRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFormationRepository(t testing.TB) *FormationRepository {
	mock := &FormationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
