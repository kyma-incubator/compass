// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	notifications "github.com/kyma-incubator/compass/components/director/internal/domain/notifications"
)

// FormationAssignmentService is an autogenerated mock type for the formationAssignmentService type
type FormationAssignmentService struct {
	mock.Mock
}

// CleanupFormationAssignment provides a mock function with given fields: ctx, mappingPair
func (_m *FormationAssignmentService) CleanupFormationAssignment(ctx context.Context, mappingPair *notifications.AssignmentMappingPairWithOperation) (bool, error) {
	ret := _m.Called(ctx, mappingPair)

	if len(ret) == 0 {
		panic("no return value specified for CleanupFormationAssignment")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notifications.AssignmentMappingPairWithOperation) (bool, error)); ok {
		return rf(ctx, mappingPair)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notifications.AssignmentMappingPairWithOperation) bool); ok {
		r0 = rf(ctx, mappingPair)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notifications.AssignmentMappingPairWithOperation) error); ok {
		r1 = rf(ctx, mappingPair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssignmentsForObjectID provides a mock function with given fields: ctx, formationID, objectID
func (_m *FormationAssignmentService) DeleteAssignmentsForObjectID(ctx context.Context, formationID string, objectID string) error {
	ret := _m.Called(ctx, formationID, objectID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAssignmentsForObjectID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, formationID, objectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateAssignments provides a mock function with given fields: ctx, tnt, objectID, objectType, _a4, initialConfigurations
func (_m *FormationAssignmentService) GenerateAssignments(ctx context.Context, tnt string, objectID string, objectType graphql.FormationObjectType, _a4 *model.Formation, initialConfigurations model.InitialConfigurations) ([]*model.FormationAssignmentInput, error) {
	ret := _m.Called(ctx, tnt, objectID, objectType, _a4, initialConfigurations)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAssignments")
	}

	var r0 []*model.FormationAssignmentInput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, graphql.FormationObjectType, *model.Formation, model.InitialConfigurations) ([]*model.FormationAssignmentInput, error)); ok {
		return rf(ctx, tnt, objectID, objectType, _a4, initialConfigurations)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, graphql.FormationObjectType, *model.Formation, model.InitialConfigurations) []*model.FormationAssignmentInput); ok {
		r0 = rf(ctx, tnt, objectID, objectType, _a4, initialConfigurations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FormationAssignmentInput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, graphql.FormationObjectType, *model.Formation, model.InitialConfigurations) error); ok {
		r1 = rf(ctx, tnt, objectID, objectType, _a4, initialConfigurations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssignmentsForFormation provides a mock function with given fields: ctx, tenantID, formationID
func (_m *FormationAssignmentService) GetAssignmentsForFormation(ctx context.Context, tenantID string, formationID string) ([]*model.FormationAssignment, error) {
	ret := _m.Called(ctx, tenantID, formationID)

	if len(ret) == 0 {
		panic("no return value specified for GetAssignmentsForFormation")
	}

	var r0 []*model.FormationAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*model.FormationAssignment, error)); ok {
		return rf(ctx, tenantID, formationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*model.FormationAssignment); ok {
		r0 = rf(ctx, tenantID, formationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FormationAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenantID, formationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssignmentsForFormationWithStates provides a mock function with given fields: ctx, tenantID, formationID, states
func (_m *FormationAssignmentService) GetAssignmentsForFormationWithStates(ctx context.Context, tenantID string, formationID string, states []string) ([]*model.FormationAssignment, error) {
	ret := _m.Called(ctx, tenantID, formationID, states)

	if len(ret) == 0 {
		panic("no return value specified for GetAssignmentsForFormationWithStates")
	}

	var r0 []*model.FormationAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) ([]*model.FormationAssignment, error)); ok {
		return rf(ctx, tenantID, formationID, states)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) []*model.FormationAssignment); ok {
		r0 = rf(ctx, tenantID, formationID, states)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FormationAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, tenantID, formationID, states)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForFormation provides a mock function with given fields: ctx, id, formationID
func (_m *FormationAssignmentService) GetForFormation(ctx context.Context, id string, formationID string) (*model.FormationAssignment, error) {
	ret := _m.Called(ctx, id, formationID)

	if len(ret) == 0 {
		panic("no return value specified for GetForFormation")
	}

	var r0 *model.FormationAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.FormationAssignment, error)); ok {
		return rf(ctx, id, formationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.FormationAssignment); ok {
		r0 = rf(ctx, id, formationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FormationAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, formationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReverseBySourceAndTarget provides a mock function with given fields: ctx, formationID, sourceID, targetID
func (_m *FormationAssignmentService) GetReverseBySourceAndTarget(ctx context.Context, formationID string, sourceID string, targetID string) (*model.FormationAssignment, error) {
	ret := _m.Called(ctx, formationID, sourceID, targetID)

	if len(ret) == 0 {
		panic("no return value specified for GetReverseBySourceAndTarget")
	}

	var r0 *model.FormationAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*model.FormationAssignment, error)); ok {
		return rf(ctx, formationID, sourceID, targetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *model.FormationAssignment); ok {
		r0 = rf(ctx, formationID, sourceID, targetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FormationAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, formationID, sourceID, targetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllForObjectGlobal provides a mock function with given fields: ctx, objectID
func (_m *FormationAssignmentService) ListAllForObjectGlobal(ctx context.Context, objectID string) ([]*model.FormationAssignment, error) {
	ret := _m.Called(ctx, objectID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllForObjectGlobal")
	}

	var r0 []*model.FormationAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.FormationAssignment, error)); ok {
		return rf(ctx, objectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.FormationAssignment); ok {
		r0 = rf(ctx, objectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FormationAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, objectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByFormationIDs provides a mock function with given fields: ctx, formationIDs, pageSize, cursor
func (_m *FormationAssignmentService) ListByFormationIDs(ctx context.Context, formationIDs []string, pageSize int, cursor string) ([]*model.FormationAssignmentPage, error) {
	ret := _m.Called(ctx, formationIDs, pageSize, cursor)

	if len(ret) == 0 {
		panic("no return value specified for ListByFormationIDs")
	}

	var r0 []*model.FormationAssignmentPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, int, string) ([]*model.FormationAssignmentPage, error)); ok {
		return rf(ctx, formationIDs, pageSize, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, int, string) []*model.FormationAssignmentPage); ok {
		r0 = rf(ctx, formationIDs, pageSize, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FormationAssignmentPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, int, string) error); ok {
		r1 = rf(ctx, formationIDs, pageSize, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByFormationIDsNoPaging provides a mock function with given fields: ctx, formationIDs
func (_m *FormationAssignmentService) ListByFormationIDsNoPaging(ctx context.Context, formationIDs []string) ([][]*model.FormationAssignment, error) {
	ret := _m.Called(ctx, formationIDs)

	if len(ret) == 0 {
		panic("no return value specified for ListByFormationIDsNoPaging")
	}

	var r0 [][]*model.FormationAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([][]*model.FormationAssignment, error)); ok {
		return rf(ctx, formationIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) [][]*model.FormationAssignment); ok {
		r0 = rf(ctx, formationIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]*model.FormationAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, formationIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFormationAssignmentsForObjectID provides a mock function with given fields: ctx, formationID, objectID
func (_m *FormationAssignmentService) ListFormationAssignmentsForObjectID(ctx context.Context, formationID string, objectID string) ([]*model.FormationAssignment, error) {
	ret := _m.Called(ctx, formationID, objectID)

	if len(ret) == 0 {
		panic("no return value specified for ListFormationAssignmentsForObjectID")
	}

	var r0 []*model.FormationAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*model.FormationAssignment, error)); ok {
		return rf(ctx, formationID, objectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*model.FormationAssignment); ok {
		r0 = rf(ctx, formationID, objectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FormationAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, formationID, objectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersistAssignments provides a mock function with given fields: ctx, tnt, assignments
func (_m *FormationAssignmentService) PersistAssignments(ctx context.Context, tnt string, assignments []*model.FormationAssignmentInput) ([]*model.FormationAssignment, error) {
	ret := _m.Called(ctx, tnt, assignments)

	if len(ret) == 0 {
		panic("no return value specified for PersistAssignments")
	}

	var r0 []*model.FormationAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*model.FormationAssignmentInput) ([]*model.FormationAssignment, error)); ok {
		return rf(ctx, tnt, assignments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []*model.FormationAssignmentInput) []*model.FormationAssignment); ok {
		r0 = rf(ctx, tnt, assignments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FormationAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []*model.FormationAssignmentInput) error); ok {
		r1 = rf(ctx, tnt, assignments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessFormationAssignmentPair provides a mock function with given fields: ctx, mappingPair
func (_m *FormationAssignmentService) ProcessFormationAssignmentPair(ctx context.Context, mappingPair *notifications.AssignmentMappingPairWithOperation) (bool, error) {
	ret := _m.Called(ctx, mappingPair)

	if len(ret) == 0 {
		panic("no return value specified for ProcessFormationAssignmentPair")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notifications.AssignmentMappingPairWithOperation) (bool, error)); ok {
		return rf(ctx, mappingPair)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notifications.AssignmentMappingPairWithOperation) bool); ok {
		r0 = rf(ctx, mappingPair)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notifications.AssignmentMappingPairWithOperation) error); ok {
		r1 = rf(ctx, mappingPair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessFormationAssignments provides a mock function with given fields: ctx, assignmentRequestMappings, formationAssignmentFunc, formationOperation
func (_m *FormationAssignmentService) ProcessFormationAssignments(ctx context.Context, assignmentRequestMappings []*notifications.AssignmentMappingPair, formationAssignmentFunc func(context.Context, *notifications.AssignmentMappingPairWithOperation) (bool, error), formationOperation model.FormationOperation) error {
	ret := _m.Called(ctx, assignmentRequestMappings, formationAssignmentFunc, formationOperation)

	if len(ret) == 0 {
		panic("no return value specified for ProcessFormationAssignments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*notifications.AssignmentMappingPair, func(context.Context, *notifications.AssignmentMappingPairWithOperation) (bool, error), model.FormationOperation) error); ok {
		r0 = rf(ctx, assignmentRequestMappings, formationAssignmentFunc, formationOperation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, fa
func (_m *FormationAssignmentService) Update(ctx context.Context, id string, fa *model.FormationAssignment) error {
	ret := _m.Called(ctx, id, fa)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.FormationAssignment) error); ok {
		r0 = rf(ctx, id, fa)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFormationAssignmentService creates a new instance of FormationAssignmentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormationAssignmentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FormationAssignmentService {
	mock := &FormationAssignmentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
