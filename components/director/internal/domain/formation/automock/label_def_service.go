// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LabelDefService is an autogenerated mock type for the labelDefService type
type LabelDefService struct {
	mock.Mock
}

// CreateWithFormations provides a mock function with given fields: ctx, tnt, formations
func (_m *LabelDefService) CreateWithFormations(ctx context.Context, tnt string, formations []string) error {
	ret := _m.Called(ctx, tnt, formations)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithFormations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, tnt, formations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAvailableScenarios provides a mock function with given fields: ctx, tenantID
func (_m *LabelDefService) GetAvailableScenarios(ctx context.Context, tenantID string) ([]string, error) {
	ret := _m.Called(ctx, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableScenarios")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateAutomaticScenarioAssignmentAgainstSchema provides a mock function with given fields: ctx, schema, tenantID, key
func (_m *LabelDefService) ValidateAutomaticScenarioAssignmentAgainstSchema(ctx context.Context, schema interface{}, tenantID string, key string) error {
	ret := _m.Called(ctx, schema, tenantID, key)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAutomaticScenarioAssignmentAgainstSchema")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, string) error); ok {
		r0 = rf(ctx, schema, tenantID, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateExistingLabelsAgainstSchema provides a mock function with given fields: ctx, schema, tenant, key
func (_m *LabelDefService) ValidateExistingLabelsAgainstSchema(ctx context.Context, schema interface{}, tenant string, key string) error {
	ret := _m.Called(ctx, schema, tenant, key)

	if len(ret) == 0 {
		panic("no return value specified for ValidateExistingLabelsAgainstSchema")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, string) error); ok {
		r0 = rf(ctx, schema, tenant, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLabelDefService creates a new instance of LabelDefService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLabelDefService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LabelDefService {
	mock := &LabelDefService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
