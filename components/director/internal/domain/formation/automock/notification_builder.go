// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	formationconstraint "github.com/kyma-incubator/compass/components/director/pkg/formationconstraint"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	webhookclient "github.com/kyma-incubator/compass/components/director/pkg/webhook_client"
)

// NotificationBuilder is an autogenerated mock type for the notificationBuilder type
type NotificationBuilder struct {
	mock.Mock
}

// BuildFormationNotificationRequests provides a mock function with given fields: ctx, joinPointDetails, _a2, formationTemplateWebhooks
func (_m *NotificationBuilder) BuildFormationNotificationRequests(ctx context.Context, joinPointDetails *formationconstraint.GenerateFormationNotificationOperationDetails, _a2 *model.Formation, formationTemplateWebhooks []*model.Webhook) ([]*webhookclient.FormationNotificationRequest, error) {
	ret := _m.Called(ctx, joinPointDetails, _a2, formationTemplateWebhooks)

	if len(ret) == 0 {
		panic("no return value specified for BuildFormationNotificationRequests")
	}

	var r0 []*webhookclient.FormationNotificationRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *formationconstraint.GenerateFormationNotificationOperationDetails, *model.Formation, []*model.Webhook) ([]*webhookclient.FormationNotificationRequest, error)); ok {
		return rf(ctx, joinPointDetails, _a2, formationTemplateWebhooks)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *formationconstraint.GenerateFormationNotificationOperationDetails, *model.Formation, []*model.Webhook) []*webhookclient.FormationNotificationRequest); ok {
		r0 = rf(ctx, joinPointDetails, _a2, formationTemplateWebhooks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*webhookclient.FormationNotificationRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *formationconstraint.GenerateFormationNotificationOperationDetails, *model.Formation, []*model.Webhook) error); ok {
		r1 = rf(ctx, joinPointDetails, _a2, formationTemplateWebhooks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNotificationBuilder creates a new instance of NotificationBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationBuilder {
	mock := &NotificationBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
