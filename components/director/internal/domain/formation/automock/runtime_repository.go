// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	labelfilter "github.com/kyma-incubator/compass/components/director/internal/labelfilter"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	testing "testing"
)

// RuntimeRepository is an autogenerated mock type for the runtimeRepository type
type RuntimeRepository struct {
	mock.Mock
}

// GetByFiltersAndID provides a mock function with given fields: ctx, tenant, id, filter
func (_m *RuntimeRepository) GetByFiltersAndID(ctx context.Context, tenant string, id string, filter []*labelfilter.LabelFilter) (*model.Runtime, error) {
	ret := _m.Called(ctx, tenant, id, filter)

	var r0 *model.Runtime
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []*labelfilter.LabelFilter) *model.Runtime); ok {
		r0 = rf(ctx, tenant, id, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Runtime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []*labelfilter.LabelFilter) error); ok {
		r1 = rf(ctx, tenant, id, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, tenant, id
func (_m *RuntimeRepository) GetByID(ctx context.Context, tenant string, id string) (*model.Runtime, error) {
	ret := _m.Called(ctx, tenant, id)

	var r0 *model.Runtime
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Runtime); ok {
		r0 = rf(ctx, tenant, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Runtime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenant, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: ctx, tenant, filter
func (_m *RuntimeRepository) ListAll(ctx context.Context, tenant string, filter []*labelfilter.LabelFilter) ([]*model.Runtime, error) {
	ret := _m.Called(ctx, tenant, filter)

	var r0 []*model.Runtime
	if rf, ok := ret.Get(0).(func(context.Context, string, []*labelfilter.LabelFilter) []*model.Runtime); ok {
		r0 = rf(ctx, tenant, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Runtime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []*labelfilter.LabelFilter) error); ok {
		r1 = rf(ctx, tenant, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByIDs provides a mock function with given fields: ctx, tenant, ids
func (_m *RuntimeRepository) ListByIDs(ctx context.Context, tenant string, ids []string) ([]*model.Runtime, error) {
	ret := _m.Called(ctx, tenant, ids)

	var r0 []*model.Runtime
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []*model.Runtime); ok {
		r0 = rf(ctx, tenant, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Runtime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, tenant, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByScenariosAndIDs provides a mock function with given fields: ctx, tenant, scenarios, ids
func (_m *RuntimeRepository) ListByScenariosAndIDs(ctx context.Context, tenant string, scenarios []string, ids []string) ([]*model.Runtime, error) {
	ret := _m.Called(ctx, tenant, scenarios, ids)

	var r0 []*model.Runtime
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, []string) []*model.Runtime); ok {
		r0 = rf(ctx, tenant, scenarios, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Runtime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string, []string) error); ok {
		r1 = rf(ctx, tenant, scenarios, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOwnedRuntimes provides a mock function with given fields: ctx, tenant, filter
func (_m *RuntimeRepository) ListOwnedRuntimes(ctx context.Context, tenant string, filter []*labelfilter.LabelFilter) ([]*model.Runtime, error) {
	ret := _m.Called(ctx, tenant, filter)

	var r0 []*model.Runtime
	if rf, ok := ret.Get(0).(func(context.Context, string, []*labelfilter.LabelFilter) []*model.Runtime); ok {
		r0 = rf(ctx, tenant, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Runtime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []*labelfilter.LabelFilter) error); ok {
		r1 = rf(ctx, tenant, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OwnerExistsByFiltersAndID provides a mock function with given fields: ctx, tenant, id, filter
func (_m *RuntimeRepository) OwnerExistsByFiltersAndID(ctx context.Context, tenant string, id string, filter []*labelfilter.LabelFilter) (bool, error) {
	ret := _m.Called(ctx, tenant, id, filter)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []*labelfilter.LabelFilter) bool); ok {
		r0 = rf(ctx, tenant, id, filter)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []*labelfilter.LabelFilter) error); ok {
		r1 = rf(ctx, tenant, id, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRuntimeRepository creates a new instance of RuntimeRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRuntimeRepository(t testing.TB) *RuntimeRepository {
	mock := &RuntimeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
