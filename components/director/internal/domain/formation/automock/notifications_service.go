// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	webhookclient "github.com/kyma-incubator/compass/components/director/pkg/webhook_client"
)

// NotificationsService is an autogenerated mock type for the NotificationsService type
type NotificationsService struct {
	mock.Mock
}

// GenerateNotifications provides a mock function with given fields: ctx, tenant, objectID, _a3, operation, objectType
func (_m *NotificationsService) GenerateNotifications(ctx context.Context, tenant string, objectID string, _a3 *model.Formation, operation model.FormationOperation, objectType graphql.FormationObjectType) ([]*webhookclient.NotificationRequest, error) {
	ret := _m.Called(ctx, tenant, objectID, _a3, operation, objectType)

	var r0 []*webhookclient.NotificationRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *model.Formation, model.FormationOperation, graphql.FormationObjectType) []*webhookclient.NotificationRequest); ok {
		r0 = rf(ctx, tenant, objectID, _a3, operation, objectType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*webhookclient.NotificationRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *model.Formation, model.FormationOperation, graphql.FormationObjectType) error); ok {
		r1 = rf(ctx, tenant, objectID, _a3, operation, objectType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNotificationsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotificationsService creates a new instance of NotificationsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNotificationsService(t mockConstructorTestingTNewNotificationsService) *NotificationsService {
	mock := &NotificationsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
