// Code generated by mockery. DO NOT EDIT.

package automock

import (
	version "github.com/kyma-incubator/compass/components/director/internal/domain/version"
	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// VersionConverter is an autogenerated mock type for the VersionConverter type
type VersionConverter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: _a0
func (_m *VersionConverter) FromEntity(_a0 version.Version) *model.Version {
	ret := _m.Called(_a0)

	var r0 *model.Version
	if rf, ok := ret.Get(0).(func(version.Version) *model.Version); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Version)
		}
	}

	return r0
}

// ToEntity provides a mock function with given fields: _a0
func (_m *VersionConverter) ToEntity(_a0 model.Version) version.Version {
	ret := _m.Called(_a0)

	var r0 version.Version
	if rf, ok := ret.Get(0).(func(model.Version) version.Version); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(version.Version)
	}

	return r0
}

// NewVersionConverter creates a new instance of VersionConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVersionConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *VersionConverter {
	mock := &VersionConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
