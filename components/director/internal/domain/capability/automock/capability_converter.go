// Code generated by mockery. DO NOT EDIT.

package automock

import (
	capability "github.com/kyma-incubator/compass/components/director/internal/domain/capability"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// CapabilityConverter is an autogenerated mock type for the CapabilityConverter type
type CapabilityConverter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: entity
func (_m *CapabilityConverter) FromEntity(entity *capability.Entity) *model.Capability {
	ret := _m.Called(entity)

	var r0 *model.Capability
	if rf, ok := ret.Get(0).(func(*capability.Entity) *model.Capability); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Capability)
		}
	}

	return r0
}

// ToEntity provides a mock function with given fields: apiModel
func (_m *CapabilityConverter) ToEntity(apiModel *model.Capability) *capability.Entity {
	ret := _m.Called(apiModel)

	var r0 *capability.Entity
	if rf, ok := ret.Get(0).(func(*model.Capability) *capability.Entity); ok {
		r0 = rf(apiModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*capability.Entity)
		}
	}

	return r0
}

// NewCapabilityConverter creates a new instance of CapabilityConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCapabilityConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *CapabilityConverter {
	mock := &CapabilityConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
