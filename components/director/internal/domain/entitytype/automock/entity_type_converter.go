// Code generated by mockery. DO NOT EDIT.

package automock

import (
	entitytype "github.com/kyma-incubator/compass/components/director/internal/domain/entitytype"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// EntityTypeConverter is an autogenerated mock type for the EntityTypeConverter type
type EntityTypeConverter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: entity
func (_m *EntityTypeConverter) FromEntity(entity *entitytype.Entity) (*model.EntityType, error) {
	ret := _m.Called(entity)

	var r0 *model.EntityType
	var r1 error
	if rf, ok := ret.Get(0).(func(*entitytype.Entity) (*model.EntityType, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(*entitytype.Entity) *model.EntityType); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EntityType)
		}
	}

	if rf, ok := ret.Get(1).(func(*entitytype.Entity) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToEntity provides a mock function with given fields: in
func (_m *EntityTypeConverter) ToEntity(in *model.EntityType) *entitytype.Entity {
	ret := _m.Called(in)

	var r0 *entitytype.Entity
	if rf, ok := ret.Get(0).(func(*model.EntityType) *entitytype.Entity); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entitytype.Entity)
		}
	}

	return r0
}

// NewEntityTypeConverter creates a new instance of EntityTypeConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEntityTypeConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *EntityTypeConverter {
	mock := &EntityTypeConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
