// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// ApplicationRepo is an autogenerated mock type for the applicationRepo type
type ApplicationRepo struct {
	mock.Mock
}

// ListAllByIDs provides a mock function with given fields: ctx, tenantID, ids
func (_m *ApplicationRepo) ListAllByIDs(ctx context.Context, tenantID string, ids []string) ([]*model.Application, error) {
	ret := _m.Called(ctx, tenantID, ids)

	var r0 []*model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]*model.Application, error)); ok {
		return rf(ctx, tenantID, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []*model.Application); ok {
		r0 = rf(ctx, tenantID, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, tenantID, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApplicationRepo creates a new instance of ApplicationRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationRepo {
	mock := &ApplicationRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
