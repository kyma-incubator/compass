// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	formationassignment "github.com/kyma-incubator/compass/components/director/internal/domain/formationassignment"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// StatusService is an autogenerated mock type for the statusService type
type StatusService struct {
	mock.Mock
}

// DeleteWithConstraints provides a mock function with given fields: ctx, id
func (_m *StatusService) DeleteWithConstraints(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAssignmentToErrorStateWithConstraints provides a mock function with given fields: ctx, assignment, errorMessage, errorCode, state, operation
func (_m *StatusService) SetAssignmentToErrorStateWithConstraints(ctx context.Context, assignment *model.FormationAssignment, errorMessage string, errorCode formationassignment.AssignmentErrorCode, state model.FormationAssignmentState, operation model.FormationOperation) error {
	ret := _m.Called(ctx, assignment, errorMessage, errorCode, state, operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.FormationAssignment, string, formationassignment.AssignmentErrorCode, model.FormationAssignmentState, model.FormationOperation) error); ok {
		r0 = rf(ctx, assignment, errorMessage, errorCode, state, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWithConstraints provides a mock function with given fields: ctx, fa, operation
func (_m *StatusService) UpdateWithConstraints(ctx context.Context, fa *model.FormationAssignment, operation model.FormationOperation) error {
	ret := _m.Called(ctx, fa, operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.FormationAssignment, model.FormationOperation) error); ok {
		r0 = rf(ctx, fa, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStatusService creates a new instance of StatusService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatusService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatusService {
	mock := &StatusService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
