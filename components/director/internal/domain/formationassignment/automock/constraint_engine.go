// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	formationconstraint "github.com/kyma-incubator/compass/components/director/pkg/formationconstraint"

	mock "github.com/stretchr/testify/mock"
)

// ConstraintEngine is an autogenerated mock type for the constraintEngine type
type ConstraintEngine struct {
	mock.Mock
}

// EnforceConstraints provides a mock function with given fields: ctx, location, details, formationTemplateID
func (_m *ConstraintEngine) EnforceConstraints(ctx context.Context, location formationconstraint.JoinPointLocation, details formationconstraint.JoinPointDetails, formationTemplateID string) error {
	ret := _m.Called(ctx, location, details, formationTemplateID)

	if len(ret) == 0 {
		panic("no return value specified for EnforceConstraints")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, formationconstraint.JoinPointLocation, formationconstraint.JoinPointDetails, string) error); ok {
		r0 = rf(ctx, location, details, formationTemplateID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConstraintEngine creates a new instance of ConstraintEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConstraintEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConstraintEngine {
	mock := &ConstraintEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
