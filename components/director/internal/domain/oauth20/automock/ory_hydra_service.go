// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	client "github.com/ory/hydra-client-go/v2"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// OryHydraService is an autogenerated mock type for the OryHydraService type
type OryHydraService struct {
	mock.Mock
}

// CreateOAuth2Client provides a mock function with given fields: ctx
func (_m *OryHydraService) CreateOAuth2Client(ctx context.Context) client.OAuth2ApiCreateOAuth2ClientRequest {
	ret := _m.Called(ctx)

	var r0 client.OAuth2ApiCreateOAuth2ClientRequest
	if rf, ok := ret.Get(0).(func(context.Context) client.OAuth2ApiCreateOAuth2ClientRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(client.OAuth2ApiCreateOAuth2ClientRequest)
	}

	return r0
}

// CreateOAuth2ClientExecute provides a mock function with given fields: r
func (_m *OryHydraService) CreateOAuth2ClientExecute(r client.OAuth2ApiCreateOAuth2ClientRequest) (*client.OAuth2Client, *http.Response, error) {
	ret := _m.Called(r)

	var r0 *client.OAuth2Client
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.OAuth2ApiCreateOAuth2ClientRequest) (*client.OAuth2Client, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.OAuth2ApiCreateOAuth2ClientRequest) *client.OAuth2Client); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OAuth2Client)
		}
	}

	if rf, ok := ret.Get(1).(func(client.OAuth2ApiCreateOAuth2ClientRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.OAuth2ApiCreateOAuth2ClientRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteOAuth2Client provides a mock function with given fields: ctx, id
func (_m *OryHydraService) DeleteOAuth2Client(ctx context.Context, id string) client.OAuth2ApiDeleteOAuth2ClientRequest {
	ret := _m.Called(ctx, id)

	var r0 client.OAuth2ApiDeleteOAuth2ClientRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) client.OAuth2ApiDeleteOAuth2ClientRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(client.OAuth2ApiDeleteOAuth2ClientRequest)
	}

	return r0
}

// DeleteOAuth2ClientExecute provides a mock function with given fields: r
func (_m *OryHydraService) DeleteOAuth2ClientExecute(r client.OAuth2ApiDeleteOAuth2ClientRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(client.OAuth2ApiDeleteOAuth2ClientRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.OAuth2ApiDeleteOAuth2ClientRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(client.OAuth2ApiDeleteOAuth2ClientRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOAuth2Clients provides a mock function with given fields: ctx
func (_m *OryHydraService) ListOAuth2Clients(ctx context.Context) client.OAuth2ApiListOAuth2ClientsRequest {
	ret := _m.Called(ctx)

	var r0 client.OAuth2ApiListOAuth2ClientsRequest
	if rf, ok := ret.Get(0).(func(context.Context) client.OAuth2ApiListOAuth2ClientsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(client.OAuth2ApiListOAuth2ClientsRequest)
	}

	return r0
}

// ListOAuth2ClientsExecute provides a mock function with given fields: r
func (_m *OryHydraService) ListOAuth2ClientsExecute(r client.OAuth2ApiListOAuth2ClientsRequest) ([]client.OAuth2Client, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []client.OAuth2Client
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.OAuth2ApiListOAuth2ClientsRequest) ([]client.OAuth2Client, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.OAuth2ApiListOAuth2ClientsRequest) []client.OAuth2Client); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.OAuth2Client)
		}
	}

	if rf, ok := ret.Get(1).(func(client.OAuth2ApiListOAuth2ClientsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.OAuth2ApiListOAuth2ClientsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetOAuth2Client provides a mock function with given fields: ctx, id
func (_m *OryHydraService) SetOAuth2Client(ctx context.Context, id string) client.OAuth2ApiSetOAuth2ClientRequest {
	ret := _m.Called(ctx, id)

	var r0 client.OAuth2ApiSetOAuth2ClientRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) client.OAuth2ApiSetOAuth2ClientRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(client.OAuth2ApiSetOAuth2ClientRequest)
	}

	return r0
}

// SetOAuth2ClientExecute provides a mock function with given fields: r
func (_m *OryHydraService) SetOAuth2ClientExecute(r client.OAuth2ApiSetOAuth2ClientRequest) (*client.OAuth2Client, *http.Response, error) {
	ret := _m.Called(r)

	var r0 *client.OAuth2Client
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.OAuth2ApiSetOAuth2ClientRequest) (*client.OAuth2Client, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.OAuth2ApiSetOAuth2ClientRequest) *client.OAuth2Client); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OAuth2Client)
		}
	}

	if rf, ok := ret.Get(1).(func(client.OAuth2ApiSetOAuth2ClientRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.OAuth2ApiSetOAuth2ClientRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewOryHydraService creates a new instance of OryHydraService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOryHydraService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OryHydraService {
	mock := &OryHydraService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
