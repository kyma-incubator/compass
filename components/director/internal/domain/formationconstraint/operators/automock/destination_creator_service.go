// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"
	json "encoding/json"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	operators "github.com/kyma-incubator/compass/components/director/internal/domain/formationconstraint/operators"

	testing "testing"
)

// DestinationCreatorService is an autogenerated mock type for the destinationCreatorService type
type DestinationCreatorService struct {
	mock.Mock
}

// CreateCertificate provides a mock function with given fields: ctx, destinationDetails, formationAssignment, depth
func (_m *DestinationCreatorService) CreateCertificate(ctx context.Context, destinationDetails operators.Destination, formationAssignment *model.FormationAssignment, depth uint8) (*operators.CertificateData, error) {
	ret := _m.Called(ctx, destinationDetails, formationAssignment, depth)

	var r0 *operators.CertificateData
	if rf, ok := ret.Get(0).(func(context.Context, operators.Destination, *model.FormationAssignment, uint8) *operators.CertificateData); ok {
		r0 = rf(ctx, destinationDetails, formationAssignment, depth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operators.CertificateData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, operators.Destination, *model.FormationAssignment, uint8) error); ok {
		r1 = rf(ctx, destinationDetails, formationAssignment, depth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnrichAssignmentConfigWithCertificateData provides a mock function with given fields: assignmentConfig, certData, destinationIndex
func (_m *DestinationCreatorService) EnrichAssignmentConfigWithCertificateData(assignmentConfig json.RawMessage, certData *operators.CertificateData, destinationIndex int) (json.RawMessage, error) {
	ret := _m.Called(assignmentConfig, certData, destinationIndex)

	var r0 json.RawMessage
	if rf, ok := ret.Get(0).(func(json.RawMessage, *operators.CertificateData, int) json.RawMessage); ok {
		r0 = rf(assignmentConfig, certData, destinationIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(json.RawMessage, *operators.CertificateData, int) error); ok {
		r1 = rf(assignmentConfig, certData, destinationIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDestinationCreatorService creates a new instance of DestinationCreatorService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewDestinationCreatorService(t testing.TB) *DestinationCreatorService {
	mock := &DestinationCreatorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
