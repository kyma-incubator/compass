// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// FormationRepository is an autogenerated mock type for the formationRepository type
type FormationRepository struct {
	mock.Mock
}

// ListByFormationNames provides a mock function with given fields: ctx, formationNames, tenantID
func (_m *FormationRepository) ListByFormationNames(ctx context.Context, formationNames []string, tenantID string) ([]*model.Formation, error) {
	ret := _m.Called(ctx, formationNames, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFormationNames")
	}

	var r0 []*model.Formation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) ([]*model.Formation, error)); ok {
		return rf(ctx, formationNames, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) []*model.Formation); ok {
		r0 = rf(ctx, formationNames, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Formation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, string) error); ok {
		r1 = rf(ctx, formationNames, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByIDsGlobal provides a mock function with given fields: ctx, formationIDs
func (_m *FormationRepository) ListByIDsGlobal(ctx context.Context, formationIDs []string) ([]*model.Formation, error) {
	ret := _m.Called(ctx, formationIDs)

	if len(ret) == 0 {
		panic("no return value specified for ListByIDsGlobal")
	}

	var r0 []*model.Formation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*model.Formation, error)); ok {
		return rf(ctx, formationIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*model.Formation); ok {
		r0 = rf(ctx, formationIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Formation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, formationIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjectIDsOfTypeForFormations provides a mock function with given fields: ctx, tenantID, formationNames, objectType
func (_m *FormationRepository) ListObjectIDsOfTypeForFormations(ctx context.Context, tenantID string, formationNames []string, objectType model.FormationAssignmentType) ([]string, error) {
	ret := _m.Called(ctx, tenantID, formationNames, objectType)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectIDsOfTypeForFormations")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, model.FormationAssignmentType) ([]string, error)); ok {
		return rf(ctx, tenantID, formationNames, objectType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, model.FormationAssignmentType) []string); ok {
		r0 = rf(ctx, tenantID, formationNames, objectType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, model.FormationAssignmentType) error); ok {
		r1 = rf(ctx, tenantID, formationNames, objectType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFormationRepository creates a new instance of FormationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FormationRepository {
	mock := &FormationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
