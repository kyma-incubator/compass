// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"

	operators "github.com/kyma-incubator/compass/components/director/internal/domain/formationconstraint/operators"
)

// DestinationService is an autogenerated mock type for the destinationService type
type DestinationService struct {
	mock.Mock
}

// CreateBasicCredentialDestinations provides a mock function with given fields: ctx, destinationsDetails, basicAuthenticationCredentials, formationAssignment, correlationIDs, skipSubaccountValidation
func (_m *DestinationService) CreateBasicCredentialDestinations(ctx context.Context, destinationsDetails []operators.Destination, basicAuthenticationCredentials operators.BasicAuthentication, formationAssignment *model.FormationAssignment, correlationIDs []string, skipSubaccountValidation bool) error {
	ret := _m.Called(ctx, destinationsDetails, basicAuthenticationCredentials, formationAssignment, correlationIDs, skipSubaccountValidation)

	if len(ret) == 0 {
		panic("no return value specified for CreateBasicCredentialDestinations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []operators.Destination, operators.BasicAuthentication, *model.FormationAssignment, []string, bool) error); ok {
		r0 = rf(ctx, destinationsDetails, basicAuthenticationCredentials, formationAssignment, correlationIDs, skipSubaccountValidation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateClientCertificateAuthenticationDestination provides a mock function with given fields: ctx, destinationsDetails, clientCertAuthCredentials, formationAssignment, correlationIDs, skipSubaccountValidation
func (_m *DestinationService) CreateClientCertificateAuthenticationDestination(ctx context.Context, destinationsDetails []operators.Destination, clientCertAuthCredentials *operators.ClientCertAuthentication, formationAssignment *model.FormationAssignment, correlationIDs []string, skipSubaccountValidation bool) error {
	ret := _m.Called(ctx, destinationsDetails, clientCertAuthCredentials, formationAssignment, correlationIDs, skipSubaccountValidation)

	if len(ret) == 0 {
		panic("no return value specified for CreateClientCertificateAuthenticationDestination")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []operators.Destination, *operators.ClientCertAuthentication, *model.FormationAssignment, []string, bool) error); ok {
		r0 = rf(ctx, destinationsDetails, clientCertAuthCredentials, formationAssignment, correlationIDs, skipSubaccountValidation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDesignTimeDestinations provides a mock function with given fields: ctx, destinationsDetails, formationAssignment, skipSubaccountValidation
func (_m *DestinationService) CreateDesignTimeDestinations(ctx context.Context, destinationsDetails []operators.DestinationRaw, formationAssignment *model.FormationAssignment, skipSubaccountValidation bool) error {
	ret := _m.Called(ctx, destinationsDetails, formationAssignment, skipSubaccountValidation)

	if len(ret) == 0 {
		panic("no return value specified for CreateDesignTimeDestinations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []operators.DestinationRaw, *model.FormationAssignment, bool) error); ok {
		r0 = rf(ctx, destinationsDetails, formationAssignment, skipSubaccountValidation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOAuth2ClientCredentialsDestinations provides a mock function with given fields: ctx, destinationsDetails, oauth2ClientCredsCredentials, formationAssignment, correlationIDs, skipSubaccountValidation
func (_m *DestinationService) CreateOAuth2ClientCredentialsDestinations(ctx context.Context, destinationsDetails []operators.Destination, oauth2ClientCredsCredentials *operators.OAuth2ClientCredentialsAuthentication, formationAssignment *model.FormationAssignment, correlationIDs []string, skipSubaccountValidation bool) error {
	ret := _m.Called(ctx, destinationsDetails, oauth2ClientCredsCredentials, formationAssignment, correlationIDs, skipSubaccountValidation)

	if len(ret) == 0 {
		panic("no return value specified for CreateOAuth2ClientCredentialsDestinations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []operators.Destination, *operators.OAuth2ClientCredentialsAuthentication, *model.FormationAssignment, []string, bool) error); ok {
		r0 = rf(ctx, destinationsDetails, oauth2ClientCredsCredentials, formationAssignment, correlationIDs, skipSubaccountValidation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOAuth2mTLSDestinations provides a mock function with given fields: ctx, destinationsDetails, oauth2mTLSCredentials, formationAssignment, correlationIDs, skipSubaccountValidation
func (_m *DestinationService) CreateOAuth2mTLSDestinations(ctx context.Context, destinationsDetails []operators.Destination, oauth2mTLSCredentials *operators.OAuth2mTLSAuthentication, formationAssignment *model.FormationAssignment, correlationIDs []string, skipSubaccountValidation bool) error {
	ret := _m.Called(ctx, destinationsDetails, oauth2mTLSCredentials, formationAssignment, correlationIDs, skipSubaccountValidation)

	if len(ret) == 0 {
		panic("no return value specified for CreateOAuth2mTLSDestinations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []operators.Destination, *operators.OAuth2mTLSAuthentication, *model.FormationAssignment, []string, bool) error); ok {
		r0 = rf(ctx, destinationsDetails, oauth2mTLSCredentials, formationAssignment, correlationIDs, skipSubaccountValidation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSAMLAssertionDestination provides a mock function with given fields: ctx, destinationsDetails, samlAssertionAuthCredentials, formationAssignment, correlationIDs, skipSubaccountValidation
func (_m *DestinationService) CreateSAMLAssertionDestination(ctx context.Context, destinationsDetails []operators.Destination, samlAssertionAuthCredentials *operators.SAMLAssertionAuthentication, formationAssignment *model.FormationAssignment, correlationIDs []string, skipSubaccountValidation bool) error {
	ret := _m.Called(ctx, destinationsDetails, samlAssertionAuthCredentials, formationAssignment, correlationIDs, skipSubaccountValidation)

	if len(ret) == 0 {
		panic("no return value specified for CreateSAMLAssertionDestination")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []operators.Destination, *operators.SAMLAssertionAuthentication, *model.FormationAssignment, []string, bool) error); ok {
		r0 = rf(ctx, destinationsDetails, samlAssertionAuthCredentials, formationAssignment, correlationIDs, skipSubaccountValidation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDestinations provides a mock function with given fields: ctx, formationAssignment, skipSubaccountValidation
func (_m *DestinationService) DeleteDestinations(ctx context.Context, formationAssignment *model.FormationAssignment, skipSubaccountValidation bool) error {
	ret := _m.Called(ctx, formationAssignment, skipSubaccountValidation)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDestinations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.FormationAssignment, bool) error); ok {
		r0 = rf(ctx, formationAssignment, skipSubaccountValidation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDestinationService creates a new instance of DestinationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDestinationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DestinationService {
	mock := &DestinationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
