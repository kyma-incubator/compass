// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"

	operators "github.com/kyma-incubator/compass/components/director/internal/domain/formationconstraint/operators"
)

// DestinationService is an autogenerated mock type for the destinationService type
type DestinationService struct {
	mock.Mock
}

// CreateBasicCredentialDestinations provides a mock function with given fields: ctx, destinationDetails, basicAuthenticationCredentials, formationAssignment, correlationIDs
func (_m *DestinationService) CreateBasicCredentialDestinations(ctx context.Context, destinationDetails operators.Destination, basicAuthenticationCredentials operators.BasicAuthentication, formationAssignment *model.FormationAssignment, correlationIDs []string) error {
	ret := _m.Called(ctx, destinationDetails, basicAuthenticationCredentials, formationAssignment, correlationIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, operators.Destination, operators.BasicAuthentication, *model.FormationAssignment, []string) error); ok {
		r0 = rf(ctx, destinationDetails, basicAuthenticationCredentials, formationAssignment, correlationIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDesignTimeDestinations provides a mock function with given fields: ctx, destinationDetails, formationAssignment
func (_m *DestinationService) CreateDesignTimeDestinations(ctx context.Context, destinationDetails operators.Destination, formationAssignment *model.FormationAssignment) error {
	ret := _m.Called(ctx, destinationDetails, formationAssignment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, operators.Destination, *model.FormationAssignment) error); ok {
		r0 = rf(ctx, destinationDetails, formationAssignment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSAMLAssertionDestination provides a mock function with given fields: ctx, destinationDetails, samlAssertionAuthCredentials, formationAssignment, correlationIDs
func (_m *DestinationService) CreateSAMLAssertionDestination(ctx context.Context, destinationDetails operators.Destination, samlAssertionAuthCredentials *operators.SAMLAssertionAuthentication, formationAssignment *model.FormationAssignment, correlationIDs []string) error {
	ret := _m.Called(ctx, destinationDetails, samlAssertionAuthCredentials, formationAssignment, correlationIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, operators.Destination, *operators.SAMLAssertionAuthentication, *model.FormationAssignment, []string) error); ok {
		r0 = rf(ctx, destinationDetails, samlAssertionAuthCredentials, formationAssignment, correlationIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDestinations provides a mock function with given fields: ctx, formationAssignment
func (_m *DestinationService) DeleteDestinations(ctx context.Context, formationAssignment *model.FormationAssignment) error {
	ret := _m.Called(ctx, formationAssignment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.FormationAssignment) error); ok {
		r0 = rf(ctx, formationAssignment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDestinationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewDestinationService creates a new instance of DestinationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDestinationService(t mockConstructorTestingTNewDestinationService) *DestinationService {
	mock := &DestinationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
