// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"

	notifications "github.com/kyma-incubator/compass/components/director/internal/domain/notifications"
)

// FormationAssignmentService is an autogenerated mock type for the formationAssignmentService type
type FormationAssignmentService struct {
	mock.Mock
}

// CleanupFormationAssignment provides a mock function with given fields: ctx, mappingPair
func (_m *FormationAssignmentService) CleanupFormationAssignment(ctx context.Context, mappingPair *notifications.AssignmentMappingPairWithOperation) (bool, error) {
	ret := _m.Called(ctx, mappingPair)

	if len(ret) == 0 {
		panic("no return value specified for CleanupFormationAssignment")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notifications.AssignmentMappingPairWithOperation) (bool, error)); ok {
		return rf(ctx, mappingPair)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notifications.AssignmentMappingPairWithOperation) bool); ok {
		r0 = rf(ctx, mappingPair)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notifications.AssignmentMappingPairWithOperation) error); ok {
		r1 = rf(ctx, mappingPair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllForObjectGlobal provides a mock function with given fields: ctx, objectID
func (_m *FormationAssignmentService) ListAllForObjectGlobal(ctx context.Context, objectID string) ([]*model.FormationAssignment, error) {
	ret := _m.Called(ctx, objectID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllForObjectGlobal")
	}

	var r0 []*model.FormationAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.FormationAssignment, error)); ok {
		return rf(ctx, objectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.FormationAssignment); ok {
		r0 = rf(ctx, objectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FormationAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, objectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFormationAssignmentService creates a new instance of FormationAssignmentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormationAssignmentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FormationAssignmentService {
	mock := &FormationAssignmentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
