// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	resource "github.com/kyma-incubator/compass/components/director/pkg/resource"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// SelfRegisterManager is an autogenerated mock type for the SelfRegisterManager type
type SelfRegisterManager struct {
	mock.Mock
}

// CleanupSelfRegistration provides a mock function with given fields: ctx, selfRegisterLabelValue, region
func (_m *SelfRegisterManager) CleanupSelfRegistration(ctx context.Context, selfRegisterLabelValue string, region string) error {
	ret := _m.Called(ctx, selfRegisterLabelValue, region)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, selfRegisterLabelValue, region)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSelfRegDistinguishingLabelKey provides a mock function with given fields:
func (_m *SelfRegisterManager) GetSelfRegDistinguishingLabelKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsSelfRegistrationFlow provides a mock function with given fields: ctx, labels
func (_m *SelfRegisterManager) IsSelfRegistrationFlow(ctx context.Context, labels map[string]interface{}) (bool, error) {
	ret := _m.Called(ctx, labels)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) bool); ok {
		r0 = rf(ctx, labels)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareForSelfRegistration provides a mock function with given fields: ctx, resourceType, labels, id, validate
func (_m *SelfRegisterManager) PrepareForSelfRegistration(ctx context.Context, resourceType resource.Type, labels map[string]interface{}, id string, validate func() error) (map[string]interface{}, error) {
	ret := _m.Called(ctx, resourceType, labels, id, validate)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, resource.Type, map[string]interface{}, string, func() error) map[string]interface{}); ok {
		r0 = rf(ctx, resourceType, labels, id, validate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, resource.Type, map[string]interface{}, string, func() error) error); ok {
		r1 = rf(ctx, resourceType, labels, id, validate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSelfRegisterManager creates a new instance of SelfRegisterManager. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSelfRegisterManager(t testing.TB) *SelfRegisterManager {
	mock := &SelfRegisterManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
