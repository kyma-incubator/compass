// Code generated by mockery. DO NOT EDIT.

package automock

import (
	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
	mock "github.com/stretchr/testify/mock"
)

// AppConverter is an autogenerated mock type for the AppConverter type
type AppConverter struct {
	mock.Mock
}

// CreateJSONInputGQLToJSON provides a mock function with given fields: in
func (_m *AppConverter) CreateJSONInputGQLToJSON(in *graphql.ApplicationJSONInput) (string, error) {
	ret := _m.Called(in)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*graphql.ApplicationJSONInput) (string, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*graphql.ApplicationJSONInput) string); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*graphql.ApplicationJSONInput) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAppConverter creates a new instance of AppConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppConverter {
	mock := &AppConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
