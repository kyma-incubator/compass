// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// CertSubjectMappingService is an autogenerated mock type for the CertSubjectMappingService type
type CertSubjectMappingService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, item
func (_m *CertSubjectMappingService) Create(ctx context.Context, item *model.CertSubjectMapping) (string, error) {
	ret := _m.Called(ctx, item)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CertSubjectMapping) (string, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CertSubjectMapping) string); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CertSubjectMapping) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByConsumerID provides a mock function with given fields: ctx, consumerID
func (_m *CertSubjectMappingService) DeleteByConsumerID(ctx context.Context, consumerID string) error {
	ret := _m.Called(ctx, consumerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, consumerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsBySubject provides a mock function with given fields: ctx, subj
func (_m *CertSubjectMappingService) ExistsBySubject(ctx context.Context, subj string) (bool, error) {
	ret := _m.Called(ctx, subj)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, subj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, subj)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCertSubjectMappingService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCertSubjectMappingService creates a new instance of CertSubjectMappingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCertSubjectMappingService(t mockConstructorTestingTNewCertSubjectMappingService) *CertSubjectMappingService {
	mock := &CertSubjectMappingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
