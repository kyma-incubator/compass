// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import api "github.com/kyma-incubator/compass/components/director/internal/domain/api"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/director/internal/model"

// APIDefinitionConverter is an autogenerated mock type for the APIDefinitionConverter type
type APIDefinitionConverter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: entity
func (_m *APIDefinitionConverter) FromEntity(entity api.Entity) (model.APIDefinition, error) {
	ret := _m.Called(entity)

	var r0 model.APIDefinition
	if rf, ok := ret.Get(0).(func(api.Entity) model.APIDefinition); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(model.APIDefinition)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.Entity) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToEntity provides a mock function with given fields: apiModel
func (_m *APIDefinitionConverter) ToEntity(apiModel model.APIDefinition) (api.Entity, error) {
	ret := _m.Called(apiModel)

	var r0 api.Entity
	if rf, ok := ret.Get(0).(func(model.APIDefinition) api.Entity); ok {
		r0 = rf(apiModel)
	} else {
		r0 = ret.Get(0).(api.Entity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.APIDefinition) error); ok {
		r1 = rf(apiModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
