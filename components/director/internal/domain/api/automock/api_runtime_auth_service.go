// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/director/internal/model"

// APIRuntimeAuthService is an autogenerated mock type for the APIRuntimeAuthService type
type APIRuntimeAuthService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, apiID, runtimeID
func (_m *APIRuntimeAuthService) Delete(ctx context.Context, apiID string, runtimeID string) error {
	ret := _m.Called(ctx, apiID, runtimeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, apiID, runtimeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, apiID, runtimeID
func (_m *APIRuntimeAuthService) Get(ctx context.Context, apiID string, runtimeID string) (*model.APIRuntimeAuth, error) {
	ret := _m.Called(ctx, apiID, runtimeID)

	var r0 *model.APIRuntimeAuth
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.APIRuntimeAuth); ok {
		r0 = rf(ctx, apiID, runtimeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.APIRuntimeAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, apiID, runtimeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrDefault provides a mock function with given fields: ctx, apiID, runtimeID
func (_m *APIRuntimeAuthService) GetOrDefault(ctx context.Context, apiID string, runtimeID string) (*model.APIRuntimeAuth, error) {
	ret := _m.Called(ctx, apiID, runtimeID)

	var r0 *model.APIRuntimeAuth
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.APIRuntimeAuth); ok {
		r0 = rf(ctx, apiID, runtimeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.APIRuntimeAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, apiID, runtimeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListForAllRuntimes provides a mock function with given fields: ctx, apiID
func (_m *APIRuntimeAuthService) ListForAllRuntimes(ctx context.Context, apiID string) ([]model.APIRuntimeAuth, error) {
	ret := _m.Called(ctx, apiID)

	var r0 []model.APIRuntimeAuth
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.APIRuntimeAuth); ok {
		r0 = rf(ctx, apiID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.APIRuntimeAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, apiID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, apiID, runtimeID, in
func (_m *APIRuntimeAuthService) Set(ctx context.Context, apiID string, runtimeID string, in model.AuthInput) error {
	ret := _m.Called(ctx, apiID, runtimeID, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, model.AuthInput) error); ok {
		r0 = rf(ctx, apiID, runtimeID, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
