// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TenantParentRepository is an autogenerated mock type for the TenantParentRepository type
type TenantParentRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tenantID, parentID
func (_m *TenantParentRepository) Create(ctx context.Context, tenantID string, parentID string) error {
	ret := _m.Called(ctx, tenantID, parentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tenantID, parentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMultiple provides a mock function with given fields: ctx, tenantID, parentIDs
func (_m *TenantParentRepository) CreateMultiple(ctx context.Context, tenantID string, parentIDs []string) error {
	ret := _m.Called(ctx, tenantID, parentIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, tenantID, parentIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, tenantID, parentID
func (_m *TenantParentRepository) Delete(ctx context.Context, tenantID string, parentID string) error {
	ret := _m.Called(ctx, tenantID, parentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tenantID, parentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListByParent provides a mock function with given fields: ctx, parentID
func (_m *TenantParentRepository) ListByParent(ctx context.Context, parentID string) ([]string, error) {
	ret := _m.Called(ctx, parentID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, parentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListParents provides a mock function with given fields: ctx, tenantID
func (_m *TenantParentRepository) ListParents(ctx context.Context, tenantID string) ([]string, error) {
	ret := _m.Called(ctx, tenantID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTenantParentRepository creates a new instance of TenantParentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTenantParentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TenantParentRepository {
	mock := &TenantParentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
