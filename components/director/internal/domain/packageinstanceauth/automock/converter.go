// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/director/internal/model"

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

// RequestInputFromGraphQL provides a mock function with given fields: in
func (_m *Converter) RequestInputFromGraphQL(in graphql.PackageInstanceAuthRequestInput) model.PackageInstanceAuthRequestInput {
	ret := _m.Called(in)

	var r0 model.PackageInstanceAuthRequestInput
	if rf, ok := ret.Get(0).(func(graphql.PackageInstanceAuthRequestInput) model.PackageInstanceAuthRequestInput); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(model.PackageInstanceAuthRequestInput)
	}

	return r0
}

// SetInputFromGraphQL provides a mock function with given fields: in
func (_m *Converter) SetInputFromGraphQL(in graphql.PackageInstanceAuthSetInput) (model.PackageInstanceAuthSetInput, error) {
	ret := _m.Called(in)

	var r0 model.PackageInstanceAuthSetInput
	if rf, ok := ret.Get(0).(func(graphql.PackageInstanceAuthSetInput) model.PackageInstanceAuthSetInput); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(model.PackageInstanceAuthSetInput)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(graphql.PackageInstanceAuthSetInput) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToGraphQL provides a mock function with given fields: in
func (_m *Converter) ToGraphQL(in *model.PackageInstanceAuth) (*graphql.PackageInstanceAuth, error) {
	ret := _m.Called(in)

	var r0 *graphql.PackageInstanceAuth
	if rf, ok := ret.Get(0).(func(*model.PackageInstanceAuth) *graphql.PackageInstanceAuth); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphql.PackageInstanceAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.PackageInstanceAuth) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
