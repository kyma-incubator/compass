// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/director/internal/model"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *Repository) Create(ctx context.Context, _a1 model.AutomaticScenarioAssignment) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AutomaticScenarioAssignment) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteForScenarioName provides a mock function with given fields: ctx, tenantID, scenarioName
func (_m *Repository) DeleteForScenarioName(ctx context.Context, tenantID string, scenarioName string) error {
	ret := _m.Called(ctx, tenantID, scenarioName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tenantID, scenarioName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteForSelector provides a mock function with given fields: ctx, tenantID, selector
func (_m *Repository) DeleteForSelector(ctx context.Context, tenantID string, selector model.LabelSelector) error {
	ret := _m.Called(ctx, tenantID, selector)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.LabelSelector) error); ok {
		r0 = rf(ctx, tenantID, selector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetForScenarioName provides a mock function with given fields: ctx, tenantID, scenarioName
func (_m *Repository) GetForScenarioName(ctx context.Context, tenantID string, scenarioName string) (model.AutomaticScenarioAssignment, error) {
	ret := _m.Called(ctx, tenantID, scenarioName)

	var r0 model.AutomaticScenarioAssignment
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.AutomaticScenarioAssignment); ok {
		r0 = rf(ctx, tenantID, scenarioName)
	} else {
		r0 = ret.Get(0).(model.AutomaticScenarioAssignment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenantID, scenarioName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, tenant, pageSize, cursor
func (_m *Repository) List(ctx context.Context, tenant string, pageSize int, cursor string) (*model.AutomaticScenarioAssignmentPage, error) {
	ret := _m.Called(ctx, tenant, pageSize, cursor)

	var r0 *model.AutomaticScenarioAssignmentPage
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) *model.AutomaticScenarioAssignmentPage); ok {
		r0 = rf(ctx, tenant, pageSize, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AutomaticScenarioAssignmentPage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, string) error); ok {
		r1 = rf(ctx, tenant, pageSize, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListForSelector provides a mock function with given fields: ctx, in, tenantID
func (_m *Repository) ListForSelector(ctx context.Context, in model.LabelSelector, tenantID string) ([]*model.AutomaticScenarioAssignment, error) {
	ret := _m.Called(ctx, in, tenantID)

	var r0 []*model.AutomaticScenarioAssignment
	if rf, ok := ret.Get(0).(func(context.Context, model.LabelSelector, string) []*model.AutomaticScenarioAssignment); ok {
		r0 = rf(ctx, in, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AutomaticScenarioAssignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.LabelSelector, string) error); ok {
		r1 = rf(ctx, in, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
