// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/director/internal/model"

// EventAPIConverter is an autogenerated mock type for the EventAPIConverter type
type EventAPIConverter struct {
	mock.Mock
}

// InputFromGraphQL provides a mock function with given fields: in
func (_m *EventAPIConverter) InputFromGraphQL(in *graphql.EventDefinitionInput) *model.EventDefinitionInput {
	ret := _m.Called(in)

	var r0 *model.EventDefinitionInput
	if rf, ok := ret.Get(0).(func(*graphql.EventDefinitionInput) *model.EventDefinitionInput); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EventDefinitionInput)
		}
	}

	return r0
}

// MultipleInputFromGraphQL provides a mock function with given fields: in
func (_m *EventAPIConverter) MultipleInputFromGraphQL(in []*graphql.EventDefinitionInput) []*model.EventDefinitionInput {
	ret := _m.Called(in)

	var r0 []*model.EventDefinitionInput
	if rf, ok := ret.Get(0).(func([]*graphql.EventDefinitionInput) []*model.EventDefinitionInput); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.EventDefinitionInput)
		}
	}

	return r0
}

// MultipleToGraphQL provides a mock function with given fields: in
func (_m *EventAPIConverter) MultipleToGraphQL(in []*model.EventDefinition) []*graphql.EventDefinition {
	ret := _m.Called(in)

	var r0 []*graphql.EventDefinition
	if rf, ok := ret.Get(0).(func([]*model.EventDefinition) []*graphql.EventDefinition); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graphql.EventDefinition)
		}
	}

	return r0
}

// ToGraphQL provides a mock function with given fields: in
func (_m *EventAPIConverter) ToGraphQL(in *model.EventDefinition) *graphql.EventDefinition {
	ret := _m.Called(in)

	var r0 *graphql.EventDefinition
	if rf, ok := ret.Get(0).(func(*model.EventDefinition) *graphql.EventDefinition); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphql.EventDefinition)
		}
	}

	return r0
}
