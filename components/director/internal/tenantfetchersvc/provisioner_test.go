package tenantfetchersvc_test

import (
	"context"
	"fmt"
	"testing"

	"github.com/kyma-incubator/compass/components/director/internal/model"
	"github.com/kyma-incubator/compass/components/director/internal/tenantfetchersvc"
	"github.com/kyma-incubator/compass/components/director/internal/tenantfetchersvc/automock"
	tenantEntity "github.com/kyma-incubator/compass/components/director/pkg/tenant"
	"github.com/stretchr/testify/assert"
)

const (
	autogeneratedProviderName = "autogenerated"
	testProviderName          = "test-provider"
)

var (
	customerTenant = model.BusinessTenantMappingInput{
		Name:           parentTenantExtID,
		ExternalTenant: parentTenantExtID,
		Parent:         "",
		Type:           tenantEntity.TypeToStr(tenantEntity.Customer),
		Provider:       autogeneratedProviderName,
	}
	accountTenant = model.BusinessTenantMappingInput{
		Name:           tenantExtID,
		ExternalTenant: tenantExtID,
		Parent:         parentTenantExtID,
		Type:           tenantEntity.TypeToStr(tenantEntity.Account),
		Provider:       testProviderName,
		Subdomain:      tenantSubdomain,
		Region:         tenantRegion,
	}
	parentAccountTenant = model.BusinessTenantMappingInput{
		Name:           tenantExtID,
		ExternalTenant: tenantExtID,
		Parent:         parentTenantExtID,
		Type:           tenantEntity.TypeToStr(tenantEntity.Account),
		Provider:       testProviderName,
		Subdomain:      "",
		Region:         "",
	}
	subaccountTenant = model.BusinessTenantMappingInput{
		Name:           subaccountTenantExtID,
		ExternalTenant: subaccountTenantExtID,
		Parent:         tenantExtID,
		Type:           tenantEntity.TypeToStr(tenantEntity.Subaccount),
		Provider:       testProviderName,
		Subdomain:      tenantSubdomain,
		Region:         tenantRegion,
	}
	accountTenantWithoutParent = model.BusinessTenantMappingInput{
		Name:           tenantExtID,
		ExternalTenant: tenantExtID,
		Type:           tenantEntity.TypeToStr(tenantEntity.Account),
		Provider:       testProviderName,
		Subdomain:      tenantSubdomain,
		Region:         tenantRegion,
	}

	requestWithAccountTenant = &tenantfetchersvc.TenantSubscriptionRequest{
		AccountTenantID:  tenantExtID,
		CustomerTenantID: parentTenantExtID,
		Subdomain:        tenantSubdomain,
		Region:           tenantRegion,
	}

	requestWithAccountTenantWithoutParent = &tenantfetchersvc.TenantSubscriptionRequest{
		AccountTenantID: tenantExtID,
		Subdomain:       tenantSubdomain,
		Region:          tenantRegion,
	}

	requestWithSubaccountTenant = &tenantfetchersvc.TenantSubscriptionRequest{
		SubaccountTenantID: subaccountTenantExtID,
		AccountTenantID:    tenantExtID,
		CustomerTenantID:   parentTenantExtID,
		Subdomain:          tenantSubdomain,
		Region:             tenantRegion,
	}
)

func TestProvisioner_CreateTenant(t *testing.T) {
	//GIVEN
	ctx := context.TODO()

	testCases := []struct {
		Name                string
		TenantSvcFn         func() *automock.TenantService
		Request             *tenantfetchersvc.TenantSubscriptionRequest
		ExpectedErrorOutput string
	}{
		{
			Name: "Succeeds to create account tenant",
			TenantSvcFn: func() *automock.TenantService {
				expectedTenants := []model.BusinessTenantMappingInput{customerTenant, accountTenant}
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("CreateManyIfNotExists", ctx, expectedTenants).Return(nil).Once()
				return tenantSvc
			},
			Request: requestWithAccountTenant,
		},
		{
			Name: "Succeeds to create account tenant with no parent provided",
			TenantSvcFn: func() *automock.TenantService {
				expectedTenants := []model.BusinessTenantMappingInput{accountTenantWithoutParent}
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("CreateManyIfNotExists", ctx, expectedTenants).Return(nil).Once()
				return tenantSvc
			},
			Request: requestWithAccountTenantWithoutParent,
		},
		{
			Name: "Returns error when tenant creation fails",
			TenantSvcFn: func() *automock.TenantService {
				expectedTenants := []model.BusinessTenantMappingInput{customerTenant, accountTenant}
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("CreateManyIfNotExists", ctx, expectedTenants).Return(testError).Once()
				return tenantSvc
			},
			Request:             requestWithAccountTenant,
			ExpectedErrorOutput: testError.Error(),
		},
		{
			Name: "Returns error when tenant is of type subaccount",
			TenantSvcFn: func() *automock.TenantService {
				return &automock.TenantService{}
			},
			Request:             requestWithSubaccountTenant,
			ExpectedErrorOutput: fmt.Sprintf("tenant with ID %s is of type subaccount and supports only regional provisioning", subaccountTenantExtID),
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.Name, func(t *testing.T) {
			tenantSvc := testCase.TenantSvcFn()
			defer tenantSvc.AssertExpectations(t)

			provisioner := tenantfetchersvc.NewTenantProvisioner(tenantSvc, testProviderName)

			//WHEN
			err := provisioner.ProvisionTenants(ctx, testCase.Request, "")

			// THEN
			if len(testCase.ExpectedErrorOutput) > 0 {
				assert.Error(t, err)
				assert.Contains(t, err.Error(), testCase.ExpectedErrorOutput)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

func TestProvisioner_CreateRegionalTenant(t *testing.T) {
	//GIVEN
	ctx := context.TODO()

	testCases := []struct {
		Name                string
		TenantSvcFn         func() *automock.TenantService
		Request             *tenantfetchersvc.TenantSubscriptionRequest
		ExpectedErrorOutput string
	}{
		{
			Name: "Succeeds when parent account tenant already exists",
			TenantSvcFn: func() *automock.TenantService {
				expectedTenants := []model.BusinessTenantMappingInput{customerTenant, parentAccountTenant, subaccountTenant}
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("CreateManyIfNotExists", ctx, expectedTenants).Return(nil).Once()
				return tenantSvc
			},
			Request: requestWithSubaccountTenant,
		},
		{
			Name: "Returns error when tenant creation fails",
			TenantSvcFn: func() *automock.TenantService {
				expectedTenants := []model.BusinessTenantMappingInput{customerTenant, parentAccountTenant, subaccountTenant}
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("CreateManyIfNotExists", ctx, expectedTenants).Return(testError).Once()
				return tenantSvc
			},
			Request:             requestWithSubaccountTenant,
			ExpectedErrorOutput: testError.Error(),
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.Name, func(t *testing.T) {
			tenantSvc := testCase.TenantSvcFn()
			defer tenantSvc.AssertExpectations(t)

			provisioner := tenantfetchersvc.NewTenantProvisioner(tenantSvc, testProviderName)

			//WHEN
			err := provisioner.ProvisionTenants(ctx, testCase.Request, "asd")

			// THEN
			if len(testCase.ExpectedErrorOutput) > 0 {
				assert.Error(t, err)
				assert.Contains(t, err.Error(), testCase.ExpectedErrorOutput)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}
