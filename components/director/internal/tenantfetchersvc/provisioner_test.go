package tenantfetchersvc_test

import (
	"context"
	"fmt"
	"testing"

	"github.com/kyma-incubator/compass/components/director/internal/model"
	"github.com/kyma-incubator/compass/components/director/internal/tenantfetchersvc"
	"github.com/kyma-incubator/compass/components/director/internal/tenantfetchersvc/automock"
	"github.com/kyma-incubator/compass/components/director/pkg/apperrors"
	"github.com/kyma-incubator/compass/components/director/pkg/resource"
	tenantEntity "github.com/kyma-incubator/compass/components/director/pkg/tenant"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func TestProvisioner_CreateTenant(t *testing.T) {
	//GIVEN
	ctx := context.TODO()

	customerTenant := model.BusinessTenantMappingInput{
		Name:           parentTenantExtID,
		ExternalTenant: parentTenantExtID,
		Parent:         "",
		Type:           tenantEntity.TypeToStr(tenantEntity.Customer),
		Provider:       autogeneratedProviderName,
	}
	providedAccountTenant := model.BusinessTenantMappingInput{
		Name:           tenantExtID,
		ExternalTenant: tenantExtID,
		Parent:         parentTenantExtID,
		Type:           tenantEntity.TypeToStr(tenantEntity.Account),
		Provider:       testProviderName,
		Subdomain:      tenantSubdomain,
	}
	providedSubaccountTenant := model.BusinessTenantMappingInput{
		Name:           regionalTenantExtID,
		ExternalTenant: regionalTenantExtID,
		Parent:         tenantExtID,
		Type:           tenantEntity.TypeToStr(tenantEntity.Subaccount),
		Provider:       testProviderName,
		Subdomain:      tenantSubdomain,
	}
	accountTenant := model.BusinessTenantMappingInput{
		Name:           tenantExtID,
		ExternalTenant: tenantExtID,
		Parent:         parentTenantIntID,
		Type:           tenantEntity.TypeToStr(tenantEntity.Account),
		Provider:       testProviderName,
		Subdomain:      tenantSubdomain,
	}
	accountTenantWithoutParent := model.BusinessTenantMappingInput{
		Name:           tenantExtID,
		ExternalTenant: tenantExtID,
		Type:           tenantEntity.TypeToStr(tenantEntity.Account),
		Provider:       testProviderName,
		Subdomain:      tenantSubdomain,
	}

	testCases := []struct {
		Name                string
		TenantSvcFn         func() *automock.TenantService
		Tenant              model.BusinessTenantMappingInput
		ExpectedErrorOutput string
	}{
		{
			Name: "Succeeds when parent tenant already exists",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", ctx, customerTenant.ExternalTenant).Return(parentTenantIntID, nil).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{accountTenant}).Return(nil).Once()
				return tenantSvc
			},
			Tenant: providedAccountTenant,
		},
		{
			Name: "Succeeds when parent tenant does not exist",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", ctx, customerTenant.ExternalTenant).Return("", apperrors.NewNotFoundError(resource.Tenant, customerTenant.ExternalTenant)).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{customerTenant}).Return(nil).Once()
				tenantSvc.On("GetInternalTenant", ctx, customerTenant.ExternalTenant).Return(parentTenantIntID, nil).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{accountTenant}).Return(nil).Once()
				return tenantSvc
			},
			Tenant: providedAccountTenant,
		},
		{
			Name: "Succeeds when tenant does not have a parent",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{accountTenantWithoutParent}).Return(nil).Once()
				return tenantSvc
			},
			Tenant: accountTenantWithoutParent,
		},
		{
			Name: "Succeeds when parent tenant already exists when it tries to create it",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", ctx, customerTenant.ExternalTenant).Return("", apperrors.NewNotFoundError(resource.Tenant, customerTenant.ExternalTenant)).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{customerTenant}).Return(apperrors.NewNotUniqueError(resource.Tenant)).Once()
				tenantSvc.On("GetInternalTenant", ctx, customerTenant.ExternalTenant).Return(parentTenantIntID, nil).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{accountTenant}).Return(nil).Once()
				return tenantSvc
			},
			Tenant: providedAccountTenant,
		},
		{
			Name: "Returns error when creating parent tenant fails",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", ctx, customerTenant.ExternalTenant).Return("", apperrors.NewNotFoundError(resource.Tenant, customerTenant.ExternalTenant)).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{customerTenant}).Return(testError).Once()
				return tenantSvc
			},
			Tenant:              providedAccountTenant,
			ExpectedErrorOutput: fmt.Sprintf("failed to create parent tenant with ID %s", parentTenantExtID),
		},
		{
			Name: "Returns error when getting parent tenant from database fails",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", ctx, customerTenant.ExternalTenant).Return("", testError).Once()
				return tenantSvc
			},
			Tenant:              providedAccountTenant,
			ExpectedErrorOutput: fmt.Sprintf("failed to retrieve internal ID of parent with external ID %s", parentTenantExtID),
		},
		{
			Name: "Returns error when tenant creation fails",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", ctx, customerTenant.ExternalTenant).Return("", apperrors.NewNotFoundError(resource.Tenant, customerTenant.ExternalTenant)).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{customerTenant}).Return(apperrors.NewNotUniqueError(resource.Tenant)).Once()
				tenantSvc.On("GetInternalTenant", ctx, customerTenant.ExternalTenant).Return(parentTenantIntID, nil).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{accountTenant}).Return(testError).Once()
				return tenantSvc
			},
			Tenant:              providedAccountTenant,
			ExpectedErrorOutput: fmt.Sprintf(tenantCreationFailureMsgFmt, tenantExtID),
		},
		{
			Name: "Returns error when internal tenant ID of parent cannot be retrieved",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", mock.Anything, customerTenant.ExternalTenant).Return("", apperrors.NewNotFoundError(resource.Tenant, customerTenant.ExternalTenant)).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{customerTenant}).Return(nil).Once()
				tenantSvc.On("GetInternalTenant", mock.Anything, customerTenant.ExternalTenant).Return("", testError).Once()
				return tenantSvc
			},
			Tenant:              providedAccountTenant,
			ExpectedErrorOutput: fmt.Sprintf("failed to retrieve internal ID of parent with external ID %s", parentTenantExtID),
		},
		{
			Name: "Returns error when tenant is of type subaccount",
			TenantSvcFn: func() *automock.TenantService {
				return &automock.TenantService{}
			},
			Tenant:              providedSubaccountTenant,
			ExpectedErrorOutput: fmt.Sprintf("tenant with ID %s is of type subaccount and supports only regional provisioning", regionalTenantExtID),
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.Name, func(t *testing.T) {
			tenantSvc := testCase.TenantSvcFn()
			defer tenantSvc.AssertExpectations(t)

			provisioner := tenantfetchersvc.NewTenantProvisioner(tenantSvc)

			//WHEN
			err := provisioner.ProvisionTenant(ctx, testCase.Tenant)

			// THEN
			if len(testCase.ExpectedErrorOutput) > 0 {
				assert.Error(t, err)
				assert.Contains(t, err.Error(), testCase.ExpectedErrorOutput)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

func TestProvisioner_CreateRegionalTenant(t *testing.T) {
	//GIVEN
	region := "eu-1"
	ctx := context.TODO()
	regionLabel := &model.LabelInput{
		Key:        "region",
		Value:      region,
		ObjectID:   regionalTenantIntID,
		ObjectType: model.TenantLabelableObject,
	}
	providedRegionalTenant := model.BusinessTenantMappingInput{
		Name:           regionalTenantExtID,
		ExternalTenant: regionalTenantExtID,
		Parent:         tenantExtID,
		Type:           tenantEntity.TypeToStr(tenantEntity.Subaccount),
		Provider:       testProviderName,
		Subdomain:      tenantSubdomain,
	}
	regionalTenant := model.BusinessTenantMappingInput{
		Name:           regionalTenantExtID,
		ExternalTenant: regionalTenantExtID,
		Parent:         tenantID,
		Type:           tenantEntity.TypeToStr(tenantEntity.Subaccount),
		Provider:       testProviderName,
		Subdomain:      tenantSubdomain,
	}

	testCases := []struct {
		Name                string
		TenantSvcFn         func() *automock.TenantService
		Tenant              model.BusinessTenantMappingInput
		ExpectedErrorOutput string
	}{
		{
			Name: "Succeeds when parent tenant exists",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", ctx, tenantExtID).Return(tenantID, nil).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{regionalTenant}).Return(nil).Once()
				tenantSvc.On("GetInternalTenant", ctx, regionalTenantExtID).Return(regionalTenantIntID, nil).Once()
				tenantSvc.On("SetLabel", ctx, regionLabel).Return(nil).Once()
				return tenantSvc
			},
			Tenant: providedRegionalTenant,
		},
		{
			Name: "Returns error when parent tenant does not exist",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", ctx, tenantExtID).Return("", apperrors.NewNotFoundError(resource.Tenant, parentTenantExtID)).Once()
				return tenantSvc
			},
			Tenant:              providedRegionalTenant,
			ExpectedErrorOutput: fmt.Sprintf("parent tenant with external ID %s does not exist", tenantExtID),
		},
		{
			Name: "Returns error when getting parent tenant from database fails",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", ctx, tenantExtID).Return("", testError).Once()
				return tenantSvc
			},
			Tenant:              providedRegionalTenant,
			ExpectedErrorOutput: fmt.Sprintf("failed to retrieve internal ID of parent with external ID %s", tenantExtID),
		},
		{
			Name: "Returns error when tenant creation fails",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", ctx, tenantExtID).Return(tenantID, nil).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{regionalTenant}).Return(testError).Once()
				return tenantSvc
			},
			Tenant:              providedRegionalTenant,
			ExpectedErrorOutput: fmt.Sprintf(tenantCreationFailureMsgFmt, regionalTenantExtID),
		},
		{
			Name: "Returns error when internal tenant ID cannot be retrieved",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", ctx, tenantExtID).Return(tenantID, nil).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{regionalTenant}).Return(nil).Once()
				tenantSvc.On("GetInternalTenant", ctx, regionalTenantExtID).Return("", testError).Once()
				return tenantSvc
			},
			Tenant:              providedRegionalTenant,
			ExpectedErrorOutput: testError.Error(),
		},
		{
			Name: "Returns error when region label cannot be set",
			TenantSvcFn: func() *automock.TenantService {
				tenantSvc := &automock.TenantService{}
				tenantSvc.On("GetInternalTenant", ctx, tenantExtID).Return(tenantID, nil).Once()
				tenantSvc.On("CreateManyIfNotExists", ctx, []model.BusinessTenantMappingInput{regionalTenant}).Return(nil).Once()
				tenantSvc.On("GetInternalTenant", ctx, regionalTenantExtID).Return(regionalTenantIntID, nil).Once()
				tenantSvc.On("SetLabel", ctx, regionLabel).Return(testError).Once()
				return tenantSvc
			},
			Tenant:              providedRegionalTenant,
			ExpectedErrorOutput: testError.Error(),
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.Name, func(t *testing.T) {
			tenantSvc := testCase.TenantSvcFn()
			defer tenantSvc.AssertExpectations(t)

			provisioner := tenantfetchersvc.NewTenantProvisioner(tenantSvc)

			//WHEN
			err := provisioner.ProvisionRegionalTenant(ctx, testCase.Tenant, region)

			// THEN
			if len(testCase.ExpectedErrorOutput) > 0 {
				assert.Error(t, err)
				assert.Contains(t, err.Error(), testCase.ExpectedErrorOutput)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}
