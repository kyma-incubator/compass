// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	formationassignment "github.com/kyma-incubator/compass/components/director/internal/domain/formationassignment"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"

	testing "testing"
)

// FormationAssignmentService is an autogenerated mock type for the FormationAssignmentService type
type FormationAssignmentService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *FormationAssignmentService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGlobalByIDAndFormationID provides a mock function with given fields: ctx, formationAssignmentID, formationID
func (_m *FormationAssignmentService) GetGlobalByIDAndFormationID(ctx context.Context, formationAssignmentID string, formationID string) (*model.FormationAssignment, error) {
	ret := _m.Called(ctx, formationAssignmentID, formationID)

	var r0 *model.FormationAssignment
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.FormationAssignment); ok {
		r0 = rf(ctx, formationAssignmentID, formationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FormationAssignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, formationAssignmentID, formationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReverseBySourceAndTarget provides a mock function with given fields: ctx, formationID, sourceID, targetID
func (_m *FormationAssignmentService) GetReverseBySourceAndTarget(ctx context.Context, formationID string, sourceID string, targetID string) (*model.FormationAssignment, error) {
	ret := _m.Called(ctx, formationID, sourceID, targetID)

	var r0 *model.FormationAssignment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *model.FormationAssignment); ok {
		r0 = rf(ctx, formationID, sourceID, targetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FormationAssignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, formationID, sourceID, targetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFormationAssignmentsForObjectID provides a mock function with given fields: ctx, formationID, objectID
func (_m *FormationAssignmentService) ListFormationAssignmentsForObjectID(ctx context.Context, formationID string, objectID string) ([]*model.FormationAssignment, error) {
	ret := _m.Called(ctx, formationID, objectID)

	var r0 []*model.FormationAssignment
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*model.FormationAssignment); ok {
		r0 = rf(ctx, formationID, objectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FormationAssignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, formationID, objectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessFormationAssignmentPair provides a mock function with given fields: ctx, mappingPair
func (_m *FormationAssignmentService) ProcessFormationAssignmentPair(ctx context.Context, mappingPair *formationassignment.AssignmentMappingPair) (bool, error) {
	ret := _m.Called(ctx, mappingPair)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *formationassignment.AssignmentMappingPair) bool); ok {
		r0 = rf(ctx, mappingPair)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *formationassignment.AssignmentMappingPair) error); ok {
		r1 = rf(ctx, mappingPair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAssignmentToErrorState provides a mock function with given fields: ctx, assignment, errorMessage, errorCode, state
func (_m *FormationAssignmentService) SetAssignmentToErrorState(ctx context.Context, assignment *model.FormationAssignment, errorMessage string, errorCode formationassignment.AssignmentErrorCode, state model.FormationAssignmentState) error {
	ret := _m.Called(ctx, assignment, errorMessage, errorCode, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.FormationAssignment, string, formationassignment.AssignmentErrorCode, model.FormationAssignmentState) error); ok {
		r0 = rf(ctx, assignment, errorMessage, errorCode, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, in
func (_m *FormationAssignmentService) Update(ctx context.Context, id string, in *model.FormationAssignmentInput) error {
	ret := _m.Called(ctx, id, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.FormationAssignmentInput) error); ok {
		r0 = rf(ctx, id, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFormationAssignmentService creates a new instance of FormationAssignmentService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFormationAssignmentService(t testing.TB) *FormationAssignmentService {
	mock := &FormationAssignmentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
