// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"
	"github.com/kyma-incubator/compass/components/director/internal/domain/notifications"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// FormationAssignmentNotificationService is an autogenerated mock type for the FormationAssignmentNotificationService type
type FormationAssignmentNotificationService struct {
	mock.Mock
}

// GenerateFormationAssignmentPair provides a mock function with given fields: ctx, fa, reverseFA, operation
func (_m *FormationAssignmentNotificationService) GenerateFormationAssignmentPair(ctx context.Context, fa *model.FormationAssignment, reverseFA *model.FormationAssignment, operation model.FormationOperation) (*notifications.AssignmentMappingPairWithOperation, error) {
	ret := _m.Called(ctx, fa, reverseFA, operation)

	var r0 *notifications.AssignmentMappingPairWithOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.FormationAssignment, *model.FormationAssignment, model.FormationOperation) (*notifications.AssignmentMappingPairWithOperation, error)); ok {
		return rf(ctx, fa, reverseFA, operation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.FormationAssignment, *model.FormationAssignment, model.FormationOperation) *notifications.AssignmentMappingPairWithOperation); ok {
		r0 = rf(ctx, fa, reverseFA, operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notifications.AssignmentMappingPairWithOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.FormationAssignment, *model.FormationAssignment, model.FormationOperation) error); ok {
		r1 = rf(ctx, fa, reverseFA, operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFormationAssignmentNotificationService creates a new instance of FormationAssignmentNotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormationAssignmentNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FormationAssignmentNotificationService {
	mock := &FormationAssignmentNotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
