// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	formationassignment "github.com/kyma-incubator/compass/components/director/internal/domain/formationassignment"

	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// FormationService is an autogenerated mock type for the formationService type
type FormationService struct {
	mock.Mock
}

// DeleteFormation provides a mock function with given fields: ctx, tnt, formation
func (_m *FormationService) DeleteFormation(ctx context.Context, tnt string, formation model.Formation) (*model.Formation, error) {
	ret := _m.Called(ctx, tnt, formation)

	var r0 *model.Formation
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Formation) *model.Formation); ok {
		r0 = rf(ctx, tnt, formation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Formation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, model.Formation) error); ok {
		r1 = rf(ctx, tnt, formation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *FormationService) Get(ctx context.Context, id string) (*model.Formation, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Formation
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Formation); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Formation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlobalByID provides a mock function with given fields: ctx, id
func (_m *FormationService) GetGlobalByID(ctx context.Context, id string) (*model.Formation, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Formation
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Formation); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Formation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResynchronizeFormationNotifications provides a mock function with given fields: ctx, formationID
func (_m *FormationService) ResynchronizeFormationNotifications(ctx context.Context, formationID string) error {
	ret := _m.Called(ctx, formationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, formationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFormationToErrorState provides a mock function with given fields: ctx, formation, errorMessage, errorCode, state
func (_m *FormationService) SetFormationToErrorState(ctx context.Context, formation *model.Formation, errorMessage string, errorCode formationassignment.AssignmentErrorCode, state model.FormationState) error {
	ret := _m.Called(ctx, formation, errorMessage, errorCode, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Formation, string, formationassignment.AssignmentErrorCode, model.FormationState) error); ok {
		r0 = rf(ctx, formation, errorMessage, errorCode, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnassignFormation provides a mock function with given fields: ctx, tnt, objectID, objectType, formation
func (_m *FormationService) UnassignFormation(ctx context.Context, tnt string, objectID string, objectType graphql.FormationObjectType, formation model.Formation) (*model.Formation, error) {
	ret := _m.Called(ctx, tnt, objectID, objectType, formation)

	var r0 *model.Formation
	if rf, ok := ret.Get(0).(func(context.Context, string, string, graphql.FormationObjectType, model.Formation) *model.Formation); ok {
		r0 = rf(ctx, tnt, objectID, objectType, formation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Formation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, graphql.FormationObjectType, model.Formation) error); ok {
		r1 = rf(ctx, tnt, objectID, objectType, formation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *FormationService) Update(ctx context.Context, _a1 *model.Formation) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Formation) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFormationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewFormationService creates a new instance of FormationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFormationService(t mockConstructorTestingTNewFormationService) *FormationService {
	mock := &FormationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
