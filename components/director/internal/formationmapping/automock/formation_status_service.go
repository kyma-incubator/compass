// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	formationassignment "github.com/kyma-incubator/compass/components/director/internal/domain/formationassignment"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// FormationStatusService is an autogenerated mock type for the formationStatusService type
type FormationStatusService struct {
	mock.Mock
}

// DeleteFormationEntityAndScenariosWithConstraints provides a mock function with given fields: ctx, tnt, formation
func (_m *FormationStatusService) DeleteFormationEntityAndScenariosWithConstraints(ctx context.Context, tnt string, formation *model.Formation) error {
	ret := _m.Called(ctx, tnt, formation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Formation) error); ok {
		r0 = rf(ctx, tnt, formation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFormationToErrorStateWithConstraints provides a mock function with given fields: ctx, formation, errorMessage, errorCode, state, operation
func (_m *FormationStatusService) SetFormationToErrorStateWithConstraints(ctx context.Context, formation *model.Formation, errorMessage string, errorCode formationassignment.AssignmentErrorCode, state model.FormationState, operation model.FormationOperation) error {
	ret := _m.Called(ctx, formation, errorMessage, errorCode, state, operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Formation, string, formationassignment.AssignmentErrorCode, model.FormationState, model.FormationOperation) error); ok {
		r0 = rf(ctx, formation, errorMessage, errorCode, state, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWithConstraints provides a mock function with given fields: ctx, formation, operation
func (_m *FormationStatusService) UpdateWithConstraints(ctx context.Context, formation *model.Formation, operation model.FormationOperation) error {
	ret := _m.Called(ctx, formation, operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Formation, model.FormationOperation) error); ok {
		r0 = rf(ctx, formation, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFormationStatusService creates a new instance of FormationStatusService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormationStatusService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FormationStatusService {
	mock := &FormationStatusService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
