// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// OperationService is an autogenerated mock type for the OperationService type
type OperationService struct {
	mock.Mock
}

// CreateMultiple provides a mock function with given fields: ctx, in
func (_m *OperationService) CreateMultiple(ctx context.Context, in []*model.OperationInput) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.OperationInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, operationID
func (_m *OperationService) Get(ctx context.Context, operationID string) (*model.Operation, error) {
	ret := _m.Called(ctx, operationID)

	var r0 *model.Operation
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Operation); ok {
		r0 = rf(ctx, operationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, operationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPriorityQueue provides a mock function with given fields: ctx, queueLimit, opType
func (_m *OperationService) ListPriorityQueue(ctx context.Context, queueLimit int, opType model.OperationType) ([]*model.Operation, error) {
	ret := _m.Called(ctx, queueLimit, opType)

	var r0 []*model.Operation
	if rf, ok := ret.Get(0).(func(context.Context, int, model.OperationType) []*model.Operation); ok {
		r0 = rf(ctx, queueLimit, opType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, model.OperationType) error); ok {
		r1 = rf(ctx, queueLimit, opType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockOperation provides a mock function with given fields: ctx, operationID
func (_m *OperationService) LockOperation(ctx context.Context, operationID string) (bool, error) {
	ret := _m.Called(ctx, operationID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, operationID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, operationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkAsCompleted provides a mock function with given fields: ctx, id
func (_m *OperationService) MarkAsCompleted(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkAsFailed provides a mock function with given fields: ctx, id, errorMsg
func (_m *OperationService) MarkAsFailed(ctx context.Context, id string, errorMsg string) error {
	ret := _m.Called(ctx, id, errorMsg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, errorMsg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RescheduleHangedOperations provides a mock function with given fields: ctx, hangPeriod
func (_m *OperationService) RescheduleHangedOperations(ctx context.Context, hangPeriod time.Duration) error {
	ret := _m.Called(ctx, hangPeriod)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(ctx, hangPeriod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResheduleOperations provides a mock function with given fields: ctx, reschedulePeriod
func (_m *OperationService) ResheduleOperations(ctx context.Context, reschedulePeriod time.Duration) error {
	ret := _m.Called(ctx, reschedulePeriod)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(ctx, reschedulePeriod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, input
func (_m *OperationService) Update(ctx context.Context, input *model.Operation) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Operation) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOperationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewOperationService creates a new instance of OperationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOperationService(t mockConstructorTestingTNewOperationService) *OperationService {
	mock := &OperationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
