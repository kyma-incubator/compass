// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// OperationService is an autogenerated mock type for the OperationService type
type OperationService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in
func (_m *OperationService) Create(ctx context.Context, in *model.OperationInput) (string, error) {
	ret := _m.Called(ctx, in)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OperationInput) (string, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OperationInput) string); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OperationInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMultiple provides a mock function with given fields: ctx, in
func (_m *OperationService) CreateMultiple(ctx context.Context, in []*model.OperationInput) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.OperationInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMultiple provides a mock function with given fields: ctx, ids
func (_m *OperationService) DeleteMultiple(ctx context.Context, ids []string) error {
	ret := _m.Called(ctx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, operationID
func (_m *OperationService) Get(ctx context.Context, operationID string) (*model.Operation, error) {
	ret := _m.Called(ctx, operationID)

	var r0 *model.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Operation, error)); ok {
		return rf(ctx, operationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Operation); ok {
		r0 = rf(ctx, operationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, operationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByDataAndType provides a mock function with given fields: ctx, data, opType
func (_m *OperationService) GetByDataAndType(ctx context.Context, data interface{}, opType model.OperationType) (*model.Operation, error) {
	ret := _m.Called(ctx, data, opType)

	var r0 *model.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, model.OperationType) (*model.Operation, error)); ok {
		return rf(ctx, data, opType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, model.OperationType) *model.Operation); ok {
		r0 = rf(ctx, data, opType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, model.OperationType) error); ok {
		r1 = rf(ctx, data, opType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllByType provides a mock function with given fields: ctx, opType
func (_m *OperationService) ListAllByType(ctx context.Context, opType model.OperationType) ([]*model.Operation, error) {
	ret := _m.Called(ctx, opType)

	var r0 []*model.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OperationType) ([]*model.Operation, error)); ok {
		return rf(ctx, opType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OperationType) []*model.Operation); ok {
		r0 = rf(ctx, opType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OperationType) error); ok {
		r1 = rf(ctx, opType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPriorityQueue provides a mock function with given fields: ctx, queueLimit, opType
func (_m *OperationService) ListPriorityQueue(ctx context.Context, queueLimit int, opType model.OperationType) ([]*model.Operation, error) {
	ret := _m.Called(ctx, queueLimit, opType)

	var r0 []*model.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.OperationType) ([]*model.Operation, error)); ok {
		return rf(ctx, queueLimit, opType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, model.OperationType) []*model.Operation); ok {
		r0 = rf(ctx, queueLimit, opType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, model.OperationType) error); ok {
		r1 = rf(ctx, queueLimit, opType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockOperation provides a mock function with given fields: ctx, operationID
func (_m *OperationService) LockOperation(ctx context.Context, operationID string) (bool, error) {
	ret := _m.Called(ctx, operationID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, operationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, operationID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, operationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkAsCompleted provides a mock function with given fields: ctx, id, customErr
func (_m *OperationService) MarkAsCompleted(ctx context.Context, id string, customErr error) error {
	ret := _m.Called(ctx, id, customErr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, error) error); ok {
		r0 = rf(ctx, id, customErr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkAsFailed provides a mock function with given fields: ctx, id, customErr
func (_m *OperationService) MarkAsFailed(ctx context.Context, id string, customErr error) error {
	ret := _m.Called(ctx, id, customErr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, error) error); ok {
		r0 = rf(ctx, id, customErr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RescheduleHangedOperations provides a mock function with given fields: ctx, operationType, hangPeriod
func (_m *OperationService) RescheduleHangedOperations(ctx context.Context, operationType model.OperationType, hangPeriod time.Duration) error {
	ret := _m.Called(ctx, operationType, hangPeriod)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OperationType, time.Duration) error); ok {
		r0 = rf(ctx, operationType, hangPeriod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RescheduleOperation provides a mock function with given fields: ctx, operationID, priority
func (_m *OperationService) RescheduleOperation(ctx context.Context, operationID string, priority int) error {
	ret := _m.Called(ctx, operationID, priority)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, operationID, priority)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RescheduleOperations provides a mock function with given fields: ctx, operationType, reschedulePeriod
func (_m *OperationService) RescheduleOperations(ctx context.Context, operationType model.OperationType, reschedulePeriod time.Duration) error {
	ret := _m.Called(ctx, operationType, reschedulePeriod)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OperationType, time.Duration) error); ok {
		r0 = rf(ctx, operationType, reschedulePeriod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, input
func (_m *OperationService) Update(ctx context.Context, input *model.Operation) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Operation) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOperationService creates a new instance of OperationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OperationService {
	mock := &OperationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
