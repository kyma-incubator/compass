// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// OperationService is an autogenerated mock type for the OperationService type
type OperationService struct {
	mock.Mock
}

// CreateMultiple provides a mock function with given fields: ctx, in
func (_m *OperationService) CreateMultiple(ctx context.Context, in []*model.OperationInput) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.OperationInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOlderThan provides a mock function with given fields: ctx, opType, status, days
func (_m *OperationService) DeleteOlderThan(ctx context.Context, opType string, status model.OperationStatus, days int) error {
	ret := _m.Called(ctx, opType, status, days)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.OperationStatus, int) error); ok {
		r0 = rf(ctx, opType, status, days)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOperationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewOperationService creates a new instance of OperationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOperationService(t mockConstructorTestingTNewOperationService) *OperationService {
	mock := &OperationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
