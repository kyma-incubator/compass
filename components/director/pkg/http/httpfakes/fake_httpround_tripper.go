// Code generated by counterfeiter. DO NOT EDIT.
package httpfakes

import (
	httpa "net/http"
	"sync"

	"github.com/kyma-incubator/compass/components/director/pkg/http"
)

type FakeHTTPRoundTripper struct {
	CloneStub        func() http.HTTPRoundTripper
	cloneMutex       sync.RWMutex
	cloneArgsForCall []struct {
	}
	cloneReturns struct {
		result1 http.HTTPRoundTripper
	}
	cloneReturnsOnCall map[int]struct {
		result1 http.HTTPRoundTripper
	}
	GetTransportStub        func() *httpa.Transport
	getTransportMutex       sync.RWMutex
	getTransportArgsForCall []struct {
	}
	getTransportReturns struct {
		result1 *httpa.Transport
	}
	getTransportReturnsOnCall map[int]struct {
		result1 *httpa.Transport
	}
	RoundTripStub        func(*httpa.Request) (*httpa.Response, error)
	roundTripMutex       sync.RWMutex
	roundTripArgsForCall []struct {
		arg1 *httpa.Request
	}
	roundTripReturns struct {
		result1 *httpa.Response
		result2 error
	}
	roundTripReturnsOnCall map[int]struct {
		result1 *httpa.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHTTPRoundTripper) Clone() http.HTTPRoundTripper {
	fake.cloneMutex.Lock()
	ret, specificReturn := fake.cloneReturnsOnCall[len(fake.cloneArgsForCall)]
	fake.cloneArgsForCall = append(fake.cloneArgsForCall, struct {
	}{})
	stub := fake.CloneStub
	fakeReturns := fake.cloneReturns
	fake.recordInvocation("Clone", []interface{}{})
	fake.cloneMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHTTPRoundTripper) CloneCallCount() int {
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	return len(fake.cloneArgsForCall)
}

func (fake *FakeHTTPRoundTripper) CloneCalls(stub func() http.HTTPRoundTripper) {
	fake.cloneMutex.Lock()
	defer fake.cloneMutex.Unlock()
	fake.CloneStub = stub
}

func (fake *FakeHTTPRoundTripper) CloneReturns(result1 http.HTTPRoundTripper) {
	fake.cloneMutex.Lock()
	defer fake.cloneMutex.Unlock()
	fake.CloneStub = nil
	fake.cloneReturns = struct {
		result1 http.HTTPRoundTripper
	}{result1}
}

func (fake *FakeHTTPRoundTripper) CloneReturnsOnCall(i int, result1 http.HTTPRoundTripper) {
	fake.cloneMutex.Lock()
	defer fake.cloneMutex.Unlock()
	fake.CloneStub = nil
	if fake.cloneReturnsOnCall == nil {
		fake.cloneReturnsOnCall = make(map[int]struct {
			result1 http.HTTPRoundTripper
		})
	}
	fake.cloneReturnsOnCall[i] = struct {
		result1 http.HTTPRoundTripper
	}{result1}
}

func (fake *FakeHTTPRoundTripper) GetTransport() *httpa.Transport {
	fake.getTransportMutex.Lock()
	ret, specificReturn := fake.getTransportReturnsOnCall[len(fake.getTransportArgsForCall)]
	fake.getTransportArgsForCall = append(fake.getTransportArgsForCall, struct {
	}{})
	stub := fake.GetTransportStub
	fakeReturns := fake.getTransportReturns
	fake.recordInvocation("GetTransport", []interface{}{})
	fake.getTransportMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHTTPRoundTripper) GetTransportCallCount() int {
	fake.getTransportMutex.RLock()
	defer fake.getTransportMutex.RUnlock()
	return len(fake.getTransportArgsForCall)
}

func (fake *FakeHTTPRoundTripper) GetTransportCalls(stub func() *httpa.Transport) {
	fake.getTransportMutex.Lock()
	defer fake.getTransportMutex.Unlock()
	fake.GetTransportStub = stub
}

func (fake *FakeHTTPRoundTripper) GetTransportReturns(result1 *httpa.Transport) {
	fake.getTransportMutex.Lock()
	defer fake.getTransportMutex.Unlock()
	fake.GetTransportStub = nil
	fake.getTransportReturns = struct {
		result1 *httpa.Transport
	}{result1}
}

func (fake *FakeHTTPRoundTripper) GetTransportReturnsOnCall(i int, result1 *httpa.Transport) {
	fake.getTransportMutex.Lock()
	defer fake.getTransportMutex.Unlock()
	fake.GetTransportStub = nil
	if fake.getTransportReturnsOnCall == nil {
		fake.getTransportReturnsOnCall = make(map[int]struct {
			result1 *httpa.Transport
		})
	}
	fake.getTransportReturnsOnCall[i] = struct {
		result1 *httpa.Transport
	}{result1}
}

func (fake *FakeHTTPRoundTripper) RoundTrip(arg1 *httpa.Request) (*httpa.Response, error) {
	fake.roundTripMutex.Lock()
	ret, specificReturn := fake.roundTripReturnsOnCall[len(fake.roundTripArgsForCall)]
	fake.roundTripArgsForCall = append(fake.roundTripArgsForCall, struct {
		arg1 *httpa.Request
	}{arg1})
	stub := fake.RoundTripStub
	fakeReturns := fake.roundTripReturns
	fake.recordInvocation("RoundTrip", []interface{}{arg1})
	fake.roundTripMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHTTPRoundTripper) RoundTripCallCount() int {
	fake.roundTripMutex.RLock()
	defer fake.roundTripMutex.RUnlock()
	return len(fake.roundTripArgsForCall)
}

func (fake *FakeHTTPRoundTripper) RoundTripCalls(stub func(*httpa.Request) (*httpa.Response, error)) {
	fake.roundTripMutex.Lock()
	defer fake.roundTripMutex.Unlock()
	fake.RoundTripStub = stub
}

func (fake *FakeHTTPRoundTripper) RoundTripArgsForCall(i int) *httpa.Request {
	fake.roundTripMutex.RLock()
	defer fake.roundTripMutex.RUnlock()
	argsForCall := fake.roundTripArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHTTPRoundTripper) RoundTripReturns(result1 *httpa.Response, result2 error) {
	fake.roundTripMutex.Lock()
	defer fake.roundTripMutex.Unlock()
	fake.RoundTripStub = nil
	fake.roundTripReturns = struct {
		result1 *httpa.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeHTTPRoundTripper) RoundTripReturnsOnCall(i int, result1 *httpa.Response, result2 error) {
	fake.roundTripMutex.Lock()
	defer fake.roundTripMutex.Unlock()
	fake.RoundTripStub = nil
	if fake.roundTripReturnsOnCall == nil {
		fake.roundTripReturnsOnCall = make(map[int]struct {
			result1 *httpa.Response
			result2 error
		})
	}
	fake.roundTripReturnsOnCall[i] = struct {
		result1 *httpa.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeHTTPRoundTripper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	fake.getTransportMutex.RLock()
	defer fake.getTransportMutex.RUnlock()
	fake.roundTripMutex.RLock()
	defer fake.roundTripMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHTTPRoundTripper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ http.HTTPRoundTripper = new(FakeHTTPRoundTripper)
