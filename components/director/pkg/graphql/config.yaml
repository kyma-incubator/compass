schema: schema.graphql

# Let gqlgen know where to put the generated server
exec:
  filename: schema_gen.go
  package: graphql

# Let gqlgen know where to the generated models (if any)
model:
  filename: models_gen.go
  package: graphql

# Optional turns on binding to field names by tag provided
struct_tag: json

# Tell gqlgen about any existing models you want to reuse for
# graphql. These normally come from the db or a remote api.
models:
  Labels:
    model: "github.com/kyma-incubator/compass/components/director/pkg/graphql.Labels"
  Timestamp:
    model: "github.com/kyma-incubator/compass/components/director/pkg/graphql.Timestamp"
  HttpHeaders:
    model: "github.com/kyma-incubator/compass/components/director/pkg/graphql.HttpHeaders"
  QueryParams:
    model: "github.com/kyma-incubator/compass/components/director/pkg/graphql.QueryParams"
  CLOB:
    model: "github.com/kyma-incubator/compass/components/director/pkg/graphql.CLOB"
  JSON:
    model: "github.com/kyma-incubator/compass/components/director/pkg/graphql.JSON"
  PageCursor:
    model: "github.com/kyma-incubator/compass/components/director/pkg/graphql.PageCursor"
  Application:
    model: "github.com/kyma-incubator/compass/components/director/pkg/graphql.Application"
    fields:
      documents:
        resolver: true
      eventAPIs:
        resolver: true
      apis:
        resolver: true
      webhooks:
        resolver: true
      labels:
        resolver: true
  Runtime:
    model: "github.com/kyma-incubator/compass/components/director/pkg/graphql.Runtime"
    fields:
      labels:
        resolver: true
