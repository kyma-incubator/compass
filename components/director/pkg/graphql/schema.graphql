"""
Async directive is added to mutations which are capable of being executed in asynchronious matter
"""
directive @async(operationType: OperationType!, webhookType: WebhookType, idField: String) on FIELD_DEFINITION
"""
HasScenario directive is added to queries and mutations to ensure that runtimes can only access resources which are in the same scenario as them
"""
directive @hasScenario(applicationProvider: String!, idField: String!) on FIELD_DEFINITION
"""
HasScopes directive is added automatically to every query and mutation by scopesdecorator plugin that is triggerred by gqlgen.sh script.
"""
directive @hasScopes(path: String!) on FIELD_DEFINITION
"""
Sanitize directive marks mutation arguments that will be validated.
"""
directive @sanitize(path: String!) on FIELD_DEFINITION
"""
Validate directive marks mutation arguments that will be validated.
"""
directive @validate on ARGUMENT_DEFINITION
scalar Any

scalar CLOB

scalar HttpHeaders

scalar HttpHeadersSerialized

"""
Stringified JSON
"""
scalar JSON

"""
Stringified JSON
"""
scalar JSONSchema

scalar Labels

scalar PageCursor

scalar QueryParams

scalar QueryParamsSerialized

scalar Timestamp

enum APISpecType {
	ODATA
	OPEN_API
}

enum ApplicationStatusCondition {
	INITIAL
	CONNECTED
	FAILED
	CREATING
	CREATE_FAILED
	CREATE_SUCCEEDED
	UPDATING
	UPDATE_FAILED
	UPDATE_SUCCEEDED
	DELETING
	DELETE_FAILED
	DELETE_SUCCEEDED
}

enum ApplicationTemplateAccessLevel {
	GLOBAL
}

enum BundleInstanceAuthSetStatusConditionInput {
	SUCCEEDED
	FAILED
}

enum BundleInstanceAuthStatusCondition {
	"""
	When creating, before Application sets the credentials
	"""
	PENDING
	SUCCEEDED
	FAILED
	"""
	When Runtime requests deletion and Application has to revoke the credentials
	"""
	UNUSED
}

enum DocumentFormat {
	MARKDOWN
}

enum EventSpecType {
	ASYNC_API
}

enum FetchMode {
	SINGLE
	BUNDLE
	INDEX
}

enum FetchRequestStatusCondition {
	INITIAL
	SUCCEEDED
	FAILED
}

enum HealthCheckStatusCondition {
	SUCCEEDED
	FAILED
}

enum HealthCheckType {
	MANAGEMENT_PLANE_APPLICATION_HEALTHCHECK
}

enum OperationMode {
	SYNC
	ASYNC
}

enum OperationType {
	CREATE
	UPDATE
	DELETE
}

enum RuntimeStatusCondition {
	INITIAL
	PROVISIONING
	CONNECTED
	FAILED
}

enum SpecFormat {
	YAML
	JSON
	XML
}

enum ViewerType {
	RUNTIME
	APPLICATION
	INTEGRATION_SYSTEM
	USER
}

enum WebhookMode {
	SYNC
	ASYNC
}

enum WebhookType {
	CONFIGURATION_CHANGED
	REGISTER_APPLICATION
	UNREGISTER_APPLICATION
	OPEN_RESOURCE_DISCOVERY
}

interface OneTimeToken {
	token: String!
	connectorURL: String!
	raw: String
	rawEncoded: String
}

"""
Every query that implements pagination returns object that implements Pageable interface.
To specify page details, query specify two parameters: `first` and `after`.
`first` specify page size, `after` is a cursor for the next page. When requesting first page, set `after` to empty value.
For requesting next page, set `after` to `pageInfo.endCursor` returned from previous query.
"""
interface Pageable {
	pageInfo: PageInfo!
	totalCount: Int!
}

interface SystemAuth {
	id: ID!
	auth: Auth
}

union CredentialData = BasicCredentialData | OAuthCredentialData

input APIDefinitionInput {
	"""
	**Validation:** ASCII printable characters, max=100
	"""
	name: String!
	"""
	**Validation:** max=2000
	"""
	description: String
	"""
	**Validation:** valid URL, max=256
	"""
	targetURL: String!
	"""
	**Validation:** max=36
	"""
	group: String
	spec: APISpecInput
	version: VersionInput
}

"""
**Validation:**
- for ODATA type, accepted formats are XML and JSON, for OPEN_API accepted formats are YAML and JSON
- data or fetchRequest required
"""
input APISpecInput {
	data: CLOB
	type: APISpecType!
	format: SpecFormat!
	fetchRequest: FetchRequestInput
}

"""
**Validation:** provided placeholders' names are unique
"""
input ApplicationFromTemplateInput {
	"""
	**Validation:** ASCII printable characters, max=100
	"""
	templateName: String!
	values: [TemplateValueInput!]
}

input ApplicationRegisterInput {
	"""
	**Validation:**  Up to 36 characters long. Cannot start with a digit. The characters allowed in names are: digits (0-9), lower case letters (a-z),-, and .
	"""
	name: String!
	"""
	**Validation:** max=256
	"""
	providerName: String
	"""
	**Validation:** max=2000
	"""
	description: String
	"""
	**Validation:** label key is alphanumeric with underscore
	"""
	labels: Labels
	webhooks: [WebhookInput!]
	"""
	**Validation:** valid URL, max=256
	"""
	healthCheckURL: String
	bundles: [BundleCreateInput!]
	integrationSystemID: ID
	statusCondition: ApplicationStatusCondition
}

"""
**Validation:** provided placeholders' names are unique and used in applicationInput
"""
input ApplicationTemplateInput {
	"""
	**Validation:** ASCII printable characters, max=100
	"""
	name: String!
	"""
	**Validation:** max=2000
	"""
	webhooks: [WebhookInput!]
	description: String
	applicationInput: ApplicationRegisterInput!
	placeholders: [PlaceholderDefinitionInput!]
	accessLevel: ApplicationTemplateAccessLevel!
}

input ApplicationTemplateUpdateInput {
	"""
	**Validation:** ASCII printable characters, max=100
	"""
	name: String!
	"""
	**Validation:** max=2000
	"""
	description: String
	applicationInput: ApplicationRegisterInput!
	placeholders: [PlaceholderDefinitionInput!]
	accessLevel: ApplicationTemplateAccessLevel!
}

input ApplicationUpdateInput {
	"""
	**Validation:** max=256
	"""
	providerName: String
	"""
	**Validation:** max=2000
	"""
	description: String
	"""
	**Validation:** valid URL, max=256
	"""
	healthCheckURL: String
	integrationSystemID: ID
	statusCondition: ApplicationStatusCondition
}

input AuthInput {
	credential: CredentialDataInput
	"""
	**Validation:** if provided, headers name and value required
	"""
	additionalHeaders: HttpHeaders @deprecated(reason: "Use `additionalHeadersSerialized`.")
	additionalHeadersSerialized: HttpHeadersSerialized
	"""
	**Validation:** if provided, query parameters name and value required
	"""
	additionalQueryParams: QueryParams @deprecated(reason: "Use `additionalHeadersSerialized`.")
	additionalQueryParamsSerialized: QueryParamsSerialized
	requestAuth: CredentialRequestAuthInput
}

input AutomaticScenarioAssignmentSetInput {
	scenarioName: String!
	"""
	Runtimes and Applications which contain labels with equal key and value are matched
	"""
	selector: LabelSelectorInput!
}

input BasicCredentialDataInput {
	username: String!
	password: String!
}

input BundleCreateInput {
	"""
	**Validation:** ASCII printable characters, max=100
	"""
	name: String!
	"""
	**Validation:** max=2000
	"""
	description: String
	instanceAuthRequestInputSchema: JSONSchema
	defaultInstanceAuth: AuthInput
	apiDefinitions: [APIDefinitionInput!]
	eventDefinitions: [EventDefinitionInput!]
	documents: [DocumentInput!]
}

input BundleInstanceAuthRequestInput {
	id: ID
	"""
	Context of BundleInstanceAuth - such as Runtime ID, namespace, etc.
	"""
	context: JSON
	"""
	**Validation:** JSON validated against bundle.instanceAuthRequestInputSchema
	"""
	inputParams: JSON
}

input BundleInstanceAuthSetInput {
	"""
	**Validation:** If not provided, the status has to be set. If provided, the status condition  must be "SUCCEEDED".
	"""
	auth: AuthInput
	"""
	**Validation:** Optional if the auth is provided.
	If the status condition is "FAILED", auth must be empty.
	"""
	status: BundleInstanceAuthStatusInput
}

input BundleInstanceAuthStatusInput {
	condition: BundleInstanceAuthSetStatusConditionInput! = SUCCEEDED
	"""
	**Validation:** required, if condition is FAILED
	"""
	message: String!
	"""
	Example reasons:
	- PendingNotification
	- NotificationSent
	- CredentialsProvided
	- CredentialsNotProvided
	- PendingDeletion
	
	   **Validation**: required, if condition is FAILED
	"""
	reason: String!
}

input BundleUpdateInput {
	"""
	**Validation:** ASCII printable characters, max=100
	"""
	name: String!
	"""
	**Validation:** max=2000
	"""
	description: String
	instanceAuthRequestInputSchema: JSONSchema
	"""
	While updating defaultInstanceAuth, existing BundleInstanceAuths are NOT updated.
	"""
	defaultInstanceAuth: AuthInput
}

input CSRFTokenCredentialRequestAuthInput {
	"""
	**Validation:** valid URL
	"""
	tokenEndpointURL: String!
	credential: CredentialDataInput
	"""
	**Validation:** if provided, headers name and value required
	"""
	additionalHeaders: HttpHeaders @deprecated(reason: "Use `additionalHeadersSerialized`.")
	additionalHeadersSerialized: HttpHeadersSerialized
	"""
	**Validation:** if provided, query parameters name and value required
	"""
	additionalQueryParams: QueryParams @deprecated(reason: "Use `additionalQueryParamsSerialized`.")
	additionalQueryParamsSerialized: QueryParamsSerialized
}

"""
**Validation:** basic or oauth field required
"""
input CredentialDataInput {
	basic: BasicCredentialDataInput
	oauth: OAuthCredentialDataInput
}

input CredentialRequestAuthInput {
	"""
	**Validation:** required
	"""
	csrf: CSRFTokenCredentialRequestAuthInput
}

input DocumentInput {
	"""
	**Validation:** max=128
	"""
	title: String!
	"""
	**Validation:** max=128
	"""
	displayName: String!
	"""
	**Validation:** max=2000
	"""
	description: String!
	format: DocumentFormat!
	"""
	**Validation:** max=256
	"""
	kind: String
	data: CLOB
	fetchRequest: FetchRequestInput
}

input EventDefinitionInput {
	"""
	**Validation:** ASCII printable characters, max=100
	"""
	name: String!
	"""
	**Validation:** max=2000
	"""
	description: String
	spec: EventSpecInput
	"""
	**Validation:** max=36
	"""
	group: String
	version: VersionInput
}

"""
**Validation:**
- data or fetchRequest required
- for ASYNC_API type, accepted formats are YAML and JSON
"""
input EventSpecInput {
	data: CLOB
	type: EventSpecType!
	format: SpecFormat!
	fetchRequest: FetchRequestInput
}

input FetchRequestInput {
	"""
	**Validation:** valid URL, max=256
	"""
	url: String!
	"""
	Currently unsupported, providing it will result in a failure
	"""
	auth: AuthInput
	"""
	Currently unsupported, providing it will result in a failure
	"""
	mode: FetchMode = SINGLE
	"""
	**Validation:** max=256
	Currently unsupported, providing it will result in a failure
	"""
	filter: String
}

input IntegrationSystemInput {
	"""
	**Validation:**  Up to 36 characters long. Cannot start with a digit. The characters allowed in names are: digits (0-9), lower case letters (a-z),-, and .
	"""
	name: String!
	"""
	**Validation:** max=2000
	"""
	description: String
}

input LabelDefinitionInput {
	"""
	**Validation:** max=256, alphanumeric chartacters and underscore
	"""
	key: String!
	schema: JSONSchema
}

input LabelFilter {
	"""
	Label key. If query for the filter is not provided, returns every object with given label key regardless of its value.
	"""
	key: String!
	"""
	Optional SQL/JSON Path expression. If query is not provided, returns every object with given label key regardless of its value.
	Currently only a limited subset of expressions is supported.
	"""
	query: String
}

input LabelInput {
	"""
	**Validation:** max=256, alphanumeric chartacters and underscore
	"""
	key: String!
	value: Any!
}

input LabelSelectorInput {
	key: String!
	value: String!
}

input OAuthCredentialDataInput {
	clientId: ID!
	clientSecret: String!
	"""
	**Validation:** valid URL
	"""
	url: String!
}

input PlaceholderDefinitionInput {
	"""
	**Validation:**  Up to 36 characters long. Cannot start with a digit. The characters allowed in names are: digits (0-9), lower case letters (a-z),-, and .
	"""
	name: String!
	"""
	**Validation:**  max=2000
	"""
	description: String
}

input RuntimeContextInput {
	"""
	**Validation:** required max=512, alphanumeric chartacters and underscore
	"""
	key: String!
	value: String!
	"""
	**Validation:** key: required, alphanumeric with underscore
	"""
	labels: Labels
}

input RuntimeInput {
	"""
	**Validation:**  Up to 36 characters long. Cannot start with a digit. The characters allowed in names are: digits (0-9), lower case letters (a-z),-, and .
	"""
	name: String!
	"""
	**Validation:**  max=2000
	"""
	description: String
	"""
	**Validation:** key: required, alphanumeric with underscore
	"""
	labels: Labels
	statusCondition: RuntimeStatusCondition
}

input TemplateValueInput {
	"""
	**Validation:**  Up to 36 characters long. Cannot start with a digit. The characters allowed in names are: digits (0-9), lower case letters (a-z),-, and .
	"""
	placeholder: String!
	value: String!
}

input VersionInput {
	"""
	**Validation:** max=256
	"""
	value: String!
	deprecated: Boolean = false
	"""
	**Validation:** max=256
	"""
	deprecatedSince: String
	forRemoval: Boolean = false
}

input WebhookInput {
	type: WebhookType!
	"""
	**Validation:** valid URL, max=256
	"""
	url: String
	auth: AuthInput
	mode: WebhookMode
	correlationIdKey: String
	retryInterval: Int
	timeout: Int
	urlTemplate: String
	inputTemplate: String
	headerTemplate: String
	outputTemplate: String
	statusTemplate: String
}

type APIDefinition {
	id: ID!
	name: String!
	description: String
	spec: APISpec
	targetURL: String!
	"""
	group allows you to find the same API but in different version
	"""
	group: String
	version: Version
	created_at: Timestamp
	updated_at: Timestamp
	deleted_at: Timestamp
	error: String
}

type APIDefinitionPage implements Pageable {
	data: [APIDefinition!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type APISpec {
	"""
	when fetch request specified, data will be automatically populated
	"""
	id: ID!
	data: CLOB
	format: SpecFormat!
	type: APISpecType!
	fetchRequest: FetchRequest @sanitize(path: "graphql.field.api_spec.fetch_request")
}

type AppSystemAuth implements SystemAuth {
	id: ID!
	auth: Auth @sanitize(path: "graphql.field.application.auths")
}

type Application {
	id: ID!
	name: String!
	providerName: String
	description: String
	integrationSystemID: ID
	applicationTemplateID: ID
	labels(key: String): Labels
	status: ApplicationStatus!
	webhooks: [Webhook!] @sanitize(path: "graphql.field.application.webhooks")
	healthCheckURL: String
	bundles(first: Int = 200, after: PageCursor): BundlePage
	bundle(id: ID!): Bundle
	auths: [AppSystemAuth!]
	eventingConfiguration: ApplicationEventingConfiguration
	createdAt: Timestamp
	updatedAt: Timestamp
	deletedAt: Timestamp
	error: String
}

type ApplicationEventingConfiguration {
	defaultURL: String!
}

type ApplicationPage implements Pageable {
	data: [Application!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type ApplicationStatus {
	condition: ApplicationStatusCondition!
	timestamp: Timestamp!
}

type ApplicationTemplate {
	id: ID!
	name: String!
	description: String
	webhooks: [Webhook!] @sanitize(path: "graphql.field.application_template.webhooks")
	applicationInput: String!
	placeholders: [PlaceholderDefinition!]!
	accessLevel: ApplicationTemplateAccessLevel!
}

type ApplicationTemplatePage implements Pageable {
	data: [ApplicationTemplate!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type Auth {
	credential: CredentialData
	additionalHeaders: HttpHeaders
	additionalHeadersSerialized: HttpHeadersSerialized
	additionalQueryParams: QueryParams
	additionalQueryParamsSerialized: QueryParamsSerialized
	requestAuth: CredentialRequestAuth
}

type AutomaticScenarioAssignment {
	scenarioName: String!
	selector: Label!
}

type AutomaticScenarioAssignmentPage implements Pageable {
	data: [AutomaticScenarioAssignment!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type BasicCredentialData {
	username: String!
	password: String!
}

type Bundle {
	id: ID!
	name: String!
	description: String
	instanceAuthRequestInputSchema: JSONSchema
	instanceAuth(id: ID!): BundleInstanceAuth @sanitize(path: "graphql.field.bundle.instance_auth")
	instanceAuths: [BundleInstanceAuth!] @sanitize(path: "graphql.field.bundle.instance_auths")
	"""
	When defined, all Auth requests fallback to defaultInstanceAuth.
	"""
	defaultInstanceAuth: Auth @sanitize(path: "graphql.field.bundle.default_instance_auth")
	apiDefinitions(group: String, first: Int = 200, after: PageCursor): APIDefinitionPage
	eventDefinitions(group: String, first: Int = 200, after: PageCursor): EventDefinitionPage
	documents(first: Int = 200, after: PageCursor): DocumentPage
	apiDefinition(id: ID!): APIDefinition
	eventDefinition(id: ID!): EventDefinition
	document(id: ID!): Document
	createdAt: Timestamp
	updatedAt: Timestamp
	deletedAt: Timestamp
	error: String
}

type BundleInstanceAuth {
	id: ID!
	"""
	Context of BundleInstanceAuth - such as Runtime ID, namespace
	"""
	context: JSON
	"""
	User input while requesting Bundle Instance Auth
	"""
	inputParams: JSON
	"""
	It may be empty if status is PENDING.
	Populated with `bundle.defaultAuth` value if `bundle.defaultAuth` is defined. If not, Compass notifies Application/Integration System about the Auth request.
	"""
	auth: Auth
	status: BundleInstanceAuthStatus!
}

type BundleInstanceAuthStatus {
	condition: BundleInstanceAuthStatusCondition!
	timestamp: Timestamp!
	message: String!
	"""
	Possible reasons:
	- PendingNotification
	- NotificationSent
	- CredentialsProvided
	- CredentialsNotProvided
	- PendingDeletion
	"""
	reason: String!
}

type BundlePage implements Pageable {
	data: [Bundle!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type CSRFTokenCredentialRequestAuth {
	tokenEndpointURL: String!
	credential: CredentialData
	additionalHeaders: HttpHeaders
	additionalHeadersSerialized: HttpHeadersSerialized
	additionalQueryParams: QueryParams
	additionalQueryParamsSerialized: QueryParamsSerialized
}

type CredentialRequestAuth {
	csrf: CSRFTokenCredentialRequestAuth
}

type Document {
	id: ID!
	title: String!
	displayName: String!
	description: String!
	format: DocumentFormat!
	"""
	for example Service Class, API etc
	"""
	kind: String
	data: CLOB
	fetchRequest: FetchRequest @sanitize(path: "graphql.field.document.fetch_request")
	createdAt: Timestamp
	updatedAt: Timestamp
	deletedAt: Timestamp
	error: String
}

type DocumentPage implements Pageable {
	data: [Document!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type EventDefinition {
	id: ID!
	name: String!
	description: String
	"""
	group allows you to find the same API but in different version
	"""
	group: String
	spec: EventSpec
	version: Version
	createdAt: Timestamp
	updatedAt: Timestamp
	deletedAt: Timestamp
	error: String
}

type EventDefinitionPage implements Pageable {
	data: [EventDefinition!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type EventSpec {
	id: ID!
	data: CLOB
	type: EventSpecType!
	format: SpecFormat!
	fetchRequest: FetchRequest @sanitize(path: "graphql.field.event_spec.fetch_request")
}

"""
Compass performs fetch to validate if request is correct and stores a copy
"""
type FetchRequest {
	url: String!
	auth: Auth @sanitize(path: "graphql.field.fetch_request.auth")
	mode: FetchMode!
	filter: String
	status: FetchRequestStatus!
}

type FetchRequestStatus {
	condition: FetchRequestStatusCondition!
	message: String
	timestamp: Timestamp!
}

type HealthCheck {
	type: HealthCheckType!
	condition: HealthCheckStatusCondition!
	origin: ID
	message: String
	timestamp: Timestamp!
}

type HealthCheckPage implements Pageable {
	data: [HealthCheck!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type IntSysSystemAuth implements SystemAuth {
	id: ID!
	auth: Auth @sanitize(path: "graphql.field.integration_system.auths")
}

type IntegrationSystem {
	id: ID!
	name: String!
	description: String
	auths: [IntSysSystemAuth!]
}

type IntegrationSystemPage implements Pageable {
	data: [IntegrationSystem!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type Label {
	key: String!
	value: Any!
}

type LabelDefinition {
	key: String!
	schema: JSONSchema
}

type OAuthCredentialData {
	clientId: ID!
	clientSecret: String!
	"""
	URL for getting access token
	"""
	url: String!
}

type OneTimeTokenForApplication implements OneTimeToken {
	token: String!
	connectorURL: String!
	legacyConnectorURL: String!
	raw: String
	rawEncoded: String
}

type OneTimeTokenForRuntime implements OneTimeToken {
	token: String!
	connectorURL: String!
	raw: String
	rawEncoded: String
}

type PageInfo {
	startCursor: PageCursor!
	endCursor: PageCursor!
	hasNextPage: Boolean!
}

type PlaceholderDefinition {
	name: String!
	description: String
}

type Runtime {
	id: ID!
	metadata: RuntimeMetadata!
	name: String!
	description: String
	labels(key: String): Labels
	status: RuntimeStatus!
	"""
	Returns array of authentication details for Runtime. For now at most one element in array will be returned.
	"""
	auths: [RuntimeSystemAuth!]
	eventingConfiguration: RuntimeEventingConfiguration
}

type RuntimeContext {
	id: ID!
	key: String!
	value: String!
	labels(key: String): Labels
}

type RuntimeContextPage implements Pageable {
	data: [RuntimeContext!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type RuntimeEventingConfiguration {
	defaultURL: String!
}

type RuntimeMetadata {
	creationTimestamp: Timestamp!
}

type RuntimePage implements Pageable {
	data: [Runtime!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

type RuntimeStatus {
	condition: RuntimeStatusCondition!
	timestamp: Timestamp!
}

type RuntimeSystemAuth implements SystemAuth {
	id: ID!
	auth: Auth @sanitize(path: "graphql.field.runtime.auths")
}

type Tenant {
	id: ID!
	internalID: ID!
	name: String
	initialized: Boolean
}

type Version {
	"""
	for example 4.6
	"""
	value: String!
	deprecated: Boolean
	"""
	for example 4.5
	"""
	deprecatedSince: String
	"""
	if true, will be removed in the next version
	"""
	forRemoval: Boolean
}

type Viewer {
	id: ID!
	type: ViewerType!
}

type Webhook {
	id: ID!
	applicationID: ID
	applicationTemplateID: ID
	runtimeID: ID
	integrationSystemID: ID
	type: WebhookType!
	mode: WebhookMode
	correlationIdKey: String
	retryInterval: Int
	timeout: Int
	url: String
	auth: Auth @sanitize(path: "graphql.field.webhooks.auth")
	urlTemplate: String
	inputTemplate: String
	headerTemplate: String
	outputTemplate: String
	statusTemplate: String
}

type Query {
	"""
	Maximum `first` parameter value is 100
	
	**Examples**
	- [query applications with label filter](examples/query-applications/query-applications-with-label-filter.graphql)
	- [query applications](examples/query-applications/query-applications.graphql)
	"""
	applications(filter: [LabelFilter!], first: Int = 200, after: PageCursor): ApplicationPage! @hasScopes(path: "graphql.query.applications")
	"""
	**Examples**
	- [query application](examples/query-application/query-application.graphql)
	"""
	application(id: ID!): Application @hasScenario(applicationProvider: "GetApplicationID", idField: "id") @hasScopes(path: "graphql.query.application")
	"""
	Maximum `first` parameter value is 100
	
	**Examples**
	- [query applications for runtime](examples/query-applications-for-runtime/query-applications-for-runtime.graphql)
	"""
	applicationsForRuntime(runtimeID: ID!, first: Int = 200, after: PageCursor): ApplicationPage! @hasScopes(path: "graphql.query.applicationsForRuntime")
	"""
	Maximum `first` parameter value is 100
	
	**Examples**
	- [query application templates](examples/query-application-templates/query-application-templates.graphql)
	"""
	applicationTemplates(first: Int = 200, after: PageCursor): ApplicationTemplatePage! @hasScopes(path: "graphql.query.applicationTemplates")
	"""
	**Examples**
	- [query application template](examples/query-application-template/query-application-template.graphql)
	"""
	applicationTemplate(id: ID!): ApplicationTemplate @hasScopes(path: "graphql.query.applicationTemplate")
	"""
	Maximum `first` parameter value is 100
	
	**Examples**
	- [query runtimes with label filter](examples/query-runtimes/query-runtimes-with-label-filter.graphql)
	- [query runtimes with pagination](examples/query-runtimes/query-runtimes-with-pagination.graphql)
	- [query runtimes](examples/query-runtimes/query-runtimes.graphql)
	"""
	runtimes(filter: [LabelFilter!], first: Int = 200, after: PageCursor): RuntimePage! @hasScopes(path: "graphql.query.runtimes")
	runtimeContexts(filter: [LabelFilter!], first: Int = 200, after: PageCursor): RuntimeContextPage! @hasScopes(path: "graphql.query.runtimeContexts")
	"""
	**Examples**
	- [query runtime](examples/query-runtime/query-runtime.graphql)
	"""
	runtime(id: ID!): Runtime @hasScopes(path: "graphql.query.runtime")
	runtimeContext(id: ID!): RuntimeContext @hasScopes(path: "graphql.query.runtimeContext")
	labelDefinitions: [LabelDefinition!]! @hasScopes(path: "graphql.query.labelDefinitions")
	"""
	**Examples**
	- [query label definition](examples/query-label-definition/query-label-definition.graphql)
	"""
	labelDefinition(key: String!): LabelDefinition @hasScopes(path: "graphql.query.labelDefinition")
	bundleByInstanceAuth(authID: ID!): Bundle @hasScopes(path: "graphql.query.bundleByInstanceAuth")
	bundleInstanceAuth(id: ID!): BundleInstanceAuth @hasScopes(path: "graphql.query.bundleInstanceAuth")
	healthChecks(types: [HealthCheckType!], origin: ID, first: Int = 200, after: PageCursor): HealthCheckPage! @hasScopes(path: "graphql.query.healthChecks")
	"""
	Maximum `first` parameter value is 100
	
	**Examples**
	- [query integration systems](examples/query-integration-systems/query-integration-systems.graphql)
	"""
	integrationSystems(first: Int = 200, after: PageCursor): IntegrationSystemPage! @hasScopes(path: "graphql.query.integrationSystems")
	"""
	**Examples**
	- [query integration system](examples/query-integration-system/query-integration-system.graphql)
	"""
	integrationSystem(id: ID!): IntegrationSystem @hasScopes(path: "graphql.query.integrationSystem")
	viewer: Viewer! @hasScopes(path: "graphql.query.viewer")
	"""
	**Examples**
	- [query tenants](examples/query-tenants/query-tenants.graphql)
	"""
	tenants: [Tenant!]! @hasScopes(path: "graphql.query.tenants")
	"""
	**Examples**
	- [query automatic scenario assignment for scenario](examples/query-automatic-scenario-assignment-for-scenario/query-automatic-scenario-assignment-for-scenario.graphql)
	"""
	automaticScenarioAssignmentForScenario(scenarioName: String!): AutomaticScenarioAssignment @hasScopes(path: "graphql.query.automaticScenarioAssignmentForScenario")
	"""
	**Examples**
	- [query automatic scenario assignments for selector](examples/query-automatic-scenario-assignments-for-selector/query-automatic-scenario-assignments-for-selector.graphql)
	"""
	automaticScenarioAssignmentsForSelector(selector: LabelSelectorInput!): [AutomaticScenarioAssignment!]! @hasScopes(path: "graphql.query.automaticScenarioAssignmentsForSelector")
	"""
	**Examples**
	- [query automatic scenario assignments](examples/query-automatic-scenario-assignments/query-automatic-scenario-assignments.graphql)
	"""
	automaticScenarioAssignments(first: Int = 200, after: PageCursor): AutomaticScenarioAssignmentPage @hasScopes(path: "graphql.query.automaticScenarioAssignments")
}

type Mutation {
	"""
	**Examples**
	- [register application with bundles](examples/register-application/register-application-with-bundles.graphql)
	- [register application with status](examples/register-application/register-application-with-status.graphql)
	- [register application with webhooks](examples/register-application/register-application-with-webhooks.graphql)
	- [register application](examples/register-application/register-application.graphql)
	"""
	registerApplication(in: ApplicationRegisterInput! @validate, mode: OperationMode = SYNC): Application! @hasScopes(path: "graphql.mutation.registerApplication") @async(operationType: CREATE, webhookType: REGISTER_APPLICATION)
	"""
	**Examples**
	- [update application](examples/update-application/update-application.graphql)
	"""
	updateApplication(id: ID!, in: ApplicationUpdateInput! @validate): Application! @hasScopes(path: "graphql.mutation.updateApplication") @async(operationType: UPDATE, idField: "id")
	"""
	**Examples**
	- [unregister application](examples/unregister-application/unregister-application.graphql)
	"""
	unregisterApplication(id: ID!, mode: OperationMode = SYNC): Application! @hasScopes(path: "graphql.mutation.unregisterApplication") @async(operationType: DELETE, idField: "id", webhookType: UNREGISTER_APPLICATION)
	"""
	**Examples**
	- [create application template](examples/create-application-template/create-application-template.graphql)
	"""
	createApplicationTemplate(in: ApplicationTemplateInput! @validate): ApplicationTemplate! @hasScopes(path: "graphql.mutation.createApplicationTemplate")
	"""
	**Examples**
	- [register application from template](examples/register-application-from-template/register-application-from-template.graphql)
	"""
	registerApplicationFromTemplate(in: ApplicationFromTemplateInput! @validate): Application! @hasScopes(path: "graphql.mutation.registerApplicationFromTemplate")
	"""
	**Examples**
	- [update application template](examples/update-application-template/update-application-template.graphql)
	"""
	updateApplicationTemplate(id: ID!, in: ApplicationTemplateUpdateInput! @validate): ApplicationTemplate! @hasScopes(path: "graphql.mutation.updateApplicationTemplate")
	"""
	**Examples**
	- [delete application template](examples/delete-application-template/delete-application-template.graphql)
	"""
	deleteApplicationTemplate(id: ID!): ApplicationTemplate! @hasScopes(path: "graphql.mutation.deleteApplicationTemplate")
	"""
	**Examples**
	- [register runtime](examples/register-runtime/register-runtime.graphql)
	"""
	registerRuntime(in: RuntimeInput! @validate): Runtime! @hasScopes(path: "graphql.mutation.registerRuntime")
	"""
	**Examples**
	- [update runtime](examples/update-runtime/update-runtime.graphql)
	"""
	updateRuntime(id: ID!, in: RuntimeInput! @validate): Runtime! @hasScopes(path: "graphql.mutation.updateRuntime")
	"""
	**Examples**
	- [unregister runtime](examples/unregister-runtime/unregister-runtime.graphql)
	"""
	unregisterRuntime(id: ID!): Runtime! @hasScopes(path: "graphql.mutation.unregisterRuntime")
	registerRuntimeContext(in: RuntimeContextInput! @validate): RuntimeContext! @hasScopes(path: "graphql.mutation.registerRuntimeContext")
	updateRuntimeContext(id: ID!, in: RuntimeContextInput! @validate): RuntimeContext! @hasScopes(path: "graphql.mutation.updateRuntimeContext")
	unregisterRuntimeContext(id: ID!): RuntimeContext! @hasScopes(path: "graphql.mutation.unregisterRuntimeContext")
	"""
	**Examples**
	- [register integration system](examples/register-integration-system/register-integration-system.graphql)
	"""
	registerIntegrationSystem(in: IntegrationSystemInput! @validate): IntegrationSystem! @hasScopes(path: "graphql.mutation.registerIntegrationSystem")
	"""
	**Examples**
	- [update integration system](examples/update-integration-system/update-integration-system.graphql)
	"""
	updateIntegrationSystem(id: ID!, in: IntegrationSystemInput! @validate): IntegrationSystem! @hasScopes(path: "graphql.mutation.updateIntegrationSystem")
	"""
	**Examples**
	- [unregister integration system](examples/unregister-integration-system/unregister-integration-system.graphql)
	"""
	unregisterIntegrationSystem(id: ID!): IntegrationSystem! @hasScopes(path: "graphql.mutation.unregisterIntegrationSystem")
	"""
	**Examples**
	- [add application webhook](examples/add-webhook/add-application-webhook.graphql)
	"""
	addWebhook(applicationID: ID, applicationTemplateID: ID, in: WebhookInput! @validate): Webhook! @hasScopes(path: "graphql.mutation.addWebhook")
	"""
	**Examples**
	- [update application webhook](examples/update-webhook/update-application-webhook.graphql)
	"""
	updateWebhook(webhookID: ID!, in: WebhookInput! @validate): Webhook! @hasScopes(path: "graphql.mutation.updateWebhook")
	"""
	**Examples**
	- [delete application webhook](examples/delete-webhook/delete-application-webhook.graphql)
	"""
	deleteWebhook(webhookID: ID!): Webhook! @hasScopes(path: "graphql.mutation.deleteWebhook")
	"""
	**Examples**
	- [add api definition to bundle](examples/add-api-definition-to-bundle/add-api-definition-to-bundle.graphql)
	"""
	addAPIDefinitionToBundle(bundleID: ID!, in: APIDefinitionInput! @validate): APIDefinition! @hasScopes(path: "graphql.mutation.addAPIDefinitionToBundle")
	"""
	**Examples**
	- [update api definition](examples/update-api-definition/update-api-definition.graphql)
	"""
	updateAPIDefinition(id: ID!, in: APIDefinitionInput! @validate): APIDefinition! @hasScopes(path: "graphql.mutation.updateAPIDefinition")
	"""
	**Examples**
	- [delete api definition](examples/delete-api-definition/delete-api-definition.graphql)
	"""
	deleteAPIDefinition(id: ID!): APIDefinition! @hasScopes(path: "graphql.mutation.deleteAPIDefinition")
	"""
	**Examples**
	- [refetch api spec](examples/refetch-api-spec/refetch-api-spec.graphql)
	"""
	refetchAPISpec(apiID: ID!): APISpec! @hasScopes(path: "graphql.mutation.refetchAPISpec")
	requestOneTimeTokenForRuntime(id: ID!): OneTimeTokenForRuntime! @hasScopes(path: "graphql.mutation.requestOneTimeTokenForRuntime")
	requestOneTimeTokenForApplication(id: ID!): OneTimeTokenForApplication! @hasScopes(path: "graphql.mutation.requestOneTimeTokenForApplication")
	requestClientCredentialsForRuntime(id: ID!): SystemAuth! @hasScopes(path: "graphql.mutation.requestClientCredentialsForRuntime")
	requestClientCredentialsForApplication(id: ID!): SystemAuth! @hasScopes(path: "graphql.mutation.requestClientCredentialsForApplication")
	requestClientCredentialsForIntegrationSystem(id: ID!): SystemAuth! @hasScopes(path: "graphql.mutation.requestClientCredentialsForIntegrationSystem")
	deleteSystemAuthForRuntime(authID: ID!): SystemAuth! @hasScopes(path: "graphql.mutation.deleteSystemAuthForRuntime")
	deleteSystemAuthForApplication(authID: ID!): SystemAuth! @hasScopes(path: "graphql.mutation.deleteSystemAuthForApplication")
	deleteSystemAuthForIntegrationSystem(authID: ID!): SystemAuth! @hasScopes(path: "graphql.mutation.deleteSystemAuthForIntegrationSystem")
	"""
	**Examples**
	- [add event definition to bundle](examples/add-event-definition-to-bundle/add-event-definition-to-bundle.graphql)
	"""
	addEventDefinitionToBundle(bundleID: ID!, in: EventDefinitionInput! @validate): EventDefinition! @hasScopes(path: "graphql.mutation.addEventDefinitionToBundle")
	"""
	**Examples**
	- [update event definition](examples/update-event-definition/update-event-definition.graphql)
	"""
	updateEventDefinition(id: ID!, in: EventDefinitionInput! @validate): EventDefinition! @hasScopes(path: "graphql.mutation.updateEventDefinition")
	"""
	**Examples**
	- [delete event definition](examples/delete-event-definition/delete-event-definition.graphql)
	"""
	deleteEventDefinition(id: ID!): EventDefinition! @hasScopes(path: "graphql.mutation.deleteEventDefinition")
	refetchEventDefinitionSpec(eventID: ID!): EventSpec! @hasScopes(path: "graphql.mutation.refetchEventDefinitionSpec")
	"""
	**Examples**
	- [add document to bundle](examples/add-document-to-bundle/add-document-to-bundle.graphql)
	"""
	addDocumentToBundle(bundleID: ID!, in: DocumentInput! @validate): Document! @hasScopes(path: "graphql.mutation.addDocumentToBundle")
	"""
	**Examples**
	- [delete document](examples/delete-document/delete-document.graphql)
	"""
	deleteDocument(id: ID!): Document! @hasScopes(path: "graphql.mutation.deleteDocument")
	"""
	**Examples**
	- [create label definition](examples/create-label-definition/create-label-definition.graphql)
	"""
	createLabelDefinition(in: LabelDefinitionInput! @validate): LabelDefinition! @hasScopes(path: "graphql.mutation.createLabelDefinition")
	"""
	**Examples**
	- [update label definition](examples/update-label-definition/update-label-definition.graphql)
	"""
	updateLabelDefinition(in: LabelDefinitionInput! @validate): LabelDefinition! @hasScopes(path: "graphql.mutation.updateLabelDefinition")
	"""
	**Examples**
	- [delete label definition](examples/delete-label-definition/delete-label-definition.graphql)
	"""
	deleteLabelDefinition(key: String!, deleteRelatedLabels: Boolean = false): LabelDefinition! @hasScopes(path: "graphql.mutation.deleteLabelDefinition")
	"""
	If a label with given key already exist, it will be replaced with provided value.
	
	**Examples**
	- [set application label](examples/set-application-label/set-application-label.graphql)
	"""
	setApplicationLabel(applicationID: ID!, key: String!, value: Any!): Label! @hasScopes(path: "graphql.mutation.setApplicationLabel")
	"""
	If Application does not exist or the label key is not found, it returns an error.
	
	**Examples**
	- [delete application label](examples/delete-application-label/delete-application-label.graphql)
	"""
	deleteApplicationLabel(applicationID: ID!, key: String!): Label! @hasScopes(path: "graphql.mutation.deleteApplicationLabel")
	"""
	If a label with given key already exist, it will be replaced with provided value.
	"""
	setRuntimeLabel(runtimeID: ID!, key: String!, value: Any!): Label! @hasScopes(path: "graphql.mutation.setRuntimeLabel")
	"""
	If Runtime does not exist or the label key is not found, it returns an error.
	"""
	deleteRuntimeLabel(runtimeID: ID!, key: String!): Label! @hasScopes(path: "graphql.mutation.deleteRuntimeLabel")
	setDefaultEventingForApplication(appID: String!, runtimeID: String!): ApplicationEventingConfiguration! @hasScopes(path: "graphql.mutation.setDefaultEventingForApplication")
	deleteDefaultEventingForApplication(appID: String!): ApplicationEventingConfiguration! @hasScopes(path: "graphql.mutation.deleteDefaultEventingForApplication")
	"""
	When BundleInstanceAuth is not in pending state, the operation returns error.
	
	When used without error, the status of pending auth is set to success.
	
	**Examples**
	- [set bundle instance auth](examples/set-bundle-instance-auth/set-bundle-instance-auth.graphql)
	"""
	setBundleInstanceAuth(authID: ID!, in: BundleInstanceAuthSetInput! @validate): BundleInstanceAuth! @hasScopes(path: "graphql.mutation.setBundleInstanceAuth")
	"""
	**Examples**
	- [delete bundle instance auth](examples/delete-bundle-instance-auth/delete-bundle-instance-auth.graphql)
	"""
	deleteBundleInstanceAuth(authID: ID!): BundleInstanceAuth! @hasScopes(path: "graphql.mutation.deleteBundleInstanceAuth")
	"""
	When defaultInstanceAuth is set, it fires "createBundleInstanceAuth" mutation. Otherwise, the status of the BundleInstanceAuth is set to PENDING.
	
	**Examples**
	- [request bundle instance auth creation](examples/request-bundle-instance-auth-creation/request-bundle-instance-auth-creation.graphql)
	"""
	requestBundleInstanceAuthCreation(bundleID: ID!, in: BundleInstanceAuthRequestInput! @validate): BundleInstanceAuth! @hasScenario(applicationProvider: "GetApplicationIDByBundle", idField: "bundleID") @hasScopes(path: "graphql.mutation.requestBundleInstanceAuthCreation")
	"""
	When defaultInstanceAuth is set, it fires "deleteBundleInstanceAuth" mutation. Otherwise, the status of the BundleInstanceAuth is set to UNUSED.
	
	**Examples**
	- [request bundle instance auth deletion](examples/request-bundle-instance-auth-deletion/request-bundle-instance-auth-deletion.graphql)
	"""
	requestBundleInstanceAuthDeletion(authID: ID!): BundleInstanceAuth! @hasScenario(applicationProvider: "GetApplicationIDByBundleInstanceAuth", idField: "authID") @hasScopes(path: "graphql.mutation.requestBundleInstanceAuthDeletion")
	"""
	**Examples**
	- [add bundle](examples/add-bundle/add-bundle.graphql)
	"""
	addBundle(applicationID: ID!, in: BundleCreateInput! @validate): Bundle! @hasScopes(path: "graphql.mutation.addBundle")
	"""
	**Examples**
	- [update bundle](examples/update-bundle/update-bundle.graphql)
	"""
	updateBundle(id: ID!, in: BundleUpdateInput! @validate): Bundle! @hasScopes(path: "graphql.mutation.updateBundle")
	"""
	**Examples**
	- [delete bundle](examples/delete-bundle/delete-bundle.graphql)
	"""
	deleteBundle(id: ID!): Bundle! @hasScopes(path: "graphql.mutation.deleteBundle")
	"""
	**Examples**
	- [create automatic scenario assignment](examples/create-automatic-scenario-assignment/create-automatic-scenario-assignment.graphql)
	"""
	createAutomaticScenarioAssignment(in: AutomaticScenarioAssignmentSetInput!): AutomaticScenarioAssignment @hasScopes(path: "graphql.mutation.createAutomaticScenarioAssignment")
	"""
	**Examples**
	- [delete automatic scenario assignment for scenario](examples/delete-automatic-scenario-assignment-for-scenario/delete-automatic-scenario-assignment-for-scenario.graphql)
	"""
	deleteAutomaticScenarioAssignmentForScenario(scenarioName: String!): AutomaticScenarioAssignment @hasScopes(path: "graphql.mutation.deleteAutomaticScenarioAssignmentForScenario")
	"""
	**Examples**
	- [delete automatic scenario assignments for selector](examples/delete-automatic-scenario-assignments-for-selector/delete-automatic-scenario-assignments-for-selector.graphql)
	"""
	deleteAutomaticScenarioAssignmentsForSelector(selector: LabelSelectorInput!): [AutomaticScenarioAssignment!]! @hasScopes(path: "graphql.mutation.deleteAutomaticScenarioAssignmentsForSelector")
}

