# Code generated by Compass integration tests, DO NOT EDIT.
mutation {
  result: registerRuntime(
    in: {
      name: "runtime-create-update-delete"
      description: "runtime-1-description"
      labels: { ggg: ["hhh"] }
    }
  ) {
    id
    name
    description
    labels
    status {
      condition
      timestamp
    }
    metadata {
      creationTimestamp
    }
    auths {
      id
      auth {
        credential {
          ... on BasicCredentialData {
            username
            password
          }
          ... on CertificateOAuthCredentialData {
            clientId
            certificate
            url
          }
          ... on OAuthCredentialData {
            clientId
            clientSecret
            url
          }
        }
        oneTimeToken {
          __typename
          token
          used
          expiresAt
        }
        certCommonName
        accessStrategy
        additionalHeaders
        additionalQueryParams
        requestAuth {
          csrf {
            tokenEndpointURL
            credential {
              ... on BasicCredentialData {
                username
                password
              }
              ... on OAuthCredentialData {
                clientId
                clientSecret
                url
              }
              ... on CertificateOAuthCredentialData {
                clientId
                certificate
                url
              }
            }
            additionalHeaders
            additionalQueryParams
          }
        }
      }
    }
    runtimeContexts {
      data {
        id
        key
        value
        labels
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
      }
      totalCount
    }
    webhooks {
      id
      applicationID
      applicationTemplateID
      runtimeID
      type
      mode
      correlationIdKey
      retryInterval
      timeout
      url
      urlTemplate
      inputTemplate
      headerTemplate
      outputTemplate
      statusTemplate
      auth {
        credential {
          ... on BasicCredentialData {
            username
            password
          }
          ... on CertificateOAuthCredentialData {
            clientId
            certificate
            url
          }
          ... on OAuthCredentialData {
            clientId
            clientSecret
            url
          }
        }
        oneTimeToken {
          __typename
          token
          used
          expiresAt
        }
        certCommonName
        accessStrategy
        additionalHeaders
        additionalQueryParams
        requestAuth {
          csrf {
            tokenEndpointURL
            credential {
              ... on BasicCredentialData {
                username
                password
              }
              ... on OAuthCredentialData {
                clientId
                clientSecret
                url
              }
              ... on CertificateOAuthCredentialData {
                clientId
                certificate
                url
              }
            }
            additionalHeaders
            additionalQueryParams
          }
        }
      }
      createdAt
    }
    eventingConfiguration {
      defaultURL
    }
  }
}
