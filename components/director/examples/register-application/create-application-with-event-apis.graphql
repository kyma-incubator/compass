# Code generated by Compass integration tests, DO NOT EDIT.
mutation {
  result: registerApplication(
    in: {
      name: "create-application-with-event-apis"
      labels: { scenarios: ["DEFAULT"] }
      eventDefinitions: [
        {
          name: "comments-v1"
          description: "comments events"
          spec: { data: "asyncapi", type: ASYNC_API, format: YAML }
          group: "comments"
          version: {
            value: "v1"
            deprecated: true
            deprecatedSince: "v5"
            forRemoval: true
          }
        }
        {
          name: "reviews-v1"
          description: "review events"
          spec: {
            type: ASYNC_API
            fetchRequest: {
              url: "http://mywordpress.com/events"
              auth: {
                credential: {
                  oauth: {
                    clientId: "clientid"
                    clientSecret: "grazynasecret"
                    url: "url.net"
                  }
                }
              }
              mode: PACKAGE
              filter: "async.json"
            }
            format: YAML
          }
        }
      ]
    }
  ) {
    id
    name
    description
    labels
    status {
      condition
      timestamp
    }
    webhooks {
      id
      applicationID
      type
      url
      auth {
        credential {
          ... on BasicCredentialData {
            username
            password
          }
          ... on OAuthCredentialData {
            clientId
            clientSecret
            url
          }
        }
        additionalHeaders
        additionalQueryParams
        requestAuth {
          csrf {
            tokenEndpointURL
            credential {
              ... on BasicCredentialData {
                username
                password
              }
              ... on OAuthCredentialData {
                clientId
                clientSecret
                url
              }
            }
            additionalHeaders
            additionalQueryParams
          }
        }
      }
    }
    healthCheckURL
    apiDefinitions {
      data {
        id
        name
        description
        spec {
          data
          format
          type
          fetchRequest {
            url
            auth {
              credential {
                ... on BasicCredentialData {
                  username
                  password
                }
                ... on OAuthCredentialData {
                  clientId
                  clientSecret
                  url
                }
              }
              additionalHeaders
              additionalQueryParams
              requestAuth {
                csrf {
                  tokenEndpointURL
                  credential {
                    ... on BasicCredentialData {
                      username
                      password
                    }
                    ... on OAuthCredentialData {
                      clientId
                      clientSecret
                      url
                    }
                  }
                  additionalHeaders
                  additionalQueryParams
                }
              }
            }
            mode
            filter
            status {
              condition
              timestamp
            }
          }
        }
        targetURL
        group
        auths {
          runtimeID
          auth {
            credential {
              ... on BasicCredentialData {
                username
                password
              }
              ... on OAuthCredentialData {
                clientId
                clientSecret
                url
              }
            }
            additionalHeaders
            additionalQueryParams
            requestAuth {
              csrf {
                tokenEndpointURL
                credential {
                  ... on BasicCredentialData {
                    username
                    password
                  }
                  ... on OAuthCredentialData {
                    clientId
                    clientSecret
                    url
                  }
                }
                additionalHeaders
                additionalQueryParams
              }
            }
          }
        }
        defaultAuth {
          credential {
            ... on BasicCredentialData {
              username
              password
            }
            ... on OAuthCredentialData {
              clientId
              clientSecret
              url
            }
          }
          additionalHeaders
          additionalQueryParams
          requestAuth {
            csrf {
              tokenEndpointURL
              credential {
                ... on BasicCredentialData {
                  username
                  password
                }
                ... on OAuthCredentialData {
                  clientId
                  clientSecret
                  url
                }
              }
              additionalHeaders
              additionalQueryParams
            }
          }
        }
        version {
          value
          deprecated
          deprecatedSince
          forRemoval
        }
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
      }
      totalCount
    }
    eventDefinitions {
      data {
        id
        applicationID
        name
        description
        group
        spec {
          data
          type
          format
          fetchRequest {
            url
            auth {
              credential {
                ... on BasicCredentialData {
                  username
                  password
                }
                ... on OAuthCredentialData {
                  clientId
                  clientSecret
                  url
                }
              }
              additionalHeaders
              additionalQueryParams
              requestAuth {
                csrf {
                  tokenEndpointURL
                  credential {
                    ... on BasicCredentialData {
                      username
                      password
                    }
                    ... on OAuthCredentialData {
                      clientId
                      clientSecret
                      url
                    }
                  }
                  additionalHeaders
                  additionalQueryParams
                }
              }
            }
            mode
            filter
            status {
              condition
              timestamp
            }
          }
        }
        version {
          value
          deprecated
          deprecatedSince
          forRemoval
        }
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
      }
      totalCount
    }
    documents {
      data {
        id
        applicationID
        title
        displayName
        description
        format
        kind
        data
        fetchRequest {
          url
          auth {
            credential {
              ... on BasicCredentialData {
                username
                password
              }
              ... on OAuthCredentialData {
                clientId
                clientSecret
                url
              }
            }
            additionalHeaders
            additionalQueryParams
            requestAuth {
              csrf {
                tokenEndpointURL
                credential {
                  ... on BasicCredentialData {
                    username
                    password
                  }
                  ... on OAuthCredentialData {
                    clientId
                    clientSecret
                    url
                  }
                }
                additionalHeaders
                additionalQueryParams
              }
            }
          }
          mode
          filter
          status {
            condition
            timestamp
          }
        }
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
      }
      totalCount
    }
    auths {
      id
      auth {
        credential {
          ... on BasicCredentialData {
            username
            password
          }
          ... on OAuthCredentialData {
            clientId
            clientSecret
            url
          }
        }
        additionalHeaders
        additionalQueryParams
        requestAuth {
          csrf {
            tokenEndpointURL
            credential {
              ... on BasicCredentialData {
                username
                password
              }
              ... on OAuthCredentialData {
                clientId
                clientSecret
                url
              }
            }
            additionalHeaders
            additionalQueryParams
          }
        }
      }
    }
  }
}
