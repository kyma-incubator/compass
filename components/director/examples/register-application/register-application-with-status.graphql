# Code generated by Compass integration tests, DO NOT EDIT.
mutation {
  result: registerApplication(
    in: {
      name: "wordpress"
      providerName: "provider name"
      description: "my first wordpress application"
      labels: { group: ["production", "experimental"], scenarios: ["DEFAULT"] }
      healthCheckURL: "http://mywordpress.com/health"
      statusCondition: CONNECTED
    }
  ) {
    id
    name
    providerName
    description
    integrationSystemID
    labels
    status {
      condition
      timestamp
    }
    webhooks {
      id
      applicationID
      type
      url
      auth {
        credential {
          ... on BasicCredentialData {
            username
            password
          }
          ... on OAuthCredentialData {
            clientId
            clientSecret
            url
          }
        }
        additionalHeaders
        additionalQueryParams
        requestAuth {
          csrf {
            tokenEndpointURL
            credential {
              ... on BasicCredentialData {
                username
                password
              }
              ... on OAuthCredentialData {
                clientId
                clientSecret
                url
              }
            }
            additionalHeaders
            additionalQueryParams
          }
        }
      }
    }
    healthCheckURL
    packages {
      data {
        id
        name
        description
        instanceAuthRequestInputSchema
        instanceAuths {
          id
          context
          inputParams
          auth {
            credential {
              ... on BasicCredentialData {
                username
                password
              }
              ... on OAuthCredentialData {
                clientId
                clientSecret
                url
              }
            }
            additionalHeaders
            additionalQueryParams
            requestAuth {
              csrf {
                tokenEndpointURL
                credential {
                  ... on BasicCredentialData {
                    username
                    password
                  }
                  ... on OAuthCredentialData {
                    clientId
                    clientSecret
                    url
                  }
                }
                additionalHeaders
                additionalQueryParams
              }
            }
          }
          status {
            condition
            timestamp
            message
            reason
          }
        }
        defaultInstanceAuth {
          credential {
            ... on BasicCredentialData {
              username
              password
            }
            ... on OAuthCredentialData {
              clientId
              clientSecret
              url
            }
          }
          additionalHeaders
          additionalQueryParams
          requestAuth {
            csrf {
              tokenEndpointURL
              credential {
                ... on BasicCredentialData {
                  username
                  password
                }
                ... on OAuthCredentialData {
                  clientId
                  clientSecret
                  url
                }
              }
              additionalHeaders
              additionalQueryParams
            }
          }
        }
        apiDefinitions {
          data {
            id
            name
            description
            spec {
              data
              format
              type
              fetchRequest {
                url
                auth {
                  credential {
                    ... on BasicCredentialData {
                      username
                      password
                    }
                    ... on OAuthCredentialData {
                      clientId
                      clientSecret
                      url
                    }
                  }
                  additionalHeaders
                  additionalQueryParams
                  requestAuth {
                    csrf {
                      tokenEndpointURL
                      credential {
                        ... on BasicCredentialData {
                          username
                          password
                        }
                        ... on OAuthCredentialData {
                          clientId
                          clientSecret
                          url
                        }
                      }
                      additionalHeaders
                      additionalQueryParams
                    }
                  }
                }
                mode
                filter
                status {
                  condition
                  timestamp
                }
              }
            }
            targetURL
            group
            version {
              value
              deprecated
              deprecatedSince
              forRemoval
            }
          }
          pageInfo {
            startCursor
            endCursor
            hasNextPage
          }
          totalCount
        }
        eventDefinitions {
          data {
            id
            name
            description
            group
            spec {
              data
              type
              format
              fetchRequest {
                url
                auth {
                  credential {
                    ... on BasicCredentialData {
                      username
                      password
                    }
                    ... on OAuthCredentialData {
                      clientId
                      clientSecret
                      url
                    }
                  }
                  additionalHeaders
                  additionalQueryParams
                  requestAuth {
                    csrf {
                      tokenEndpointURL
                      credential {
                        ... on BasicCredentialData {
                          username
                          password
                        }
                        ... on OAuthCredentialData {
                          clientId
                          clientSecret
                          url
                        }
                      }
                      additionalHeaders
                      additionalQueryParams
                    }
                  }
                }
                mode
                filter
                status {
                  condition
                  timestamp
                }
              }
            }
            version {
              value
              deprecated
              deprecatedSince
              forRemoval
            }
          }
          pageInfo {
            startCursor
            endCursor
            hasNextPage
          }
          totalCount
        }
        documents {
          data {
            id
            title
            displayName
            description
            format
            kind
            data
            fetchRequest {
              url
              auth {
                credential {
                  ... on BasicCredentialData {
                    username
                    password
                  }
                  ... on OAuthCredentialData {
                    clientId
                    clientSecret
                    url
                  }
                }
                additionalHeaders
                additionalQueryParams
                requestAuth {
                  csrf {
                    tokenEndpointURL
                    credential {
                      ... on BasicCredentialData {
                        username
                        password
                      }
                      ... on OAuthCredentialData {
                        clientId
                        clientSecret
                        url
                      }
                    }
                    additionalHeaders
                    additionalQueryParams
                  }
                }
              }
              mode
              filter
              status {
                condition
                timestamp
              }
            }
          }
          pageInfo {
            startCursor
            endCursor
            hasNextPage
          }
          totalCount
        }
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
      }
      totalCount
    }
    auths {
      id
      auth {
        credential {
          ... on BasicCredentialData {
            username
            password
          }
          ... on OAuthCredentialData {
            clientId
            clientSecret
            url
          }
        }
        additionalHeaders
        additionalQueryParams
        requestAuth {
          csrf {
            tokenEndpointURL
            credential {
              ... on BasicCredentialData {
                username
                password
              }
              ... on OAuthCredentialData {
                clientId
                clientSecret
                url
              }
            }
            additionalHeaders
            additionalQueryParams
          }
        }
      }
    }
    eventingConfiguration {
      defaultURL
    }
  }
}
