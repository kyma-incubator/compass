# Code generated by Compass integration tests, DO NOT EDIT.
mutation {
  result: registerApplication(
    in: {
      name: "create-application-with-documents"
      providerName: "compass"
      labels: { scenarios: ["DEFAULT"] }
      packages: [
        {
          name: "foo"
          description: "Foo bar"
          apiDefinitions: [
            {
              name: "comments-v1"
              description: "api for adding comments"
              targetURL: "http://mywordpress.com/comments"
              group: "comments"
              spec: {
                data: "{\"openapi\":\"3.0.2\"}"
                type: OPEN_API
                format: YAML
              }
              version: {
                value: "v1"
                deprecated: true
                deprecatedSince: "v5"
                forRemoval: true
              }
            }
            {
              name: "reviews-v1"
              targetURL: "http://mywordpress.com/reviews"
              spec: {
                type: ODATA
                format: JSON
                fetchRequest: {
                  url: "http://mywordpress.com/apis"
                  auth: {
                    credential: {
                      basic: { username: "admin", password: "secret" }
                    }
                    additionalHeaders: {
                      headerA: ["ha1", "ha2"]
                      headerB: ["hb1", "hb2"]
                    }
                    additionalQueryParams: {
                      qA: ["qa1", "qa2"]
                      qB: ["qb1", "qb2"]
                    }
                  }
                  mode: PACKAGE
                  filter: "odata.json"
                }
              }
            }
            {
              name: "xml"
              targetURL: "http://mywordpress.com/xml"
              spec: { data: "odata", type: ODATA, format: XML }
            }
          ]
          eventDefinitions: [
            {
              name: "comments-v1"
              description: "comments events"
              spec: {
                data: "{\"asyncapi\":\"1.2.0\"}"
                type: ASYNC_API
                format: YAML
              }
              group: "comments"
              version: {
                value: "v1"
                deprecated: true
                deprecatedSince: "v5"
                forRemoval: true
              }
            }
            {
              name: "reviews-v1"
              description: "review events"
              spec: {
                type: ASYNC_API
                fetchRequest: {
                  url: "http://mywordpress.com/events"
                  auth: {
                    credential: {
                      oauth: {
                        clientId: "clientid"
                        clientSecret: "grazynasecret"
                        url: "url.net"
                      }
                    }
                  }
                  mode: PACKAGE
                  filter: "async.json"
                }
                format: YAML
              }
            }
          ]
          documents: [
            {
              title: "Readme"
              displayName: "display-name"
              description: "Detailed description of project"
              format: MARKDOWN
              fetchRequest: {
                url: "kyma-project.io"
                auth: {
                  credential: {
                    basic: { username: "admin", password: "secret" }
                  }
                  additionalHeaders: {
                    headerA: ["ha1", "ha2"]
                    headerB: ["hb1", "hb2"]
                  }
                  additionalQueryParams: {
                    qA: ["qa1", "qa2"]
                    qB: ["qb1", "qb2"]
                  }
                }
                mode: PACKAGE
                filter: "/docs/README.md"
              }
            }
            {
              title: "Troubleshooting"
              displayName: "display-name"
              description: "Troubleshooting description"
              format: MARKDOWN
              data: "No problems, everything works on my machine"
            }
          ]
        }
        {
          name: "bar"
          description: "Foo bar"
          apiDefinitions: [
            {
              name: "comments-v1"
              description: "api for adding comments"
              targetURL: "http://mywordpress.com/comments"
              group: "comments"
              spec: {
                data: "{\"openapi\":\"3.0.2\"}"
                type: OPEN_API
                format: YAML
              }
              version: {
                value: "v1"
                deprecated: true
                deprecatedSince: "v5"
                forRemoval: true
              }
            }
            {
              name: "reviews-v1"
              targetURL: "http://mywordpress.com/reviews"
              spec: {
                type: ODATA
                format: JSON
                fetchRequest: {
                  url: "http://mywordpress.com/apis"
                  auth: {
                    credential: {
                      basic: { username: "admin", password: "secret" }
                    }
                    additionalHeaders: {
                      headerA: ["ha1", "ha2"]
                      headerB: ["hb1", "hb2"]
                    }
                    additionalQueryParams: {
                      qA: ["qa1", "qa2"]
                      qB: ["qb1", "qb2"]
                    }
                  }
                  mode: PACKAGE
                  filter: "odata.json"
                }
              }
            }
            {
              name: "xml"
              targetURL: "http://mywordpress.com/xml"
              spec: { data: "odata", type: ODATA, format: XML }
            }
          ]
          eventDefinitions: [
            {
              name: "comments-v1"
              description: "comments events"
              spec: {
                data: "{\"asyncapi\":\"1.2.0\"}"
                type: ASYNC_API
                format: YAML
              }
              group: "comments"
              version: {
                value: "v1"
                deprecated: true
                deprecatedSince: "v5"
                forRemoval: true
              }
            }
            {
              name: "reviews-v1"
              description: "review events"
              spec: {
                type: ASYNC_API
                fetchRequest: {
                  url: "http://mywordpress.com/events"
                  auth: {
                    credential: {
                      oauth: {
                        clientId: "clientid"
                        clientSecret: "grazynasecret"
                        url: "url.net"
                      }
                    }
                  }
                  mode: PACKAGE
                  filter: "async.json"
                }
                format: YAML
              }
            }
          ]
          documents: [
            {
              title: "Readme"
              displayName: "display-name"
              description: "Detailed description of project"
              format: MARKDOWN
              fetchRequest: {
                url: "kyma-project.io"
                auth: {
                  credential: {
                    basic: { username: "admin", password: "secret" }
                  }
                  additionalHeaders: {
                    headerA: ["ha1", "ha2"]
                    headerB: ["hb1", "hb2"]
                  }
                  additionalQueryParams: {
                    qA: ["qa1", "qa2"]
                    qB: ["qb1", "qb2"]
                  }
                }
                mode: PACKAGE
                filter: "/docs/README.md"
              }
            }
            {
              title: "Troubleshooting"
              displayName: "display-name"
              description: "Troubleshooting description"
              format: MARKDOWN
              data: "No problems, everything works on my machine"
            }
          ]
        }
      ]
    }
  ) {
    id
    name
    providerName
    description
    integrationSystemID
    labels
    status {
      condition
      timestamp
    }
    webhooks {
      id
      applicationID
      type
      url
      auth {
        credential {
          ... on BasicCredentialData {
            username
            password
          }
          ... on OAuthCredentialData {
            clientId
            clientSecret
            url
          }
        }
        additionalHeaders
        additionalQueryParams
        requestAuth {
          csrf {
            tokenEndpointURL
            credential {
              ... on BasicCredentialData {
                username
                password
              }
              ... on OAuthCredentialData {
                clientId
                clientSecret
                url
              }
            }
            additionalHeaders
            additionalQueryParams
          }
        }
      }
    }
    healthCheckURL
    packages {
      data {
        id
        name
        description
        instanceAuthRequestInputSchema
        instanceAuths {
          id
          context
          inputParams
          auth {
            credential {
              ... on BasicCredentialData {
                username
                password
              }
              ... on OAuthCredentialData {
                clientId
                clientSecret
                url
              }
            }
            additionalHeaders
            additionalQueryParams
            requestAuth {
              csrf {
                tokenEndpointURL
                credential {
                  ... on BasicCredentialData {
                    username
                    password
                  }
                  ... on OAuthCredentialData {
                    clientId
                    clientSecret
                    url
                  }
                }
                additionalHeaders
                additionalQueryParams
              }
            }
          }
          status {
            condition
            timestamp
            message
            reason
          }
        }
        defaultInstanceAuth {
          credential {
            ... on BasicCredentialData {
              username
              password
            }
            ... on OAuthCredentialData {
              clientId
              clientSecret
              url
            }
          }
          additionalHeaders
          additionalQueryParams
          requestAuth {
            csrf {
              tokenEndpointURL
              credential {
                ... on BasicCredentialData {
                  username
                  password
                }
                ... on OAuthCredentialData {
                  clientId
                  clientSecret
                  url
                }
              }
              additionalHeaders
              additionalQueryParams
            }
          }
        }
        apiDefinitions {
          data {
            id
            name
            description
            spec {
              data
              format
              type
              fetchRequest {
                url
                auth {
                  credential {
                    ... on BasicCredentialData {
                      username
                      password
                    }
                    ... on OAuthCredentialData {
                      clientId
                      clientSecret
                      url
                    }
                  }
                  additionalHeaders
                  additionalQueryParams
                  requestAuth {
                    csrf {
                      tokenEndpointURL
                      credential {
                        ... on BasicCredentialData {
                          username
                          password
                        }
                        ... on OAuthCredentialData {
                          clientId
                          clientSecret
                          url
                        }
                      }
                      additionalHeaders
                      additionalQueryParams
                    }
                  }
                }
                mode
                filter
                status {
                  condition
                  timestamp
                }
              }
            }
            targetURL
            group
            version {
              value
              deprecated
              deprecatedSince
              forRemoval
            }
          }
          pageInfo {
            startCursor
            endCursor
            hasNextPage
          }
          totalCount
        }
        eventDefinitions {
          data {
            id
            name
            description
            group
            spec {
              data
              type
              format
              fetchRequest {
                url
                auth {
                  credential {
                    ... on BasicCredentialData {
                      username
                      password
                    }
                    ... on OAuthCredentialData {
                      clientId
                      clientSecret
                      url
                    }
                  }
                  additionalHeaders
                  additionalQueryParams
                  requestAuth {
                    csrf {
                      tokenEndpointURL
                      credential {
                        ... on BasicCredentialData {
                          username
                          password
                        }
                        ... on OAuthCredentialData {
                          clientId
                          clientSecret
                          url
                        }
                      }
                      additionalHeaders
                      additionalQueryParams
                    }
                  }
                }
                mode
                filter
                status {
                  condition
                  timestamp
                }
              }
            }
            version {
              value
              deprecated
              deprecatedSince
              forRemoval
            }
          }
          pageInfo {
            startCursor
            endCursor
            hasNextPage
          }
          totalCount
        }
        documents {
          data {
            id
            title
            displayName
            description
            format
            kind
            data
            fetchRequest {
              url
              auth {
                credential {
                  ... on BasicCredentialData {
                    username
                    password
                  }
                  ... on OAuthCredentialData {
                    clientId
                    clientSecret
                    url
                  }
                }
                additionalHeaders
                additionalQueryParams
                requestAuth {
                  csrf {
                    tokenEndpointURL
                    credential {
                      ... on BasicCredentialData {
                        username
                        password
                      }
                      ... on OAuthCredentialData {
                        clientId
                        clientSecret
                        url
                      }
                    }
                    additionalHeaders
                    additionalQueryParams
                  }
                }
              }
              mode
              filter
              status {
                condition
                timestamp
              }
            }
          }
          pageInfo {
            startCursor
            endCursor
            hasNextPage
          }
          totalCount
        }
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
      }
      totalCount
    }
    auths {
      id
      auth {
        credential {
          ... on BasicCredentialData {
            username
            password
          }
          ... on OAuthCredentialData {
            clientId
            clientSecret
            url
          }
        }
        additionalHeaders
        additionalQueryParams
        requestAuth {
          csrf {
            tokenEndpointURL
            credential {
              ... on BasicCredentialData {
                username
                password
              }
              ... on OAuthCredentialData {
                clientId
                clientSecret
                url
              }
            }
            additionalHeaders
            additionalQueryParams
          }
        }
      }
    }
    eventingConfiguration {
      defaultURL
    }
  }
}
