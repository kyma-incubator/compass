// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
	mock "github.com/stretchr/testify/mock"
)

// DirectorClient is an autogenerated mock type for the DirectorClient type
type DirectorClient struct {
	mock.Mock
}

// GetRuntimeByTokenIssuer provides a mock function with given fields: ctx, issuer
func (_m *DirectorClient) GetRuntimeByTokenIssuer(ctx context.Context, issuer string) (*graphql.Runtime, error) {
	ret := _m.Called(ctx, issuer)

	var r0 *graphql.Runtime
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*graphql.Runtime, error)); ok {
		return rf(ctx, issuer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *graphql.Runtime); ok {
		r0 = rf(ctx, issuer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphql.Runtime)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, issuer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantByInternalID provides a mock function with given fields: ctx, tenantID
func (_m *DirectorClient) GetTenantByInternalID(ctx context.Context, tenantID string) (*graphql.Tenant, error) {
	ret := _m.Called(ctx, tenantID)

	var r0 *graphql.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*graphql.Tenant, error)); ok {
		return rf(ctx, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *graphql.Tenant); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphql.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantByLowestOwnerForResource provides a mock function with given fields: ctx, resourceID, resourceType
func (_m *DirectorClient) GetTenantByLowestOwnerForResource(ctx context.Context, resourceID string, resourceType string) (string, error) {
	ret := _m.Called(ctx, resourceID, resourceType)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, resourceID, resourceType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, resourceID, resourceType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, resourceID, resourceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDirectorClient creates a new instance of DirectorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDirectorClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DirectorClient {
	mock := &DirectorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
