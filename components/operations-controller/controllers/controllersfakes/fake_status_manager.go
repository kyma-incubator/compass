// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"context"
	"sync"

	"github.com/kyma-incubator/compass/components/operations-controller/api/v1alpha1"
	"github.com/kyma-incubator/compass/components/operations-controller/controllers"
)

type FakeStatusManager struct {
	FailedStatusStub        func(context.Context, *v1alpha1.Operation, string) error
	failedStatusMutex       sync.RWMutex
	failedStatusArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Operation
		arg3 string
	}
	failedStatusReturns struct {
		result1 error
	}
	failedStatusReturnsOnCall map[int]struct {
		result1 error
	}
	InProgressWithPollURLStub        func(context.Context, *v1alpha1.Operation, string) error
	inProgressWithPollURLMutex       sync.RWMutex
	inProgressWithPollURLArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Operation
		arg3 string
	}
	inProgressWithPollURLReturns struct {
		result1 error
	}
	inProgressWithPollURLReturnsOnCall map[int]struct {
		result1 error
	}
	InProgressWithPollURLAndLastPollTimestampStub        func(context.Context, *v1alpha1.Operation, string, string, int) error
	inProgressWithPollURLAndLastPollTimestampMutex       sync.RWMutex
	inProgressWithPollURLAndLastPollTimestampArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Operation
		arg3 string
		arg4 string
		arg5 int
	}
	inProgressWithPollURLAndLastPollTimestampReturns struct {
		result1 error
	}
	inProgressWithPollURLAndLastPollTimestampReturnsOnCall map[int]struct {
		result1 error
	}
	InitializeStub        func(*v1alpha1.Operation) error
	initializeMutex       sync.RWMutex
	initializeArgsForCall []struct {
		arg1 *v1alpha1.Operation
	}
	initializeReturns struct {
		result1 error
	}
	initializeReturnsOnCall map[int]struct {
		result1 error
	}
	SuccessStatusStub        func(context.Context, *v1alpha1.Operation) error
	successStatusMutex       sync.RWMutex
	successStatusArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Operation
	}
	successStatusReturns struct {
		result1 error
	}
	successStatusReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStatusManager) FailedStatus(arg1 context.Context, arg2 *v1alpha1.Operation, arg3 string) error {
	fake.failedStatusMutex.Lock()
	ret, specificReturn := fake.failedStatusReturnsOnCall[len(fake.failedStatusArgsForCall)]
	fake.failedStatusArgsForCall = append(fake.failedStatusArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Operation
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("FailedStatus", []interface{}{arg1, arg2, arg3})
	fake.failedStatusMutex.Unlock()
	if fake.FailedStatusStub != nil {
		return fake.FailedStatusStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.failedStatusReturns
	return fakeReturns.result1
}

func (fake *FakeStatusManager) FailedStatusCallCount() int {
	fake.failedStatusMutex.RLock()
	defer fake.failedStatusMutex.RUnlock()
	return len(fake.failedStatusArgsForCall)
}

func (fake *FakeStatusManager) FailedStatusCalls(stub func(context.Context, *v1alpha1.Operation, string) error) {
	fake.failedStatusMutex.Lock()
	defer fake.failedStatusMutex.Unlock()
	fake.FailedStatusStub = stub
}

func (fake *FakeStatusManager) FailedStatusArgsForCall(i int) (context.Context, *v1alpha1.Operation, string) {
	fake.failedStatusMutex.RLock()
	defer fake.failedStatusMutex.RUnlock()
	argsForCall := fake.failedStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStatusManager) FailedStatusReturns(result1 error) {
	fake.failedStatusMutex.Lock()
	defer fake.failedStatusMutex.Unlock()
	fake.FailedStatusStub = nil
	fake.failedStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStatusManager) FailedStatusReturnsOnCall(i int, result1 error) {
	fake.failedStatusMutex.Lock()
	defer fake.failedStatusMutex.Unlock()
	fake.FailedStatusStub = nil
	if fake.failedStatusReturnsOnCall == nil {
		fake.failedStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.failedStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStatusManager) InProgressWithPollURL(arg1 context.Context, arg2 *v1alpha1.Operation, arg3 string) error {
	fake.inProgressWithPollURLMutex.Lock()
	ret, specificReturn := fake.inProgressWithPollURLReturnsOnCall[len(fake.inProgressWithPollURLArgsForCall)]
	fake.inProgressWithPollURLArgsForCall = append(fake.inProgressWithPollURLArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Operation
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("InProgressWithPollURL", []interface{}{arg1, arg2, arg3})
	fake.inProgressWithPollURLMutex.Unlock()
	if fake.InProgressWithPollURLStub != nil {
		return fake.InProgressWithPollURLStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.inProgressWithPollURLReturns
	return fakeReturns.result1
}

func (fake *FakeStatusManager) InProgressWithPollURLCallCount() int {
	fake.inProgressWithPollURLMutex.RLock()
	defer fake.inProgressWithPollURLMutex.RUnlock()
	return len(fake.inProgressWithPollURLArgsForCall)
}

func (fake *FakeStatusManager) InProgressWithPollURLCalls(stub func(context.Context, *v1alpha1.Operation, string) error) {
	fake.inProgressWithPollURLMutex.Lock()
	defer fake.inProgressWithPollURLMutex.Unlock()
	fake.InProgressWithPollURLStub = stub
}

func (fake *FakeStatusManager) InProgressWithPollURLArgsForCall(i int) (context.Context, *v1alpha1.Operation, string) {
	fake.inProgressWithPollURLMutex.RLock()
	defer fake.inProgressWithPollURLMutex.RUnlock()
	argsForCall := fake.inProgressWithPollURLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStatusManager) InProgressWithPollURLReturns(result1 error) {
	fake.inProgressWithPollURLMutex.Lock()
	defer fake.inProgressWithPollURLMutex.Unlock()
	fake.InProgressWithPollURLStub = nil
	fake.inProgressWithPollURLReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStatusManager) InProgressWithPollURLReturnsOnCall(i int, result1 error) {
	fake.inProgressWithPollURLMutex.Lock()
	defer fake.inProgressWithPollURLMutex.Unlock()
	fake.InProgressWithPollURLStub = nil
	if fake.inProgressWithPollURLReturnsOnCall == nil {
		fake.inProgressWithPollURLReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.inProgressWithPollURLReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStatusManager) InProgressWithPollURLAndLastPollTimestamp(arg1 context.Context, arg2 *v1alpha1.Operation, arg3 string, arg4 string, arg5 int) error {
	fake.inProgressWithPollURLAndLastPollTimestampMutex.Lock()
	ret, specificReturn := fake.inProgressWithPollURLAndLastPollTimestampReturnsOnCall[len(fake.inProgressWithPollURLAndLastPollTimestampArgsForCall)]
	fake.inProgressWithPollURLAndLastPollTimestampArgsForCall = append(fake.inProgressWithPollURLAndLastPollTimestampArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Operation
		arg3 string
		arg4 string
		arg5 int
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("InProgressWithPollURLAndLastPollTimestamp", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.inProgressWithPollURLAndLastPollTimestampMutex.Unlock()
	if fake.InProgressWithPollURLAndLastPollTimestampStub != nil {
		return fake.InProgressWithPollURLAndLastPollTimestampStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.inProgressWithPollURLAndLastPollTimestampReturns
	return fakeReturns.result1
}

func (fake *FakeStatusManager) InProgressWithPollURLAndLastPollTimestampCallCount() int {
	fake.inProgressWithPollURLAndLastPollTimestampMutex.RLock()
	defer fake.inProgressWithPollURLAndLastPollTimestampMutex.RUnlock()
	return len(fake.inProgressWithPollURLAndLastPollTimestampArgsForCall)
}

func (fake *FakeStatusManager) InProgressWithPollURLAndLastPollTimestampCalls(stub func(context.Context, *v1alpha1.Operation, string, string, int) error) {
	fake.inProgressWithPollURLAndLastPollTimestampMutex.Lock()
	defer fake.inProgressWithPollURLAndLastPollTimestampMutex.Unlock()
	fake.InProgressWithPollURLAndLastPollTimestampStub = stub
}

func (fake *FakeStatusManager) InProgressWithPollURLAndLastPollTimestampArgsForCall(i int) (context.Context, *v1alpha1.Operation, string, string, int) {
	fake.inProgressWithPollURLAndLastPollTimestampMutex.RLock()
	defer fake.inProgressWithPollURLAndLastPollTimestampMutex.RUnlock()
	argsForCall := fake.inProgressWithPollURLAndLastPollTimestampArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeStatusManager) InProgressWithPollURLAndLastPollTimestampReturns(result1 error) {
	fake.inProgressWithPollURLAndLastPollTimestampMutex.Lock()
	defer fake.inProgressWithPollURLAndLastPollTimestampMutex.Unlock()
	fake.InProgressWithPollURLAndLastPollTimestampStub = nil
	fake.inProgressWithPollURLAndLastPollTimestampReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStatusManager) InProgressWithPollURLAndLastPollTimestampReturnsOnCall(i int, result1 error) {
	fake.inProgressWithPollURLAndLastPollTimestampMutex.Lock()
	defer fake.inProgressWithPollURLAndLastPollTimestampMutex.Unlock()
	fake.InProgressWithPollURLAndLastPollTimestampStub = nil
	if fake.inProgressWithPollURLAndLastPollTimestampReturnsOnCall == nil {
		fake.inProgressWithPollURLAndLastPollTimestampReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.inProgressWithPollURLAndLastPollTimestampReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStatusManager) Initialize(arg1 *v1alpha1.Operation) error {
	fake.initializeMutex.Lock()
	ret, specificReturn := fake.initializeReturnsOnCall[len(fake.initializeArgsForCall)]
	fake.initializeArgsForCall = append(fake.initializeArgsForCall, struct {
		arg1 *v1alpha1.Operation
	}{arg1})
	fake.recordInvocation("Initialize", []interface{}{arg1})
	fake.initializeMutex.Unlock()
	if fake.InitializeStub != nil {
		return fake.InitializeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.initializeReturns
	return fakeReturns.result1
}

func (fake *FakeStatusManager) InitializeCallCount() int {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	return len(fake.initializeArgsForCall)
}

func (fake *FakeStatusManager) InitializeCalls(stub func(*v1alpha1.Operation) error) {
	fake.initializeMutex.Lock()
	defer fake.initializeMutex.Unlock()
	fake.InitializeStub = stub
}

func (fake *FakeStatusManager) InitializeArgsForCall(i int) *v1alpha1.Operation {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	argsForCall := fake.initializeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStatusManager) InitializeReturns(result1 error) {
	fake.initializeMutex.Lock()
	defer fake.initializeMutex.Unlock()
	fake.InitializeStub = nil
	fake.initializeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStatusManager) InitializeReturnsOnCall(i int, result1 error) {
	fake.initializeMutex.Lock()
	defer fake.initializeMutex.Unlock()
	fake.InitializeStub = nil
	if fake.initializeReturnsOnCall == nil {
		fake.initializeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initializeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStatusManager) SuccessStatus(arg1 context.Context, arg2 *v1alpha1.Operation) error {
	fake.successStatusMutex.Lock()
	ret, specificReturn := fake.successStatusReturnsOnCall[len(fake.successStatusArgsForCall)]
	fake.successStatusArgsForCall = append(fake.successStatusArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Operation
	}{arg1, arg2})
	fake.recordInvocation("SuccessStatus", []interface{}{arg1, arg2})
	fake.successStatusMutex.Unlock()
	if fake.SuccessStatusStub != nil {
		return fake.SuccessStatusStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.successStatusReturns
	return fakeReturns.result1
}

func (fake *FakeStatusManager) SuccessStatusCallCount() int {
	fake.successStatusMutex.RLock()
	defer fake.successStatusMutex.RUnlock()
	return len(fake.successStatusArgsForCall)
}

func (fake *FakeStatusManager) SuccessStatusCalls(stub func(context.Context, *v1alpha1.Operation) error) {
	fake.successStatusMutex.Lock()
	defer fake.successStatusMutex.Unlock()
	fake.SuccessStatusStub = stub
}

func (fake *FakeStatusManager) SuccessStatusArgsForCall(i int) (context.Context, *v1alpha1.Operation) {
	fake.successStatusMutex.RLock()
	defer fake.successStatusMutex.RUnlock()
	argsForCall := fake.successStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStatusManager) SuccessStatusReturns(result1 error) {
	fake.successStatusMutex.Lock()
	defer fake.successStatusMutex.Unlock()
	fake.SuccessStatusStub = nil
	fake.successStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStatusManager) SuccessStatusReturnsOnCall(i int, result1 error) {
	fake.successStatusMutex.Lock()
	defer fake.successStatusMutex.Unlock()
	fake.SuccessStatusStub = nil
	if fake.successStatusReturnsOnCall == nil {
		fake.successStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.successStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStatusManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.failedStatusMutex.RLock()
	defer fake.failedStatusMutex.RUnlock()
	fake.inProgressWithPollURLMutex.RLock()
	defer fake.inProgressWithPollURLMutex.RUnlock()
	fake.inProgressWithPollURLAndLastPollTimestampMutex.RLock()
	defer fake.inProgressWithPollURLAndLastPollTimestampMutex.RUnlock()
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	fake.successStatusMutex.RLock()
	defer fake.successStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStatusManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.StatusManager = new(FakeStatusManager)
