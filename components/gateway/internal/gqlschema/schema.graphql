# Scalars

scalar Timestamp

scalar Tenant # -> String

scalar Labels # -> map[string]string

scalar Annotations # -> map[string]interface{}

scalar HttpHeaders # -> map[string][]string

scalar JSON # -> map[string]interface{}

# Runtime

type Runtime {
    id: ID!
    name: String!
    description: String
    tenant: Tenant!
    labels(key: String): Labels!
    annotations: Annotations!
    agentCredentials: Credential
    status: RuntimeStatus!
}

type RuntimeStatus {
    condition: RuntimeStatusCondition!
    timestamp: Timestamp!
}

enum RuntimeStatusCondition {
    INITIAL
    READY
    FAILED
}

# Application

type Application {
    id: ID!
    name: String!
    tenant: Tenant!
    description: String
    labels(key: String): Labels!
    annotations: Annotations!
    status: ApplicationStatus!
    webhooks: [ApplicationWebhook!]!
    apis: [API!]
    events: [Event!]
    docs: [Documentation!]
}

type ApplicationStatus {
    condition: ApplicationStatusCondition!
    timestamp: Timestamp!
}

enum ApplicationStatusCondition {
    INITIAL 
    UNKNOWN
    READY
    FAILED
}

type ApplicationWebhook {
    type: ApplicationWebhookType! # TODO: enum or union? Do we want to extend a specific type? It would be good to be consistent... (enum)
    url: String!
    credential: Credential
}

enum ApplicationWebhookType {
    HEALTH_CHECK
    CONFIGURATION
}

# API

type API {
    id: ID!
    spec: APISpec!
    targetURL: String!
    credential: Credential
    headers: HttpHeaders
    fetchRequest: FetchRequest
}

type APISpec {
    type: APISpecType! # TODO: enum or union? Do we want to extend a specific type? We cannot drop `data` and define some fields. But it would be good to be consistent... (enum)
    data: JSON!
}

enum APISpecType {
    O_DATA
    OPEN_API
}

# Event

type Event {
    id: ID!
    spec: EventSpec!
    fetchRequest: FetchRequest
}

type EventSpec {
    type: EventSpecType! # TODO: enum or union? Do we want to extend a specific type? We cannot drop `data` and define some fields. But it would be good to be consistent... (enum)
    data: JSON!
}

enum EventSpecType {
    ASYNC_API
}

# Documentation

type Documentation {
    id: ID!
    spec: DocumentationSpec!
    fetchRequest: FetchRequest
}

type DocumentationSpec {
    type: DocumentationSpecType!
    data: String!
}

enum DocumentationSpecType {
    MARKDOWN
}

# FetchRequest

type FetchRequest {
    url: String
    credential: Credential
    status: FetchRequestStatus!
}

type FetchRequestStatus {
    condition: FetchRequestStatusCondition!
    timestamp: Timestamp!
}

enum FetchRequestStatusCondition {
    INITIAL
    SUCCEEDED
    FAILED
}

# Credential

type Credential {
    id: ID!
    data: CredentialData!
    requestAuth: CredentialRequestAuth
}

union CredentialRequestAuth = CsrfTokenCredentialRequestAuth

type CsrfTokenCredentialRequestAuth {
    token: String!
}

# in queries we can use __typename
union CredentialData = OAuthCredentialData | BasicCredentialData

type OAuthCredentialData {
    clientId: ID!
    clientSecret: String!
    url: String!
}

type BasicCredentialData {
    username: String!
    password: String!
}

# HealthCheck

interface HealthCheckStatus { #TODO: Interface seems like a good choice, but to remain consistant we could use enum or union
    origin: ID!
}

enum HealthCheckStatusCondition {
    SUCCEEDED # TODO: doesn't look good... maybe we should unify all 'Success' values
    FAILED
}

enum HealthCheckStatusOrigin {
    MANAGEMENT_PLANE
    RUNTIME
}

type ManagementPlaneHealthCheck implements HealthCheckStatus {
    origin: ID!
    condition: HealthCheckStatusCondition!
    message: String
    timestamp: Timestamp!
}

# You cannot extend interfaces in GraphQL, so I figured out that maybe we can consolidate different types.
# TODO: Discuss it
type RuntimeHealthCheck implements HealthCheckStatus {
    origin: ID!
    agent: RuntimeHealthCheckPartialStatus!
    events: RuntimeHealthCheckPartialStatus
    gateway: RuntimeHealthCheckPartialStatus
}

type RuntimeHealthCheckPartialStatus {
    condition: HealthCheckStatusCondition!
    message: String
    timestamp: Timestamp!
}


# ------------------------------------------


type Label {
    key: String!
    value: String!
}

type Annotation {
    key: String!
    value: JSON! #TODO: maybe we should use serialized string instead? Further discussion needed
}

# Application Input

input ApplicationInput {
    name: String!
    description: String
    labels: Labels
    annotations: Annotations
    apis: [APIInput!]
    events: [EventInput!]
    documentations: [DocumentationInput!]
}

# Runtime Input

input RuntimeInput {
    name: String!
    labels: Labels
    annotations: Annotations
#    agentCredentials: Credential #TODO: nested
}

# FetchRequest Input

input FetchRequestInput {
    url: String
#    credential: Credential #TODO: nested
}

# API Input

input APIInput {
    spec: APISpecInput
    fetchRequest: FetchRequestInput
    targetURL: String!
#    credential: Credential #TODO: nested
    headers: HttpHeaders
}

input APISpecInput {
    type: APISpecType!
    data: JSON!
}

# Event Input

input EventInput {
    spec: EventSpecInput
    fetchRequest: FetchRequestInput
}

input EventSpecInput {
    type: EventSpecType!
    data: JSON!
}

# Documentation Input

input DocumentationInput {
    spec: DocumentationSpecInput
    fetchRequest: FetchRequestInput
}

input DocumentationSpecInput {
    type: DocumentationSpecType!
    data: String!
}

#

type Query {
    applications: [Application!]!
    application(id: ID!): Application

    runtimes: [Runtime!]!
    runtime(id: ID!): Runtime

    healthchecks(origin: ID, type: HealthCheckStatusOrigin, labels: [String!]): [HealthCheckStatus!]! # Has to be validated at runtime

    labels(key: String): [Labels!]!
}

#TODO: Updates @TG
type Mutation {
    createApplication(in: ApplicationInput!): Application
    deleteApplication(id: ID!): Application
    createApplicationLabel(applicationID: ID!, label: String!, value: String!): Label
    deleteApplicationLabel(id: ID!, label: String!): Label
    createApplicationAnnotation(applicationID: ID!, annotation: String!, value: JSON!): Annotation
    deleteApplicationAnnotation(id: ID!, label: String!): Annotation
    createAPI(applicationID: ID!, in: APIInput!): API
    #createAPICredential(apiID: ID!, in: ) #TODO:
    deleteAPI(id: ID!): API
    createEvent(applicationID: ID!, in: EventInput!): Event
    deleteEvent(id: ID!): Event
    createDoc(applicationID: ID!, in: DocumentationInput!): Documentation
    deleteDoc(id: ID!): Documentation

    createRuntime(in: RuntimeInput!): Runtime
    deleteRuntime(id: ID!): Runtime
    createRuntimeLabel(runtimeID: ID!, label: String!, value: String!): Label
    deleteRuntimeLabel(id: ID!, label: String!): Label
    createRuntimeAnnotation(runtimeID: ID!, annotation: String!, value: JSON!): Annotation
    deleteRuntimeAnnotation(id: ID!, annotation: String!): Annotation

    #createHealthcheck

}
