# Scalars

scalar Timestamp

scalar Tenant # -> String

scalar Labels # -> map[string]string #TODO: Maybe it should be just an array of Label? [Label!]

scalar Annotations # -> map[string]interface{}

scalar HttpHeaders # -> map[string][]string

scalar JSON # -> map[string]interface{}

# Runtime

type Runtime {
    id: ID!
    name: String!
    tenant: Tenant!
    labels: Labels!
    annotations: Annotations!
    agentCredentials: Credential
    status: RuntimeStatus!
}

type RuntimeStatus {
    condition: RuntimeStatusCondition!
    timestamp: Timestamp!
}

enum RuntimeStatusCondition {
    INITIAL
    READY
    FAILED
}

# Application

type Application {
    id: ID!
    name: String!
    tenant: Tenant!
    description: String
    labels: Labels
    annotations: Annotations
    status: ApplicationStatus!
    webhooks: [ApplicationWebhook!]
    apis: [Api!]
    events: [Event!]
    docs: [Document!]
}

type ApplicationStatus {
    condition: ApplicationStatusCondition!
    timestamp: Timestamp!
}

enum ApplicationStatusCondition {
    INITIAL 
    UNKNOWN
    READY
    FAILED
}

type ApplicationWebhook {
    type: ApplicationWebhookType! # TODO: enum or union? Do we want to extend a specific type? It would be good to be consistent...
    url: String!
    credential: Credential
}

enum ApplicationWebhookType {
    HEALTH_CHECK
    CONFIGURATION
}

# API

type Api {
    spec: ApiSpec!
    targetURL: String!
    credential: Credential
    headers: HttpHeaders
}

type ApiSpec {
    type: ApiSpecType! # TODO: enum or union? Do we want to extend a specific type? We cannot drop `data` and define some fields. But it would be good to be consistent...
    data: JSON!
    fetchRequest: FetchRequest
}

enum ApiSpecType {
    O_DATA
    OPEN_API
}

# Event

type Event {
    spec: EventSpec!
    fetchRequest: FetchRequest
}

type EventSpec {
    type: EventSpecType! # TODO: enum or union? Do we want to extend a specific type? We cannot drop `data` and define some fields. But it would be good to be consistent...
    data: JSON!
}

enum EventSpecType {
    ASYNC_API
}

# Document

type Document {
    #TODO: Do we need type? Ask Łukasz
    data: String! # TODO: String or JSON? Ask Łukasz
    fetchRequest: FetchRequest
}

# TODO: Do we need this? Ask Łukasz Gornicki
enum DocumentType {
    MARKDOWN
}

# FetchRequest

type FetchRequest {
    url: String
    credential: Credential
    status: FetchRequestStatus!
}

type FetchRequestStatus {
    condition: FetchRequestStatusCondition!
    timestamp: Timestamp!
}

enum FetchRequestStatusCondition {
    INITIAL
    SUCCEEDED
    FAILED
}

# Credential

type Credential {
    id: ID!
    data: CredentialData!
    requestAuth: CredentialRequestAuth
}

union CredentialRequestAuth = CsrfTokenCredentialRequestAuth

type CsrfTokenCredentialRequestAuth {
    token: String!
}

# in queries we can use __typename
union CredentialData = OAuthCredentialData | BasicCredentialData

type OAuthCredentialData {
    clientId: String!
    clientSecret: String!
    url: String!
}

type BasicCredentialData {
    username: String!
    password: String!
}

# HealthCheck

union HealthCheckStatus = ManagementPlaneHealthCheck | RuntimeHealthCheck

interface HealthCheckStatusBase {
    origin: HealthCheckStatusOrigin!
}

enum HealthCheckStatusCondition {
    SUCCEEDED # TODO: doesn't look good... maybe we should unify all 'Success' values
    FAILED
}

enum HealthCheckStatusOrigin {
    MANAGEMENT_PLANE
    RUNTIME
}

type ManagementPlaneHealthCheck implements HealthCheckStatusBase {
    origin: HealthCheckStatusOrigin!
    condition: HealthCheckStatusCondition!
    message: String
    timestamp: Timestamp!
}

# You cannot extend interfaces in GraphQL, so I figured out that maybe we can consolidate different types.
# TODO: Discuss it
type RuntimeHealthCheck implements HealthCheckStatusBase {
    origin: HealthCheckStatusOrigin!
    runtimeId: ID!
    agent: RuntimeHealthCheckPartialStatus!
    events: RuntimeHealthCheckPartialStatus
    gateway: RuntimeHealthCheckPartialStatus
}

type RuntimeHealthCheckPartialStatus {
    condition: HealthCheckStatusCondition!
    message: String
    timestamp: Timestamp!
}


# ------------------------------------------


type Label {
    key: String
    value: String
}


input ApplicationInput {
    name: String!
    description: String
    labels: Labels
#    annotations: Annotations
    apis: [ApiInput!]
    events: [EventInput!]
    documentations: [DocumentationInput!]
}


input ApiInput {
    tbd: String
}

input EventInput {
    tbd: String
}

input DocumentationInput {
    tbd: String
}
#

type Query {
    applications: [Application!]!
    application(id: ID!): Application

    runtimes: [Runtime!]!
    runtime(id: ID!): Runtime
}

type Mutation {
    createApplication(in: ApplicationInput!): Application
    deleteApplication(id: String!): Application
    createApplicationLabel(id: ID!, label: String!, value: String!): Label
    deleteApplicationLabel(id: ID!, label: String!): Label
    createApiDef: String
    deleteApiDef: String
    createEventDef: String
    deleteEventDef: String
    createDocsDef: String
    deleteDocsDef: String

    createRuntime:String
    deleteRuntime: String
    createRuntimeLabel(id: ID!, label: String!, value: String!): String
    deleteRuntimeLabel(id: ID!, label: String!): String

}