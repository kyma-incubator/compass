# Scalars

scalar Timestamp

scalar Tenant

scalar Labels
scalar Annotations

scalar JSON # TODO: Is this needed?

# Runtime

type Runtime {
    id: ID!
    name: String!
    tenant: Tenant!
    labels: Labels!
    annotations: Annotations!
    agentCredentials: Credentials
    status: RuntimeStatus!
}

type RuntimeStatus {
    condition: RuntimeStatusCondition!
    timestamp: Timestamp!
}

enum RuntimeStatusCondition {
    INITIAL
    READY
    FAILED
}

# Application

type Application {
    id: ID!
    name: String!
    tenant: Tenant!
    #description: String #TODO: Can't we use annotations for storing?
    labels: Labels
    annotations: Annotations
    status: ApplicationStatus!

    apis: [Api!]
    events: [Event!]
    docs: [Document!]

    #TODO:L
    webhooks: [ApplicationWebhook!]
}

# type APplicationWebhook {
#     type: 
# }

type ApplicationStatus {
    condition: ApplicationStatusCondition!
    timestamp: Timestamp!
}

enum ApplicationStatusCondition {
    INITIAL 
    UNKNOWN
    READY
    FAILED
}

type Api {
    targetURL: String!
    spec: ConcreateAPiSpec
    credentials: Credentials
    specFetchRequest: FetchRequest
    # TODO headers
}

type Event {
    tbd: String
    spec: ConcreteEventSpec
    credentials: Credentials
    specFetchRequest: FetchRequest
}

type Document {
    tbd: String
    content: String
    contentFetchRequest: FetchRequest
}













# TODO: ???
type Label {
    key: String
    value: String
}


input ApplicationInput {
    name: String!
    description: String
    labels: Labels
#    annotations: Annotations
    apis: [ApiInput!]
    events: [EventInput!]
    documentations: [DocumentationInput!]
}



type Credentials {
    id: ID!
    data: ConcreteCredential!
    requestAuth: Credentials
}

# in queries we can use __typename
union ConcreteCredential = OauthCredential | BasicCredential

type OauthCredential {
    tbd: String
}

type BasicCredential {
    tbd: String
}





input ApiInput {
    tbd: String
}

type FetchRequest {
    url: String
    credentials: Credentials
}

union ConcreateAPiSpec = OdataApiSpec | OpenApiSpec

type OdataApiSpec {
    tbd: String
}

type OpenApiSpec {
    tbd: String
}

input EventInput {
    tbd: String
}


input DocumentationInput {
    tbd: String
}




union ConcreteEventSpec = AsyncApiSpec

type AsyncApiSpec {
    tbd: String
}

#

type Query {
    applications: [Application!]!
    application(id: ID!): Application

    runtimes: [Runtime!]!
    runtime(id: ID!): Runtime
}

type Mutation {
    createApplication(in: ApplicationInput!): Application
    deleteApplication(id: String!): Application
    createApplicationLabel(id: ID!, label: String!, value: String!): Label
    deleteApplicationLabel(id: ID!, label: String!): Label
    createApiDef: String
    deleteApiDef: String
    createEventDef: String
    deleteEventDef: String
    createDocsDef: String
    deleteDocsDef: String


    createRuntime:String
    deleteRuntime: String
    createRuntimeLabel(id: ID!, label: String!, value: String!): String
    deleteRuntimeLabel(id: ID!, label: String!): String

}