// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlschema

import (
	"fmt"
	"io"
	"strconv"
)

type HealthCheckStatus interface {
	IsHealthCheckStatus()
}

type API struct {
	ID         string      `json:"id"`
	Spec       *APISpec    `json:"spec"`
	TargetURL  string      `json:"targetURL"`
	Credential *Credential `json:"credential"`
	Headers    *string     `json:"headers"`
}

type APIInput struct {
	Type         APISpecType        `json:"type"`
	TargetURL    string             `json:"targetURL"`
	Data         *string            `json:"data"`
	FetchRequest *FetchRequestInput `json:"fetchRequest"`
	Credential   *CredentialInput   `json:"credential"`
	Headers      *string            `json:"headers"`
}

type APISpec struct {
	Type         APISpecType   `json:"type"`
	Data         string        `json:"data"`
	FetchRequest *FetchRequest `json:"fetchRequest"`
}

type Annotation struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Application struct {
	ID          string                `json:"id"`
	Name        string                `json:"name"`
	Tenant      string                `json:"tenant"`
	Description *string               `json:"description"`
	Labels      Labels                `json:"labels"`
	Annotations string                `json:"annotations"`
	Status      *ApplicationStatus    `json:"status"`
	Webhooks    []*ApplicationWebhook `json:"webhooks"`
	Apis        []*API                `json:"apis"`
	Events      []*Event              `json:"events"`
	Docs        []*Documentation      `json:"docs"`
}

type ApplicationInput struct {
	Name           string                `json:"name"`
	Description    *string               `json:"description"`
	Labels         *Labels               `json:"labels"`
	Annotations    *string               `json:"annotations"`
	Apis           []*APIInput           `json:"apis"`
	Events         []*EventInput         `json:"events"`
	Documentations []*DocumentationInput `json:"documentations"`
}

type ApplicationStatus struct {
	Condition ApplicationStatusCondition `json:"condition"`
	Timestamp string                     `json:"timestamp"`
}

type ApplicationWebhook struct {
	Type       ApplicationWebhookType `json:"type"`
	URL        string                 `json:"url"`
	Credential *Credential            `json:"credential"`
}

type ApplicationWebhookInput struct {
	Type       ApplicationWebhookType `json:"type"`
	URL        string                 `json:"url"`
	Credential *CredentialInput       `json:"credential"`
}

type BasicCredentialData struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type BasicCredentialDataInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type CSRFTokenCredentialRequestAuth struct {
	Token string `json:"token"`
}

type CSRFTokenCredentialRequestAuthInput struct {
	Token string `json:"token"`
}

type Credential struct {
	Data        *CredentialData        `json:"data"`
	RequestAuth *CredentialRequestAuth `json:"requestAuth"`
}

type CredentialData struct {
	Type  CredentialDataType   `json:"type"`
	Basic *BasicCredentialData `json:"basic"`
	Oauth *OAuthCredentialData `json:"oauth"`
}

type CredentialDataInput struct {
	Type  CredentialDataType        `json:"type"`
	Basic *BasicCredentialDataInput `json:"basic"`
	Oauth *OAuthCredentialDataInput `json:"oauth"`
}

type CredentialInput struct {
	Data        *CredentialDataInput        `json:"data"`
	RequestAuth *CredentialRequestAuthInput `json:"requestAuth"`
}

type CredentialRequestAuth struct {
	Type CredentialRequestAuthType       `json:"type"`
	Csrf *CSRFTokenCredentialRequestAuth `json:"csrf"`
}

type CredentialRequestAuthInput struct {
	Type CredentialRequestAuthType            `json:"type"`
	Csrf *CSRFTokenCredentialRequestAuthInput `json:"csrf"`
}

type Document struct {
	Title  string `json:"title"`
	Type   string `json:"type"`
	Source string `json:"source"`
}

type DocumentInput struct {
	Title  string `json:"title"`
	Type   string `json:"type"`
	Source string `json:"source"`
}

type Documentation struct {
	ID           string            `json:"id"`
	DisplayName  string            `json:"displayName"`
	Description  string            `json:"description"`
	Type         DocumentationType `json:"type"`
	Data         []*Document       `json:"data"`
	FetchRequest *FetchRequest     `json:"fetchRequest"`
}

type DocumentationInput struct {
	Type         DocumentationType  `json:"type"`
	Data         []*DocumentInput   `json:"data"`
	FetchRequest *FetchRequestInput `json:"fetchRequest"`
}

type Event struct {
	ID   string     `json:"id"`
	Spec *EventSpec `json:"spec"`
}

type EventInput struct {
	Type         EventSpecType      `json:"type"`
	Data         *string            `json:"data"`
	FetchRequest *FetchRequestInput `json:"fetchRequest"`
}

type EventSpec struct {
	Type         EventSpecType `json:"type"`
	Data         string        `json:"data"`
	FetchRequest *FetchRequest `json:"fetchRequest"`
}

type FetchRequest struct {
	URL        string              `json:"url"`
	Credential *Credential         `json:"credential"`
	Status     *FetchRequestStatus `json:"status"`
}

type FetchRequestInput struct {
	URL        *string          `json:"url"`
	Credential *CredentialInput `json:"credential"`
}

type FetchRequestStatus struct {
	Condition FetchRequestStatusCondition `json:"condition"`
	Timestamp string                      `json:"timestamp"`
}

type Label struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type ManagementPlaneHealthCheck struct {
	Type      ManagementPlaneHealthCheckType `json:"type"`
	Condition HealthCheckStatusCondition     `json:"condition"`
	Message   *string                        `json:"message"`
	Timestamp string                         `json:"timestamp"`
}

func (ManagementPlaneHealthCheck) IsHealthCheckStatus() {}

type OAuthCredentialData struct {
	ClientID     string `json:"clientId"`
	ClientSecret string `json:"clientSecret"`
	URL          string `json:"url"`
}

type OAuthCredentialDataInput struct {
	ClientID     string `json:"clientId"`
	ClientSecret string `json:"clientSecret"`
	URL          string `json:"url"`
}

type Runtime struct {
	ID              string         `json:"id"`
	Name            string         `json:"name"`
	Description     *string        `json:"description"`
	Tenant          string         `json:"tenant"`
	Labels          Labels         `json:"labels"`
	Annotations     string         `json:"annotations"`
	AgentCredential *Credential    `json:"agentCredential"`
	Status          *RuntimeStatus `json:"status"`
}

type RuntimeHealthCheck struct {
	Origin    string                     `json:"origin"`
	Type      RuntimeHealthCheckType     `json:"type"`
	Condition HealthCheckStatusCondition `json:"condition"`
	Message   *string                    `json:"message"`
	Timestamp string                     `json:"timestamp"`
}

func (RuntimeHealthCheck) IsHealthCheckStatus() {}

type RuntimeHealthCheckInput struct {
	Type      RuntimeHealthCheckType     `json:"type"`
	Condition HealthCheckStatusCondition `json:"condition"`
	Message   *string                    `json:"message"`
}

type RuntimeInput struct {
	Name            string           `json:"name"`
	Labels          *Labels          `json:"labels"`
	Annotations     *string          `json:"annotations"`
	AgentCredential *CredentialInput `json:"agentCredential"`
}

type RuntimeStatus struct {
	Condition RuntimeStatusCondition `json:"condition"`
	Timestamp string                 `json:"timestamp"`
}

type APISpecType string

const (
	APISpecTypeOData   APISpecType = "O_DATA"
	APISpecTypeOpenAPI APISpecType = "OPEN_API"
)

var AllAPISpecType = []APISpecType{
	APISpecTypeOData,
	APISpecTypeOpenAPI,
}

func (e APISpecType) IsValid() bool {
	switch e {
	case APISpecTypeOData, APISpecTypeOpenAPI:
		return true
	}
	return false
}

func (e APISpecType) String() string {
	return string(e)
}

func (e *APISpecType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = APISpecType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid APISpecType", str)
	}
	return nil
}

func (e APISpecType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ApplicationStatusCondition string

const (
	ApplicationStatusConditionInitial ApplicationStatusCondition = "INITIAL"
	ApplicationStatusConditionUnknown ApplicationStatusCondition = "UNKNOWN"
	ApplicationStatusConditionReady   ApplicationStatusCondition = "READY"
	ApplicationStatusConditionFailed  ApplicationStatusCondition = "FAILED"
)

var AllApplicationStatusCondition = []ApplicationStatusCondition{
	ApplicationStatusConditionInitial,
	ApplicationStatusConditionUnknown,
	ApplicationStatusConditionReady,
	ApplicationStatusConditionFailed,
}

func (e ApplicationStatusCondition) IsValid() bool {
	switch e {
	case ApplicationStatusConditionInitial, ApplicationStatusConditionUnknown, ApplicationStatusConditionReady, ApplicationStatusConditionFailed:
		return true
	}
	return false
}

func (e ApplicationStatusCondition) String() string {
	return string(e)
}

func (e *ApplicationStatusCondition) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApplicationStatusCondition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApplicationStatusCondition", str)
	}
	return nil
}

func (e ApplicationStatusCondition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ApplicationWebhookType string

const (
	ApplicationWebhookTypeHealthCheck   ApplicationWebhookType = "HEALTH_CHECK"
	ApplicationWebhookTypeConfiguration ApplicationWebhookType = "CONFIGURATION"
)

var AllApplicationWebhookType = []ApplicationWebhookType{
	ApplicationWebhookTypeHealthCheck,
	ApplicationWebhookTypeConfiguration,
}

func (e ApplicationWebhookType) IsValid() bool {
	switch e {
	case ApplicationWebhookTypeHealthCheck, ApplicationWebhookTypeConfiguration:
		return true
	}
	return false
}

func (e ApplicationWebhookType) String() string {
	return string(e)
}

func (e *ApplicationWebhookType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApplicationWebhookType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApplicationWebhookType", str)
	}
	return nil
}

func (e ApplicationWebhookType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CredentialDataType string

const (
	CredentialDataTypeBasic CredentialDataType = "BASIC"
	CredentialDataTypeOauth CredentialDataType = "OAUTH"
)

var AllCredentialDataType = []CredentialDataType{
	CredentialDataTypeBasic,
	CredentialDataTypeOauth,
}

func (e CredentialDataType) IsValid() bool {
	switch e {
	case CredentialDataTypeBasic, CredentialDataTypeOauth:
		return true
	}
	return false
}

func (e CredentialDataType) String() string {
	return string(e)
}

func (e *CredentialDataType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CredentialDataType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CredentialDataType", str)
	}
	return nil
}

func (e CredentialDataType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CredentialRequestAuthType string

const (
	CredentialRequestAuthTypeCsrfToken CredentialRequestAuthType = "CSRF_TOKEN"
)

var AllCredentialRequestAuthType = []CredentialRequestAuthType{
	CredentialRequestAuthTypeCsrfToken,
}

func (e CredentialRequestAuthType) IsValid() bool {
	switch e {
	case CredentialRequestAuthTypeCsrfToken:
		return true
	}
	return false
}

func (e CredentialRequestAuthType) String() string {
	return string(e)
}

func (e *CredentialRequestAuthType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CredentialRequestAuthType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CredentialRequestAuthType", str)
	}
	return nil
}

func (e CredentialRequestAuthType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DocumentationType string

const (
	DocumentationTypeMarkdown DocumentationType = "MARKDOWN"
)

var AllDocumentationType = []DocumentationType{
	DocumentationTypeMarkdown,
}

func (e DocumentationType) IsValid() bool {
	switch e {
	case DocumentationTypeMarkdown:
		return true
	}
	return false
}

func (e DocumentationType) String() string {
	return string(e)
}

func (e *DocumentationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DocumentationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DocumentationType", str)
	}
	return nil
}

func (e DocumentationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventSpecType string

const (
	EventSpecTypeAsyncAPI EventSpecType = "ASYNC_API"
)

var AllEventSpecType = []EventSpecType{
	EventSpecTypeAsyncAPI,
}

func (e EventSpecType) IsValid() bool {
	switch e {
	case EventSpecTypeAsyncAPI:
		return true
	}
	return false
}

func (e EventSpecType) String() string {
	return string(e)
}

func (e *EventSpecType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventSpecType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventSpecType", str)
	}
	return nil
}

func (e EventSpecType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FetchRequestStatusCondition string

const (
	FetchRequestStatusConditionInitial   FetchRequestStatusCondition = "INITIAL"
	FetchRequestStatusConditionSucceeded FetchRequestStatusCondition = "SUCCEEDED"
	FetchRequestStatusConditionFailed    FetchRequestStatusCondition = "FAILED"
)

var AllFetchRequestStatusCondition = []FetchRequestStatusCondition{
	FetchRequestStatusConditionInitial,
	FetchRequestStatusConditionSucceeded,
	FetchRequestStatusConditionFailed,
}

func (e FetchRequestStatusCondition) IsValid() bool {
	switch e {
	case FetchRequestStatusConditionInitial, FetchRequestStatusConditionSucceeded, FetchRequestStatusConditionFailed:
		return true
	}
	return false
}

func (e FetchRequestStatusCondition) String() string {
	return string(e)
}

func (e *FetchRequestStatusCondition) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FetchRequestStatusCondition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FetchRequestStatusCondition", str)
	}
	return nil
}

func (e FetchRequestStatusCondition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HealthCheckStatusCondition string

const (
	HealthCheckStatusConditionSucceeded HealthCheckStatusCondition = "SUCCEEDED"
	HealthCheckStatusConditionFailed    HealthCheckStatusCondition = "FAILED"
)

var AllHealthCheckStatusCondition = []HealthCheckStatusCondition{
	HealthCheckStatusConditionSucceeded,
	HealthCheckStatusConditionFailed,
}

func (e HealthCheckStatusCondition) IsValid() bool {
	switch e {
	case HealthCheckStatusConditionSucceeded, HealthCheckStatusConditionFailed:
		return true
	}
	return false
}

func (e HealthCheckStatusCondition) String() string {
	return string(e)
}

func (e *HealthCheckStatusCondition) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HealthCheckStatusCondition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HealthCheckStatusCondition", str)
	}
	return nil
}

func (e HealthCheckStatusCondition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ManagementPlaneHealthCheckType string

const (
	ManagementPlaneHealthCheckTypeManagementPlaneHealthcheck            ManagementPlaneHealthCheckType = "MANAGEMENT_PLANE_HEALTHCHECK"
	ManagementPlaneHealthCheckTypeManagementPlaneApplicationHealthcheck ManagementPlaneHealthCheckType = "MANAGEMENT_PLANE_APPLICATION_HEALTHCHECK"
)

var AllManagementPlaneHealthCheckType = []ManagementPlaneHealthCheckType{
	ManagementPlaneHealthCheckTypeManagementPlaneHealthcheck,
	ManagementPlaneHealthCheckTypeManagementPlaneApplicationHealthcheck,
}

func (e ManagementPlaneHealthCheckType) IsValid() bool {
	switch e {
	case ManagementPlaneHealthCheckTypeManagementPlaneHealthcheck, ManagementPlaneHealthCheckTypeManagementPlaneApplicationHealthcheck:
		return true
	}
	return false
}

func (e ManagementPlaneHealthCheckType) String() string {
	return string(e)
}

func (e *ManagementPlaneHealthCheckType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ManagementPlaneHealthCheckType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ManagementPlaneHealthCheckType", str)
	}
	return nil
}

func (e ManagementPlaneHealthCheckType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RuntimeHealthCheckType string

const (
	RuntimeHealthCheckTypeRuntimeHealthcheck            RuntimeHealthCheckType = "RUNTIME_HEALTHCHECK"
	RuntimeHealthCheckTypeRuntimeApplicationHealthcheck RuntimeHealthCheckType = "RUNTIME_APPLICATION_HEALTHCHECK"
	RuntimeHealthCheckTypeRuntimeApplicationEvents      RuntimeHealthCheckType = "RUNTIME_APPLICATION_EVENTS"
	RuntimeHealthCheckTypeRuntimeApplicationGateway     RuntimeHealthCheckType = "RUNTIME_APPLICATION_GATEWAY"
)

var AllRuntimeHealthCheckType = []RuntimeHealthCheckType{
	RuntimeHealthCheckTypeRuntimeHealthcheck,
	RuntimeHealthCheckTypeRuntimeApplicationHealthcheck,
	RuntimeHealthCheckTypeRuntimeApplicationEvents,
	RuntimeHealthCheckTypeRuntimeApplicationGateway,
}

func (e RuntimeHealthCheckType) IsValid() bool {
	switch e {
	case RuntimeHealthCheckTypeRuntimeHealthcheck, RuntimeHealthCheckTypeRuntimeApplicationHealthcheck, RuntimeHealthCheckTypeRuntimeApplicationEvents, RuntimeHealthCheckTypeRuntimeApplicationGateway:
		return true
	}
	return false
}

func (e RuntimeHealthCheckType) String() string {
	return string(e)
}

func (e *RuntimeHealthCheckType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RuntimeHealthCheckType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RuntimeHealthCheckType", str)
	}
	return nil
}

func (e RuntimeHealthCheckType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RuntimeStatusCondition string

const (
	RuntimeStatusConditionInitial RuntimeStatusCondition = "INITIAL"
	RuntimeStatusConditionReady   RuntimeStatusCondition = "READY"
	RuntimeStatusConditionFailed  RuntimeStatusCondition = "FAILED"
)

var AllRuntimeStatusCondition = []RuntimeStatusCondition{
	RuntimeStatusConditionInitial,
	RuntimeStatusConditionReady,
	RuntimeStatusConditionFailed,
}

func (e RuntimeStatusCondition) IsValid() bool {
	switch e {
	case RuntimeStatusConditionInitial, RuntimeStatusConditionReady, RuntimeStatusConditionFailed:
		return true
	}
	return false
}

func (e RuntimeStatusCondition) String() string {
	return string(e)
}

func (e *RuntimeStatusCondition) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RuntimeStatusCondition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RuntimeStatusCondition", str)
	}
	return nil
}

func (e RuntimeStatusCondition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
