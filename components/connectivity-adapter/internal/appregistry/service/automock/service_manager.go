// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/connectivity-adapter/internal/appregistry/model"

// ServiceManager is an autogenerated mock type for the ServiceManager type
type ServiceManager struct {
	mock.Mock
}

// Create provides a mock function with given fields: serviceDetails
func (_m *ServiceManager) Create(serviceDetails model.GraphQLServiceDetailsInput) error {
	ret := _m.Called(serviceDetails)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.GraphQLServiceDetailsInput) error); ok {
		r0 = rf(serviceDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: serviceID
func (_m *ServiceManager) Delete(serviceID string) error {
	ret := _m.Called(serviceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFromApplicationDetails provides a mock function with given fields: serviceID
func (_m *ServiceManager) GetFromApplicationDetails(serviceID string) (model.GraphQLServiceDetails, error) {
	ret := _m.Called(serviceID)

	var r0 model.GraphQLServiceDetails
	if rf, ok := ret.Get(0).(func(string) model.GraphQLServiceDetails); ok {
		r0 = rf(serviceID)
	} else {
		r0 = ret.Get(0).(model.GraphQLServiceDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFromApplicationDetails provides a mock function with given fields:
func (_m *ServiceManager) ListFromApplicationDetails() ([]model.GraphQLServiceDetails, error) {
	ret := _m.Called()

	var r0 []model.GraphQLServiceDetails
	if rf, ok := ret.Get(0).(func() []model.GraphQLServiceDetails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GraphQLServiceDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: serviceDetails
func (_m *ServiceManager) Update(serviceDetails model.GraphQLServiceDetailsInput) error {
	ret := _m.Called(serviceDetails)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.GraphQLServiceDetailsInput) error); ok {
		r0 = rf(serviceDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
