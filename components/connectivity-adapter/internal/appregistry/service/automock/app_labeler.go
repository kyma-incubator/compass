// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/connectivity-adapter/internal/appregistry/model"
import service "github.com/kyma-incubator/compass/components/connectivity-adapter/internal/appregistry/service"

// AppLabeler is an autogenerated mock type for the AppLabeler type
type AppLabeler struct {
	mock.Mock
}

// DeleteServiceReference provides a mock function with given fields: appDetails, serviceID
func (_m *AppLabeler) DeleteServiceReference(appDetails graphql.ApplicationExt, serviceID string) (graphql.LabelInput, error) {
	ret := _m.Called(appDetails, serviceID)

	var r0 graphql.LabelInput
	if rf, ok := ret.Get(0).(func(graphql.ApplicationExt, string) graphql.LabelInput); ok {
		r0 = rf(appDetails, serviceID)
	} else {
		r0 = ret.Get(0).(graphql.LabelInput)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(graphql.ApplicationExt, string) error); ok {
		r1 = rf(appDetails, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: appDetails
func (_m *AppLabeler) ListServices(appDetails graphql.ApplicationExt) ([]model.GraphQLServiceDetails, error) {
	ret := _m.Called(appDetails)

	var r0 []model.GraphQLServiceDetails
	if rf, ok := ret.Get(0).(func(graphql.ApplicationExt) []model.GraphQLServiceDetails); ok {
		r0 = rf(appDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GraphQLServiceDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(graphql.ApplicationExt) error); ok {
		r1 = rf(appDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadService provides a mock function with given fields: appDetails, serviceID
func (_m *AppLabeler) ReadService(appDetails graphql.ApplicationExt, serviceID string) (model.GraphQLServiceDetails, error) {
	ret := _m.Called(appDetails, serviceID)

	var r0 model.GraphQLServiceDetails
	if rf, ok := ret.Get(0).(func(graphql.ApplicationExt, string) model.GraphQLServiceDetails); ok {
		r0 = rf(appDetails, serviceID)
	} else {
		r0 = ret.Get(0).(model.GraphQLServiceDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(graphql.ApplicationExt, string) error); ok {
		r1 = rf(appDetails, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadServiceReference provides a mock function with given fields: appDetails, serviceID
func (_m *AppLabeler) ReadServiceReference(appDetails graphql.ApplicationExt, serviceID string) (service.LegacyServiceReference, error) {
	ret := _m.Called(appDetails, serviceID)

	var r0 service.LegacyServiceReference
	if rf, ok := ret.Get(0).(func(graphql.ApplicationExt, string) service.LegacyServiceReference); ok {
		r0 = rf(appDetails, serviceID)
	} else {
		r0 = ret.Get(0).(service.LegacyServiceReference)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(graphql.ApplicationExt, string) error); ok {
		r1 = rf(appDetails, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteServiceReference provides a mock function with given fields: appDetails, serviceReference
func (_m *AppLabeler) WriteServiceReference(appDetails graphql.ApplicationExt, serviceReference service.LegacyServiceReference) (graphql.LabelInput, error) {
	ret := _m.Called(appDetails, serviceReference)

	var r0 graphql.LabelInput
	if rf, ok := ret.Get(0).(func(graphql.ApplicationExt, service.LegacyServiceReference) graphql.LabelInput); ok {
		r0 = rf(appDetails, serviceReference)
	} else {
		r0 = ret.Get(0).(graphql.LabelInput)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(graphql.ApplicationExt, service.LegacyServiceReference) error); ok {
		r1 = rf(appDetails, serviceReference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
