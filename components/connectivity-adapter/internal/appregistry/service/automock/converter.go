// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/connectivity-adapter/internal/appregistry/model"

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

// DetailsToGraphQLInput provides a mock function with given fields: id, deprecated
func (_m *Converter) DetailsToGraphQLInput(id string, deprecated model.ServiceDetails) (model.GraphQLServiceDetailsInput, error) {
	ret := _m.Called(id, deprecated)

	var r0 model.GraphQLServiceDetailsInput
	if rf, ok := ret.Get(0).(func(string, model.ServiceDetails) model.GraphQLServiceDetailsInput); ok {
		r0 = rf(id, deprecated)
	} else {
		r0 = ret.Get(0).(model.GraphQLServiceDetailsInput)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, model.ServiceDetails) error); ok {
		r1 = rf(id, deprecated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GraphQLToServiceDetails provides a mock function with given fields: converted
func (_m *Converter) GraphQLToServiceDetails(converted model.GraphQLServiceDetails) (model.ServiceDetails, error) {
	ret := _m.Called(converted)

	var r0 model.ServiceDetails
	if rf, ok := ret.Get(0).(func(model.GraphQLServiceDetails) model.ServiceDetails); ok {
		r0 = rf(converted)
	} else {
		r0 = ret.Get(0).(model.ServiceDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.GraphQLServiceDetails) error); ok {
		r1 = rf(converted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
