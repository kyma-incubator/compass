// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/connectivity-adapter/internal/appregistry/model"

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

// DetailsToGraphQL provides a mock function with given fields: in
func (_m *Converter) DetailsToGraphQL(in model.ServiceDetails) graphql.Application {
	ret := _m.Called(in)

	var r0 graphql.Application
	if rf, ok := ret.Get(0).(func(model.ServiceDetails) graphql.Application); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(graphql.Application)
	}

	return r0
}

// GraphQLToDetailsModel provides a mock function with given fields: in
func (_m *Converter) GraphQLToDetailsModel(in graphql.Application) model.ServiceDetails {
	ret := _m.Called(in)

	var r0 model.ServiceDetails
	if rf, ok := ret.Get(0).(func(graphql.Application) model.ServiceDetails); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(model.ServiceDetails)
	}

	return r0
}

// GraphQLToModel provides a mock function with given fields: in
func (_m *Converter) GraphQLToModel(in graphql.Application) model.Service {
	ret := _m.Called(in)

	var r0 model.Service
	if rf, ok := ret.Get(0).(func(graphql.Application) model.Service); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(model.Service)
	}

	return r0
}
