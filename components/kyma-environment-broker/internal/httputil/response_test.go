package httputil_test

import (
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/kyma-incubator/compass/components/kyma-environment-broker/internal/httputil"
	"github.com/kyma-incubator/compass/components/kyma-environment-broker/internal/logger"

	"github.com/pkg/errors"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestResponseWriterDevModeOff(t *testing.T) {
	logSpy := logger.NewLogSpy()
	writer := httputil.NewResponseWriter(logSpy.Logger, false)

	for testName, testCase := range map[string]struct {
		testedFn func(rw http.ResponseWriter, r *http.Request, err error, context string)
		body     string
		status   int
	}{
		"NotFound": {
			testedFn: writer.NotFound,
			status:   http.StatusNotFound,
			body: `{
					  "status": 404,
					  "requestId": "123-456-678",
					  "message": "Whoops! We can't find what you're looking for. Please try again."
					}`,
		},
		"InternalServerError": {
			testedFn: writer.InternalServerError,
			status:   http.StatusInternalServerError,
			body: `{
					  "status": 500,
					  "requestId": "123-456-678",
					  "message": "Something went very wrong. Please try again."
					}`,
		},
	} {
		t.Run(testName, func(t *testing.T) {
			// given
			logSpy.Reset()
			var (
				respSpy       = httptest.NewRecorder()
				fixReq        = fixRequest(t)
				fixErr        = errors.New("fix error")
				fixErrContext = "generated by testing scenario"
			)

			// when
			testCase.testedFn(respSpy, fixReq, fixErr, fixErrContext)

			// then
			logSpy.AssertErrorLogged(t, errors.Wrap(fixErr, fixErrContext))

			assert.Equal(t, testCase.status, respSpy.Code)
			assert.JSONEq(t, testCase.body, respSpy.Body.String())
		})
	}
}

func TestResponseWriterDevModeOn(t *testing.T) {
	logSpy := logger.NewLogSpy()
	writer := httputil.NewResponseWriter(logSpy.Logger, true)

	for testName, testCase := range map[string]struct {
		testedFn func(rw http.ResponseWriter, r *http.Request, err error, context string)
		body     string
		status   int
	}{
		"NotFound": {
			testedFn: writer.NotFound,
			status:   http.StatusNotFound,
			body: `{
					  "status": 404,
					  "requestId": "123-456-678",
					  "message": "Whoops! We can't find what you're looking for. Please try again.",
					  "details": "generated by testing scenario: fix error"
					}`,
		},
		"InternalServerError": {
			testedFn: writer.InternalServerError,
			status:   http.StatusInternalServerError,
			body: `{
					  "status": 500,
					  "requestId": "123-456-678",
					  "message": "Something went very wrong. Please try again.",
					  "details": "generated by testing scenario: fix error"
					}`,
		},
	} {
		t.Run(testName, func(t *testing.T) {
			// given
			logSpy.Reset()
			var (
				respSpy       = httptest.NewRecorder()
				fixReq        = fixRequest(t)
				fixErr        = errors.New("fix error")
				fixErrContext = "generated by testing scenario"
			)

			// when
			testCase.testedFn(respSpy, fixReq, fixErr, fixErrContext)

			// then
			assert.Empty(t, logSpy.DumpAll())

			assert.Equal(t, testCase.status, respSpy.Code)
			assert.JSONEq(t, testCase.body, respSpy.Body.String())
		})
	}
}

func fixRequest(t *testing.T) *http.Request {
	req, err := http.NewRequest(http.MethodGet, "http://testing.url", nil)
	require.NoError(t, err)
	req.Header.Set("X-Request-Id", "123-456-678")

	return req
}
