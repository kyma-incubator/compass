// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import gqlschema "github.com/kyma-incubator/compass/components/provisioner/pkg/gqlschema"
import internal "github.com/kyma-incubator/compass/components/kyma-environment-broker/internal"
import mock "github.com/stretchr/testify/mock"

// ProvisionInputCreator is an autogenerated mock type for the ProvisionInputCreator type
type ProvisionInputCreator struct {
	mock.Mock
}

// AppendGlobalOverrides provides a mock function with given fields: overrides
func (_m *ProvisionInputCreator) AppendGlobalOverrides(overrides []*gqlschema.ConfigEntryInput) internal.ProvisionInputCreator {
	ret := _m.Called(overrides)

	var r0 internal.ProvisionInputCreator
	if rf, ok := ret.Get(0).(func([]*gqlschema.ConfigEntryInput) internal.ProvisionInputCreator); ok {
		r0 = rf(overrides)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionInputCreator)
		}
	}

	return r0
}

// AppendOverrides provides a mock function with given fields: component, overrides
func (_m *ProvisionInputCreator) AppendOverrides(component string, overrides []*gqlschema.ConfigEntryInput) internal.ProvisionInputCreator {
	ret := _m.Called(component, overrides)

	var r0 internal.ProvisionInputCreator
	if rf, ok := ret.Get(0).(func(string, []*gqlschema.ConfigEntryInput) internal.ProvisionInputCreator); ok {
		r0 = rf(component, overrides)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionInputCreator)
		}
	}

	return r0
}

// Create provides a mock function with given fields:
func (_m *ProvisionInputCreator) Create() (gqlschema.ProvisionRuntimeInput, error) {
	ret := _m.Called()

	var r0 gqlschema.ProvisionRuntimeInput
	if rf, ok := ret.Get(0).(func() gqlschema.ProvisionRuntimeInput); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(gqlschema.ProvisionRuntimeInput)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetOverrides provides a mock function with given fields: component, overrides
func (_m *ProvisionInputCreator) SetOverrides(component string, overrides []*gqlschema.ConfigEntryInput) internal.ProvisionInputCreator {
	ret := _m.Called(component, overrides)

	var r0 internal.ProvisionInputCreator
	if rf, ok := ret.Get(0).(func(string, []*gqlschema.ConfigEntryInput) internal.ProvisionInputCreator); ok {
		r0 = rf(component, overrides)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionInputCreator)
		}
	}

	return r0
}

// SetProvisioningParameters provides a mock function with given fields: params
func (_m *ProvisionInputCreator) SetProvisioningParameters(params internal.ProvisioningParametersDTO) internal.ProvisionInputCreator {
	ret := _m.Called(params)

	var r0 internal.ProvisionInputCreator
	if rf, ok := ret.Get(0).(func(internal.ProvisioningParametersDTO) internal.ProvisionInputCreator); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionInputCreator)
		}
	}

	return r0
}

// SetRuntimeLabels provides a mock function with given fields: instanceID, SubAccountID
func (_m *ProvisionInputCreator) SetRuntimeLabels(instanceID string, SubAccountID string) internal.ProvisionInputCreator {
	ret := _m.Called(instanceID, SubAccountID)

	var r0 internal.ProvisionInputCreator
	if rf, ok := ret.Get(0).(func(string, string) internal.ProvisionInputCreator); ok {
		r0 = rf(instanceID, SubAccountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionInputCreator)
		}
	}

	return r0
}
