// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import gqlschema "github.com/kyma-incubator/compass/components/provisioner/pkg/gqlschema"
import hyperscaler "github.com/kyma-incubator/compass/components/kyma-environment-broker/internal/hyperscaler"
import mock "github.com/stretchr/testify/mock"

// AccountProvider is an autogenerated mock type for the AccountProvider type
type AccountProvider struct {
	mock.Mock
}

// CompassCredentials provides a mock function with given fields: hyperscalerType, tenantName
func (_m *AccountProvider) CompassCredentials(hyperscalerType hyperscaler.Type, tenantName string) (hyperscaler.Credentials, error) {
	ret := _m.Called(hyperscalerType, tenantName)

	var r0 hyperscaler.Credentials
	if rf, ok := ret.Get(0).(func(hyperscaler.Type, string) hyperscaler.Credentials); ok {
		r0 = rf(hyperscalerType, tenantName)
	} else {
		r0 = ret.Get(0).(hyperscaler.Credentials)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hyperscaler.Type, string) error); ok {
		r1 = rf(hyperscalerType, tenantName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompassSecretName provides a mock function with given fields: input, tenantName
func (_m *AccountProvider) CompassSecretName(input *gqlschema.ProvisionRuntimeInput, tenantName string) (string, error) {
	ret := _m.Called(input, tenantName)

	var r0 string
	if rf, ok := ret.Get(0).(func(*gqlschema.ProvisionRuntimeInput, string) string); ok {
		r0 = rf(input, tenantName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gqlschema.ProvisionRuntimeInput, string) error); ok {
		r1 = rf(input, tenantName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GardenerCredentials provides a mock function with given fields: hyperscalerType, tenantName
func (_m *AccountProvider) GardenerCredentials(hyperscalerType hyperscaler.Type, tenantName string) (hyperscaler.Credentials, error) {
	ret := _m.Called(hyperscalerType, tenantName)

	var r0 hyperscaler.Credentials
	if rf, ok := ret.Get(0).(func(hyperscaler.Type, string) hyperscaler.Credentials); ok {
		r0 = rf(hyperscalerType, tenantName)
	} else {
		r0 = ret.Get(0).(hyperscaler.Credentials)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hyperscaler.Type, string) error); ok {
		r1 = rf(hyperscalerType, tenantName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GardenerSecretName provides a mock function with given fields: input, tenantName
func (_m *AccountProvider) GardenerSecretName(input *gqlschema.GardenerConfigInput, tenantName string) (string, error) {
	ret := _m.Called(input, tenantName)

	var r0 string
	if rf, ok := ret.Get(0).(func(*gqlschema.GardenerConfigInput, string) string); ok {
		r0 = rf(input, tenantName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gqlschema.GardenerConfigInput, string) error); ok {
		r1 = rf(input, tenantName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
