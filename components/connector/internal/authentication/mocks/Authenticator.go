// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import authentication "github.com/kyma-incubator/compass/components/connector/internal/authentication"
import context "context"
import mock "github.com/stretchr/testify/mock"
import tokens "github.com/kyma-incubator/compass/components/connector/internal/tokens"

// Authenticator is an autogenerated mock type for the Authenticator type
type Authenticator struct {
	mock.Mock
}

// AuthenticateCertificate provides a mock function with given fields: _a0
func (_m *Authenticator) AuthenticateCertificate(_a0 context.Context) (authentication.CertificateData, error) {
	ret := _m.Called(_a0)

	var r0 authentication.CertificateData
	if rf, ok := ret.Get(0).(func(context.Context) authentication.CertificateData); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(authentication.CertificateData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthenticateToken provides a mock function with given fields: _a0
func (_m *Authenticator) AuthenticateToken(_a0 context.Context) (tokens.TokenData, error) {
	ret := _m.Called(_a0)

	var r0 tokens.TokenData
	if rf, ok := ret.Get(0).(func(context.Context) tokens.TokenData); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tokens.TokenData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthenticateTokenOrCertificate provides a mock function with given fields: _a0
func (_m *Authenticator) AuthenticateTokenOrCertificate(_a0 context.Context) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
