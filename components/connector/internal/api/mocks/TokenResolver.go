// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import externalschema "github.com/kyma-incubator/compass/components/connector/pkg/graphql/externalschema"
import mock "github.com/stretchr/testify/mock"

// TokenResolver is an autogenerated mock type for the TokenResolver type
type TokenResolver struct {
	mock.Mock
}

// GenerateApplicationToken provides a mock function with given fields: ctx, appID
func (_m *TokenResolver) GenerateApplicationToken(ctx context.Context, appID string) (*externalschema.Token, error) {
	ret := _m.Called(ctx, appID)

	var r0 *externalschema.Token
	if rf, ok := ret.Get(0).(func(context.Context, string) *externalschema.Token); ok {
		r0 = rf(ctx, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*externalschema.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateRuntimeToken provides a mock function with given fields: ctx, runtimeID
func (_m *TokenResolver) GenerateRuntimeToken(ctx context.Context, runtimeID string) (*externalschema.Token, error) {
	ret := _m.Called(ctx, runtimeID)

	var r0 *externalschema.Token
	if rf, ok := ret.Get(0).(func(context.Context, string) *externalschema.Token); ok {
		r0 = rf(ctx, runtimeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*externalschema.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, runtimeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsHealthy provides a mock function with given fields: ctx
func (_m *TokenResolver) IsHealthy(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
