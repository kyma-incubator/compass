// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	apperrors "github.com/kyma-incubator/compass/components/connector/internal/apperrors"
	mock "github.com/stretchr/testify/mock"

	tokens "github.com/kyma-incubator/compass/components/connector/internal/tokens"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: clientId, tokenType
func (_m *Service) CreateToken(clientId string, tokenType tokens.TokenType) (string, apperrors.AppError) {
	ret := _m.Called(clientId, tokenType)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, tokens.TokenType) string); ok {
		r0 = rf(clientId, tokenType)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, tokens.TokenType) apperrors.AppError); ok {
		r1 = rf(clientId, tokenType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token
func (_m *Service) Delete(token string) {
	_m.Called(token)
}

// Resolve provides a mock function with given fields: token
func (_m *Service) Resolve(token string) (tokens.TokenData, apperrors.AppError) {
	ret := _m.Called(token)

	var r0 tokens.TokenData
	if rf, ok := ret.Get(0).(func(string) tokens.TokenData); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(tokens.TokenData)
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string) apperrors.AppError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}
