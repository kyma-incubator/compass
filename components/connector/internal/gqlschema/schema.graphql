# Token
type Token {
    token: String! # eg.: "1edfc34g"
}

# Certificates
type Certificates {
    certificate: String!
    caCertificate: String!
    clientCertificate: String!
}

# ManagementPlaneInfo
type ManagementPlaneInfo {
    directorURL: String! # eg.: "https://director.cluster.kyma.cx/graphql"
}

# CSRInfo
type CertificateSigningRequestInfo {
    managementPlaneInfo: ManagementPlaneInfo!
    subject: String! # eg.: "OU=Test,O=Test,L=Blacksburg,ST=Virginia,C=US,CN={ID}"
    keyAlgorithm: String! # eg.: rsa2048
}

type Query {
    # Client-Certificates
    
    # Retuns subject that should be placed in the signing request
    getCertificateSignignRequestInfo(token: String): CertificateSigningRequestInfo!
}

type Mutation {
    # Tokens
    generateApplicationToken(appID: ID!): Token! # internal?
    generateRuntimeToken(runtimeID: ID!): Token! # internal?

    # Client-Certificates
    
    # Signs CSR, currently we have two very similar endpoints. One for signing new CSR
    # protected by one-time token and second for certificates renewals protected by 
    # client-certificate. We may consider chaning the implementation to have only one
    # mutation that will be aware of those two protection mechanisms
    signCertificateSigningRequest(csr: String!, token: String): Certificates!

    # If we decide to reuse signCSR mutation then we can skip this one
    renewCertificate(csr: String!): Certificates!

    # Revokes certificate with which the request was issued
    revokeCertificate: Boolean!
}