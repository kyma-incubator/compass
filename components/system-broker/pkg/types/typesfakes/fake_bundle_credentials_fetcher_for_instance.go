// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"context"
	"sync"

	"github.com/kyma-incubator/compass/components/system-broker/pkg/director"
	"github.com/kyma-incubator/compass/components/system-broker/pkg/types"
)

type FakeBundleCredentialsFetcherForInstance struct {
	FetchBundleInstanceCredentialsStub        func(context.Context, *director.BundleInstanceInput) (*director.BundleInstanceCredentialsOutput, error)
	fetchBundleInstanceCredentialsMutex       sync.RWMutex
	fetchBundleInstanceCredentialsArgsForCall []struct {
		arg1 context.Context
		arg2 *director.BundleInstanceInput
	}
	fetchBundleInstanceCredentialsReturns struct {
		result1 *director.BundleInstanceCredentialsOutput
		result2 error
	}
	fetchBundleInstanceCredentialsReturnsOnCall map[int]struct {
		result1 *director.BundleInstanceCredentialsOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBundleCredentialsFetcherForInstance) FetchBundleInstanceCredentials(arg1 context.Context, arg2 *director.BundleInstanceInput) (*director.BundleInstanceCredentialsOutput, error) {
	fake.fetchBundleInstanceCredentialsMutex.Lock()
	ret, specificReturn := fake.fetchBundleInstanceCredentialsReturnsOnCall[len(fake.fetchBundleInstanceCredentialsArgsForCall)]
	fake.fetchBundleInstanceCredentialsArgsForCall = append(fake.fetchBundleInstanceCredentialsArgsForCall, struct {
		arg1 context.Context
		arg2 *director.BundleInstanceInput
	}{arg1, arg2})
	stub := fake.FetchBundleInstanceCredentialsStub
	fakeReturns := fake.fetchBundleInstanceCredentialsReturns
	fake.recordInvocation("FetchBundleInstanceCredentials", []interface{}{arg1, arg2})
	fake.fetchBundleInstanceCredentialsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBundleCredentialsFetcherForInstance) FetchBundleInstanceCredentialsCallCount() int {
	fake.fetchBundleInstanceCredentialsMutex.RLock()
	defer fake.fetchBundleInstanceCredentialsMutex.RUnlock()
	return len(fake.fetchBundleInstanceCredentialsArgsForCall)
}

func (fake *FakeBundleCredentialsFetcherForInstance) FetchBundleInstanceCredentialsCalls(stub func(context.Context, *director.BundleInstanceInput) (*director.BundleInstanceCredentialsOutput, error)) {
	fake.fetchBundleInstanceCredentialsMutex.Lock()
	defer fake.fetchBundleInstanceCredentialsMutex.Unlock()
	fake.FetchBundleInstanceCredentialsStub = stub
}

func (fake *FakeBundleCredentialsFetcherForInstance) FetchBundleInstanceCredentialsArgsForCall(i int) (context.Context, *director.BundleInstanceInput) {
	fake.fetchBundleInstanceCredentialsMutex.RLock()
	defer fake.fetchBundleInstanceCredentialsMutex.RUnlock()
	argsForCall := fake.fetchBundleInstanceCredentialsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBundleCredentialsFetcherForInstance) FetchBundleInstanceCredentialsReturns(result1 *director.BundleInstanceCredentialsOutput, result2 error) {
	fake.fetchBundleInstanceCredentialsMutex.Lock()
	defer fake.fetchBundleInstanceCredentialsMutex.Unlock()
	fake.FetchBundleInstanceCredentialsStub = nil
	fake.fetchBundleInstanceCredentialsReturns = struct {
		result1 *director.BundleInstanceCredentialsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeBundleCredentialsFetcherForInstance) FetchBundleInstanceCredentialsReturnsOnCall(i int, result1 *director.BundleInstanceCredentialsOutput, result2 error) {
	fake.fetchBundleInstanceCredentialsMutex.Lock()
	defer fake.fetchBundleInstanceCredentialsMutex.Unlock()
	fake.FetchBundleInstanceCredentialsStub = nil
	if fake.fetchBundleInstanceCredentialsReturnsOnCall == nil {
		fake.fetchBundleInstanceCredentialsReturnsOnCall = make(map[int]struct {
			result1 *director.BundleInstanceCredentialsOutput
			result2 error
		})
	}
	fake.fetchBundleInstanceCredentialsReturnsOnCall[i] = struct {
		result1 *director.BundleInstanceCredentialsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeBundleCredentialsFetcherForInstance) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchBundleInstanceCredentialsMutex.RLock()
	defer fake.fetchBundleInstanceCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBundleCredentialsFetcherForInstance) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.BundleCredentialsFetcherForInstance = new(FakeBundleCredentialsFetcherForInstance)
