// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"context"
	"sync"

	"github.com/kyma-incubator/compass/components/system-broker/pkg/director"
	"github.com/kyma-incubator/compass/components/system-broker/pkg/types"
)

type FakeBundleCredentialsFetcher struct {
	FetchBundleInstanceAuthStub        func(context.Context, *director.BundleInstanceInput) (*director.BundleInstanceAuthOutput, error)
	fetchBundleInstanceAuthMutex       sync.RWMutex
	fetchBundleInstanceAuthArgsForCall []struct {
		arg1 context.Context
		arg2 *director.BundleInstanceInput
	}
	fetchBundleInstanceAuthReturns struct {
		result1 *director.BundleInstanceAuthOutput
		result2 error
	}
	fetchBundleInstanceAuthReturnsOnCall map[int]struct {
		result1 *director.BundleInstanceAuthOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBundleCredentialsFetcher) FetchBundleInstanceAuth(arg1 context.Context, arg2 *director.BundleInstanceInput) (*director.BundleInstanceAuthOutput, error) {
	fake.fetchBundleInstanceAuthMutex.Lock()
	ret, specificReturn := fake.fetchBundleInstanceAuthReturnsOnCall[len(fake.fetchBundleInstanceAuthArgsForCall)]
	fake.fetchBundleInstanceAuthArgsForCall = append(fake.fetchBundleInstanceAuthArgsForCall, struct {
		arg1 context.Context
		arg2 *director.BundleInstanceInput
	}{arg1, arg2})
	fake.recordInvocation("FetchBundleInstanceAuth", []interface{}{arg1, arg2})
	fake.fetchBundleInstanceAuthMutex.Unlock()
	if fake.FetchBundleInstanceAuthStub != nil {
		return fake.FetchBundleInstanceAuthStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fetchBundleInstanceAuthReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBundleCredentialsFetcher) FetchBundleInstanceAuthCallCount() int {
	fake.fetchBundleInstanceAuthMutex.RLock()
	defer fake.fetchBundleInstanceAuthMutex.RUnlock()
	return len(fake.fetchBundleInstanceAuthArgsForCall)
}

func (fake *FakeBundleCredentialsFetcher) FetchBundleInstanceAuthCalls(stub func(context.Context, *director.BundleInstanceInput) (*director.BundleInstanceAuthOutput, error)) {
	fake.fetchBundleInstanceAuthMutex.Lock()
	defer fake.fetchBundleInstanceAuthMutex.Unlock()
	fake.FetchBundleInstanceAuthStub = stub
}

func (fake *FakeBundleCredentialsFetcher) FetchBundleInstanceAuthArgsForCall(i int) (context.Context, *director.BundleInstanceInput) {
	fake.fetchBundleInstanceAuthMutex.RLock()
	defer fake.fetchBundleInstanceAuthMutex.RUnlock()
	argsForCall := fake.fetchBundleInstanceAuthArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBundleCredentialsFetcher) FetchBundleInstanceAuthReturns(result1 *director.BundleInstanceAuthOutput, result2 error) {
	fake.fetchBundleInstanceAuthMutex.Lock()
	defer fake.fetchBundleInstanceAuthMutex.Unlock()
	fake.FetchBundleInstanceAuthStub = nil
	fake.fetchBundleInstanceAuthReturns = struct {
		result1 *director.BundleInstanceAuthOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeBundleCredentialsFetcher) FetchBundleInstanceAuthReturnsOnCall(i int, result1 *director.BundleInstanceAuthOutput, result2 error) {
	fake.fetchBundleInstanceAuthMutex.Lock()
	defer fake.fetchBundleInstanceAuthMutex.Unlock()
	fake.FetchBundleInstanceAuthStub = nil
	if fake.fetchBundleInstanceAuthReturnsOnCall == nil {
		fake.fetchBundleInstanceAuthReturnsOnCall = make(map[int]struct {
			result1 *director.BundleInstanceAuthOutput
			result2 error
		})
	}
	fake.fetchBundleInstanceAuthReturnsOnCall[i] = struct {
		result1 *director.BundleInstanceAuthOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeBundleCredentialsFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchBundleInstanceAuthMutex.RLock()
	defer fake.fetchBundleInstanceAuthMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBundleCredentialsFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.BundleCredentialsFetcher = new(FakeBundleCredentialsFetcher)
