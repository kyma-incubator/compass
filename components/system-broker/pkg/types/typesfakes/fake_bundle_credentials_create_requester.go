// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"context"
	"sync"

	"github.com/kyma-incubator/compass/components/system-broker/pkg/director"
	"github.com/kyma-incubator/compass/components/system-broker/pkg/types"
)

type FakeBundleCredentialsCreateRequester struct {
	RequestBundleInstanceCredentialsCreationStub        func(context.Context, *director.BundleInstanceCredentialsInput) (*director.BundleInstanceAuthOutput, error)
	requestBundleInstanceCredentialsCreationMutex       sync.RWMutex
	requestBundleInstanceCredentialsCreationArgsForCall []struct {
		arg1 context.Context
		arg2 *director.BundleInstanceCredentialsInput
	}
	requestBundleInstanceCredentialsCreationReturns struct {
		result1 *director.BundleInstanceAuthOutput
		result2 error
	}
	requestBundleInstanceCredentialsCreationReturnsOnCall map[int]struct {
		result1 *director.BundleInstanceAuthOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBundleCredentialsCreateRequester) RequestBundleInstanceCredentialsCreation(arg1 context.Context, arg2 *director.BundleInstanceCredentialsInput) (*director.BundleInstanceAuthOutput, error) {
	fake.requestBundleInstanceCredentialsCreationMutex.Lock()
	ret, specificReturn := fake.requestBundleInstanceCredentialsCreationReturnsOnCall[len(fake.requestBundleInstanceCredentialsCreationArgsForCall)]
	fake.requestBundleInstanceCredentialsCreationArgsForCall = append(fake.requestBundleInstanceCredentialsCreationArgsForCall, struct {
		arg1 context.Context
		arg2 *director.BundleInstanceCredentialsInput
	}{arg1, arg2})
	stub := fake.RequestBundleInstanceCredentialsCreationStub
	fakeReturns := fake.requestBundleInstanceCredentialsCreationReturns
	fake.recordInvocation("RequestBundleInstanceCredentialsCreation", []interface{}{arg1, arg2})
	fake.requestBundleInstanceCredentialsCreationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBundleCredentialsCreateRequester) RequestBundleInstanceCredentialsCreationCallCount() int {
	fake.requestBundleInstanceCredentialsCreationMutex.RLock()
	defer fake.requestBundleInstanceCredentialsCreationMutex.RUnlock()
	return len(fake.requestBundleInstanceCredentialsCreationArgsForCall)
}

func (fake *FakeBundleCredentialsCreateRequester) RequestBundleInstanceCredentialsCreationCalls(stub func(context.Context, *director.BundleInstanceCredentialsInput) (*director.BundleInstanceAuthOutput, error)) {
	fake.requestBundleInstanceCredentialsCreationMutex.Lock()
	defer fake.requestBundleInstanceCredentialsCreationMutex.Unlock()
	fake.RequestBundleInstanceCredentialsCreationStub = stub
}

func (fake *FakeBundleCredentialsCreateRequester) RequestBundleInstanceCredentialsCreationArgsForCall(i int) (context.Context, *director.BundleInstanceCredentialsInput) {
	fake.requestBundleInstanceCredentialsCreationMutex.RLock()
	defer fake.requestBundleInstanceCredentialsCreationMutex.RUnlock()
	argsForCall := fake.requestBundleInstanceCredentialsCreationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBundleCredentialsCreateRequester) RequestBundleInstanceCredentialsCreationReturns(result1 *director.BundleInstanceAuthOutput, result2 error) {
	fake.requestBundleInstanceCredentialsCreationMutex.Lock()
	defer fake.requestBundleInstanceCredentialsCreationMutex.Unlock()
	fake.RequestBundleInstanceCredentialsCreationStub = nil
	fake.requestBundleInstanceCredentialsCreationReturns = struct {
		result1 *director.BundleInstanceAuthOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeBundleCredentialsCreateRequester) RequestBundleInstanceCredentialsCreationReturnsOnCall(i int, result1 *director.BundleInstanceAuthOutput, result2 error) {
	fake.requestBundleInstanceCredentialsCreationMutex.Lock()
	defer fake.requestBundleInstanceCredentialsCreationMutex.Unlock()
	fake.RequestBundleInstanceCredentialsCreationStub = nil
	if fake.requestBundleInstanceCredentialsCreationReturnsOnCall == nil {
		fake.requestBundleInstanceCredentialsCreationReturnsOnCall = make(map[int]struct {
			result1 *director.BundleInstanceAuthOutput
			result2 error
		})
	}
	fake.requestBundleInstanceCredentialsCreationReturnsOnCall[i] = struct {
		result1 *director.BundleInstanceAuthOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeBundleCredentialsCreateRequester) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.requestBundleInstanceCredentialsCreationMutex.RLock()
	defer fake.requestBundleInstanceCredentialsCreationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBundleCredentialsCreateRequester) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.BundleCredentialsCreateRequester = new(FakeBundleCredentialsCreateRequester)
