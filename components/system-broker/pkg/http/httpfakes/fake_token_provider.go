// Code generated by counterfeiter. DO NOT EDIT.
package httpfakes

import (
	"context"
	"sync"

	"github.com/kyma-incubator/compass/components/system-broker/pkg/http"
)

type FakeTokenProvider struct {
	GetAuthorizationTokenStub        func(context.Context) (http.Token, error)
	getAuthorizationTokenMutex       sync.RWMutex
	getAuthorizationTokenArgsForCall []struct {
		arg1 context.Context
	}
	getAuthorizationTokenReturns struct {
		result1 http.Token
		result2 error
	}
	getAuthorizationTokenReturnsOnCall map[int]struct {
		result1 http.Token
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenProvider) GetAuthorizationToken(arg1 context.Context) (http.Token, error) {
	fake.getAuthorizationTokenMutex.Lock()
	ret, specificReturn := fake.getAuthorizationTokenReturnsOnCall[len(fake.getAuthorizationTokenArgsForCall)]
	fake.getAuthorizationTokenArgsForCall = append(fake.getAuthorizationTokenArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("GetAuthorizationToken", []interface{}{arg1})
	fake.getAuthorizationTokenMutex.Unlock()
	if fake.GetAuthorizationTokenStub != nil {
		return fake.GetAuthorizationTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAuthorizationTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTokenProvider) GetAuthorizationTokenCallCount() int {
	fake.getAuthorizationTokenMutex.RLock()
	defer fake.getAuthorizationTokenMutex.RUnlock()
	return len(fake.getAuthorizationTokenArgsForCall)
}

func (fake *FakeTokenProvider) GetAuthorizationTokenCalls(stub func(context.Context) (http.Token, error)) {
	fake.getAuthorizationTokenMutex.Lock()
	defer fake.getAuthorizationTokenMutex.Unlock()
	fake.GetAuthorizationTokenStub = stub
}

func (fake *FakeTokenProvider) GetAuthorizationTokenArgsForCall(i int) context.Context {
	fake.getAuthorizationTokenMutex.RLock()
	defer fake.getAuthorizationTokenMutex.RUnlock()
	argsForCall := fake.getAuthorizationTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTokenProvider) GetAuthorizationTokenReturns(result1 http.Token, result2 error) {
	fake.getAuthorizationTokenMutex.Lock()
	defer fake.getAuthorizationTokenMutex.Unlock()
	fake.GetAuthorizationTokenStub = nil
	fake.getAuthorizationTokenReturns = struct {
		result1 http.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenProvider) GetAuthorizationTokenReturnsOnCall(i int, result1 http.Token, result2 error) {
	fake.getAuthorizationTokenMutex.Lock()
	defer fake.getAuthorizationTokenMutex.Unlock()
	fake.GetAuthorizationTokenStub = nil
	if fake.getAuthorizationTokenReturnsOnCall == nil {
		fake.getAuthorizationTokenReturnsOnCall = make(map[int]struct {
			result1 http.Token
			result2 error
		})
	}
	fake.getAuthorizationTokenReturnsOnCall[i] = struct {
		result1 http.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAuthorizationTokenMutex.RLock()
	defer fake.getAuthorizationTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ http.TokenProvider = new(FakeTokenProvider)
