// Code generated by counterfeiter. DO NOT EDIT.
package osbfakes

import (
	"sync"

	"github.com/kyma-incubator/compass/components/director/pkg/graphql"
	"github.com/pivotal-cf/brokerapi/v7/domain"
)

type FakeConverter struct {
	ConvertStub        func(*graphql.ApplicationExt) (*domain.Service, error)
	convertMutex       sync.RWMutex
	convertArgsForCall []struct {
		arg1 *graphql.ApplicationExt
	}
	convertReturns struct {
		result1 *domain.Service
		result2 error
	}
	convertReturnsOnCall map[int]struct {
		result1 *domain.Service
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConverter) Convert(arg1 *graphql.ApplicationExt) (*domain.Service, error) {
	fake.convertMutex.Lock()
	ret, specificReturn := fake.convertReturnsOnCall[len(fake.convertArgsForCall)]
	fake.convertArgsForCall = append(fake.convertArgsForCall, struct {
		arg1 *graphql.ApplicationExt
	}{arg1})
	fake.recordInvocation("Convert", []interface{}{arg1})
	fake.convertMutex.Unlock()
	if fake.ConvertStub != nil {
		return fake.ConvertStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.convertReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConverter) ConvertCallCount() int {
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	return len(fake.convertArgsForCall)
}

func (fake *FakeConverter) ConvertCalls(stub func(*graphql.ApplicationExt) (*domain.Service, error)) {
	fake.convertMutex.Lock()
	defer fake.convertMutex.Unlock()
	fake.ConvertStub = stub
}

func (fake *FakeConverter) ConvertArgsForCall(i int) *graphql.ApplicationExt {
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	argsForCall := fake.convertArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConverter) ConvertReturns(result1 *domain.Service, result2 error) {
	fake.convertMutex.Lock()
	defer fake.convertMutex.Unlock()
	fake.ConvertStub = nil
	fake.convertReturns = struct {
		result1 *domain.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeConverter) ConvertReturnsOnCall(i int, result1 *domain.Service, result2 error) {
	fake.convertMutex.Lock()
	defer fake.convertMutex.Unlock()
	fake.ConvertStub = nil
	if fake.convertReturnsOnCall == nil {
		fake.convertReturnsOnCall = make(map[int]struct {
			result1 *domain.Service
			result2 error
		})
	}
	fake.convertReturnsOnCall[i] = struct {
		result1 *domain.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeConverter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConverter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
