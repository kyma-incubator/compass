// Code generated by counterfeiter. DO NOT EDIT.
package osbfakes

import (
	"context"
	"sync"

	"github.com/kyma-incubator/compass/components/system-broker/internal/director"
)

type FakePackageCredentialsFetcher struct {
	FetchPackageInstanceAuthStub        func(context.Context, *director.PackageInstanceInput) (*director.PackageInstanceAuthOutput, error)
	fetchPackageInstanceAuthMutex       sync.RWMutex
	fetchPackageInstanceAuthArgsForCall []struct {
		arg1 context.Context
		arg2 *director.PackageInstanceInput
	}
	fetchPackageInstanceAuthReturns struct {
		result1 *director.PackageInstanceAuthOutput
		result2 error
	}
	fetchPackageInstanceAuthReturnsOnCall map[int]struct {
		result1 *director.PackageInstanceAuthOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePackageCredentialsFetcher) FetchPackageInstanceAuth(arg1 context.Context, arg2 *director.PackageInstanceInput) (*director.PackageInstanceAuthOutput, error) {
	fake.fetchPackageInstanceAuthMutex.Lock()
	ret, specificReturn := fake.fetchPackageInstanceAuthReturnsOnCall[len(fake.fetchPackageInstanceAuthArgsForCall)]
	fake.fetchPackageInstanceAuthArgsForCall = append(fake.fetchPackageInstanceAuthArgsForCall, struct {
		arg1 context.Context
		arg2 *director.PackageInstanceInput
	}{arg1, arg2})
	fake.recordInvocation("FetchPackageInstanceAuth", []interface{}{arg1, arg2})
	fake.fetchPackageInstanceAuthMutex.Unlock()
	if fake.FetchPackageInstanceAuthStub != nil {
		return fake.FetchPackageInstanceAuthStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fetchPackageInstanceAuthReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePackageCredentialsFetcher) FetchPackageInstanceAuthCallCount() int {
	fake.fetchPackageInstanceAuthMutex.RLock()
	defer fake.fetchPackageInstanceAuthMutex.RUnlock()
	return len(fake.fetchPackageInstanceAuthArgsForCall)
}

func (fake *FakePackageCredentialsFetcher) FetchPackageInstanceAuthCalls(stub func(context.Context, *director.PackageInstanceInput) (*director.PackageInstanceAuthOutput, error)) {
	fake.fetchPackageInstanceAuthMutex.Lock()
	defer fake.fetchPackageInstanceAuthMutex.Unlock()
	fake.FetchPackageInstanceAuthStub = stub
}

func (fake *FakePackageCredentialsFetcher) FetchPackageInstanceAuthArgsForCall(i int) (context.Context, *director.PackageInstanceInput) {
	fake.fetchPackageInstanceAuthMutex.RLock()
	defer fake.fetchPackageInstanceAuthMutex.RUnlock()
	argsForCall := fake.fetchPackageInstanceAuthArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePackageCredentialsFetcher) FetchPackageInstanceAuthReturns(result1 *director.PackageInstanceAuthOutput, result2 error) {
	fake.fetchPackageInstanceAuthMutex.Lock()
	defer fake.fetchPackageInstanceAuthMutex.Unlock()
	fake.FetchPackageInstanceAuthStub = nil
	fake.fetchPackageInstanceAuthReturns = struct {
		result1 *director.PackageInstanceAuthOutput
		result2 error
	}{result1, result2}
}

func (fake *FakePackageCredentialsFetcher) FetchPackageInstanceAuthReturnsOnCall(i int, result1 *director.PackageInstanceAuthOutput, result2 error) {
	fake.fetchPackageInstanceAuthMutex.Lock()
	defer fake.fetchPackageInstanceAuthMutex.Unlock()
	fake.FetchPackageInstanceAuthStub = nil
	if fake.fetchPackageInstanceAuthReturnsOnCall == nil {
		fake.fetchPackageInstanceAuthReturnsOnCall = make(map[int]struct {
			result1 *director.PackageInstanceAuthOutput
			result2 error
		})
	}
	fake.fetchPackageInstanceAuthReturnsOnCall[i] = struct {
		result1 *director.PackageInstanceAuthOutput
		result2 error
	}{result1, result2}
}

func (fake *FakePackageCredentialsFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchPackageInstanceAuthMutex.RLock()
	defer fake.fetchPackageInstanceAuthMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePackageCredentialsFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
