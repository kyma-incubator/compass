// Code generated by counterfeiter. DO NOT EDIT.
package osbfakes

import (
	"context"
	"sync"

	"github.com/kyma-incubator/compass/components/system-broker/internal/director"
)

type FakeApplicationsLister struct {
	FetchApplicationsStub        func(context.Context) (*director.ApplicationsOutput, error)
	fetchApplicationsMutex       sync.RWMutex
	fetchApplicationsArgsForCall []struct {
		arg1 context.Context
	}
	fetchApplicationsReturns struct {
		result1 *director.ApplicationsOutput
		result2 error
	}
	fetchApplicationsReturnsOnCall map[int]struct {
		result1 *director.ApplicationsOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeApplicationsLister) FetchApplications(arg1 context.Context) (*director.ApplicationsOutput, error) {
	fake.fetchApplicationsMutex.Lock()
	ret, specificReturn := fake.fetchApplicationsReturnsOnCall[len(fake.fetchApplicationsArgsForCall)]
	fake.fetchApplicationsArgsForCall = append(fake.fetchApplicationsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("FetchApplications", []interface{}{arg1})
	fake.fetchApplicationsMutex.Unlock()
	if fake.FetchApplicationsStub != nil {
		return fake.FetchApplicationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fetchApplicationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeApplicationsLister) FetchApplicationsCallCount() int {
	fake.fetchApplicationsMutex.RLock()
	defer fake.fetchApplicationsMutex.RUnlock()
	return len(fake.fetchApplicationsArgsForCall)
}

func (fake *FakeApplicationsLister) FetchApplicationsCalls(stub func(context.Context) (*director.ApplicationsOutput, error)) {
	fake.fetchApplicationsMutex.Lock()
	defer fake.fetchApplicationsMutex.Unlock()
	fake.FetchApplicationsStub = stub
}

func (fake *FakeApplicationsLister) FetchApplicationsArgsForCall(i int) context.Context {
	fake.fetchApplicationsMutex.RLock()
	defer fake.fetchApplicationsMutex.RUnlock()
	argsForCall := fake.fetchApplicationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeApplicationsLister) FetchApplicationsReturns(result1 *director.ApplicationsOutput, result2 error) {
	fake.fetchApplicationsMutex.Lock()
	defer fake.fetchApplicationsMutex.Unlock()
	fake.FetchApplicationsStub = nil
	fake.fetchApplicationsReturns = struct {
		result1 *director.ApplicationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeApplicationsLister) FetchApplicationsReturnsOnCall(i int, result1 *director.ApplicationsOutput, result2 error) {
	fake.fetchApplicationsMutex.Lock()
	defer fake.fetchApplicationsMutex.Unlock()
	fake.FetchApplicationsStub = nil
	if fake.fetchApplicationsReturnsOnCall == nil {
		fake.fetchApplicationsReturnsOnCall = make(map[int]struct {
			result1 *director.ApplicationsOutput
			result2 error
		})
	}
	fake.fetchApplicationsReturnsOnCall[i] = struct {
		result1 *director.ApplicationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeApplicationsLister) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchApplicationsMutex.RLock()
	defer fake.fetchApplicationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeApplicationsLister) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
