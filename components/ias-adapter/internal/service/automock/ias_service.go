// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	ias "github.com/kyma-incubator/compass/components/ias-adapter/internal/service/ias"
	mock "github.com/stretchr/testify/mock"

	types "github.com/kyma-incubator/compass/components/ias-adapter/internal/types"
)

// IASService is an autogenerated mock type for the IASService type
type IASService struct {
	mock.Mock
}

// CreateApplication provides a mock function with given fields: ctx, iasHost, app
func (_m *IASService) CreateApplication(ctx context.Context, iasHost string, app *types.Application) error {
	ret := _m.Called(ctx, iasHost, app)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.Application) error); ok {
		r0 = rf(ctx, iasHost, app)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetApplication provides a mock function with given fields: ctx, iasHost, clientID, appTenantID
func (_m *IASService) GetApplication(ctx context.Context, iasHost string, clientID string, appTenantID string) (types.Application, error) {
	ret := _m.Called(ctx, iasHost, clientID, appTenantID)

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 types.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (types.Application, error)); ok {
		return rf(ctx, iasHost, clientID, appTenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) types.Application); ok {
		r0 = rf(ctx, iasHost, clientID, appTenantID)
	} else {
		r0 = ret.Get(0).(types.Application)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, iasHost, clientID, appTenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplicationConsumedAPIs provides a mock function with given fields: ctx, data
func (_m *IASService) UpdateApplicationConsumedAPIs(ctx context.Context, data ias.UpdateData) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplicationConsumedAPIs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ias.UpdateData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIASService creates a new instance of IASService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIASService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IASService {
	mock := &IASService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
