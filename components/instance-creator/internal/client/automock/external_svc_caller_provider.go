// Code generated by mockery. DO NOT EDIT.

package automock

import (
	client "github.com/kyma-incubator/compass/components/instance-creator/internal/client"
	config "github.com/kyma-incubator/compass/components/instance-creator/internal/config"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ExternalSvcCallerProvider is an autogenerated mock type for the ExternalSvcCallerProvider type
type ExternalSvcCallerProvider struct {
	mock.Mock
}

// GetCaller provides a mock function with given fields: cfg, region
func (_m *ExternalSvcCallerProvider) GetCaller(cfg config.Config, region string) (client.ExternalSvcCaller, error) {
	ret := _m.Called(cfg, region)

	var r0 client.ExternalSvcCaller
	if rf, ok := ret.Get(0).(func(config.Config, string) client.ExternalSvcCaller); ok {
		r0 = rf(cfg, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.ExternalSvcCaller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(config.Config, string) error); ok {
		r1 = rf(cfg, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExternalSvcCallerProvider creates a new instance of ExternalSvcCallerProvider. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewExternalSvcCallerProvider(t testing.TB) *ExternalSvcCallerProvider {
	mock := &ExternalSvcCallerProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
