// Code generated by mockery. DO NOT EDIT.

package automock

import (
	testing "testing"

	resources "github.com/kyma-incubator/compass/components/instance-creator/internal/client/resources"
	mock "github.com/stretchr/testify/mock"
)

// ResourceMatchParameters is an autogenerated mock type for the ResourceMatchParameters type
type ResourceMatchParameters struct {
	mock.Mock
}

// Match provides a mock function with given fields: _a0
func (_m *ResourceMatchParameters) Match(_a0 resources.Resources) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(resources.Resources) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(resources.Resources) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchMultiple provides a mock function with given fields: _a0
func (_m *ResourceMatchParameters) MatchMultiple(_a0 resources.Resources) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(resources.Resources) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(resources.Resources) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewResourceMatchParameters creates a new instance of ResourceMatchParameters. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewResourceMatchParameters(t testing.TB) *ResourceMatchParameters {
	mock := &ResourceMatchParameters{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
