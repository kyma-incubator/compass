// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	types "github.com/kyma-incubator/compass/components/instance-creator/internal/client/types"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateServiceInstance provides a mock function with given fields: ctx, region, serviceInstanceName, planID, subaccountID, parameters
func (_m *Client) CreateServiceInstance(ctx context.Context, region string, serviceInstanceName string, planID string, subaccountID string, parameters []byte) (string, error) {
	ret := _m.Called(ctx, region, serviceInstanceName, planID, subaccountID, parameters)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []byte) string); ok {
		r0 = rf(ctx, region, serviceInstanceName, planID, subaccountID, parameters)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []byte) error); ok {
		r1 = rf(ctx, region, serviceInstanceName, planID, subaccountID, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceKey provides a mock function with given fields: ctx, region, serviceKeyName, serviceInstanceID, subaccountID, parameters
func (_m *Client) CreateServiceKey(ctx context.Context, region string, serviceKeyName string, serviceInstanceID string, subaccountID string, parameters []byte) (string, error) {
	ret := _m.Called(ctx, region, serviceKeyName, serviceInstanceID, subaccountID, parameters)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []byte) string); ok {
		r0 = rf(ctx, region, serviceKeyName, serviceInstanceID, subaccountID, parameters)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []byte) error); ok {
		r1 = rf(ctx, region, serviceKeyName, serviceInstanceID, subaccountID, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceInstance provides a mock function with given fields: ctx, region, serviceInstanceID, serviceInstanceName, subaccountID
func (_m *Client) DeleteServiceInstance(ctx context.Context, region string, serviceInstanceID string, serviceInstanceName string, subaccountID string) error {
	ret := _m.Called(ctx, region, serviceInstanceID, serviceInstanceName, subaccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, region, serviceInstanceID, serviceInstanceName, subaccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteServiceKeys provides a mock function with given fields: ctx, region, serviceInstanceID, serviceInstanceName, subaccountID
func (_m *Client) DeleteServiceKeys(ctx context.Context, region string, serviceInstanceID string, serviceInstanceName string, subaccountID string) error {
	ret := _m.Called(ctx, region, serviceInstanceID, serviceInstanceName, subaccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, region, serviceInstanceID, serviceInstanceName, subaccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveServiceInstanceIDByName provides a mock function with given fields: ctx, region, serviceInstanceName, subaccountID
func (_m *Client) RetrieveServiceInstanceIDByName(ctx context.Context, region string, serviceInstanceName string, subaccountID string) (string, error) {
	ret := _m.Called(ctx, region, serviceInstanceName, subaccountID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, region, serviceInstanceName, subaccountID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, region, serviceInstanceName, subaccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveServiceKeyByID provides a mock function with given fields: ctx, region, serviceKeyID, subaccountID
func (_m *Client) RetrieveServiceKeyByID(ctx context.Context, region string, serviceKeyID string, subaccountID string) (*types.ServiceKey, error) {
	ret := _m.Called(ctx, region, serviceKeyID, subaccountID)

	var r0 *types.ServiceKey
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.ServiceKey); ok {
		r0 = rf(ctx, region, serviceKeyID, subaccountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ServiceKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, region, serviceKeyID, subaccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveServiceOffering provides a mock function with given fields: ctx, region, catalogName, subaccountID
func (_m *Client) RetrieveServiceOffering(ctx context.Context, region string, catalogName string, subaccountID string) (string, error) {
	ret := _m.Called(ctx, region, catalogName, subaccountID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, region, catalogName, subaccountID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, region, catalogName, subaccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveServicePlan provides a mock function with given fields: ctx, region, planName, offeringID, subaccountID
func (_m *Client) RetrieveServicePlan(ctx context.Context, region string, planName string, offeringID string, subaccountID string) (string, error) {
	ret := _m.Called(ctx, region, planName, offeringID, subaccountID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) string); ok {
		r0 = rf(ctx, region, planName, offeringID, subaccountID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, region, planName, offeringID, subaccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t testing.TB) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
