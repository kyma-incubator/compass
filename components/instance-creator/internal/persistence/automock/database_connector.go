// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	persistence "github.com/kyma-incubator/compass/components/instance-creator/internal/persistence"
	mock "github.com/stretchr/testify/mock"
)

// DatabaseConnector is an autogenerated mock type for the DatabaseConnector type
type DatabaseConnector struct {
	mock.Mock
}

// GetConnection provides a mock function with given fields: ctx
func (_m *DatabaseConnector) GetConnection(ctx context.Context) (persistence.Connection, error) {
	ret := _m.Called(ctx)

	var r0 persistence.Connection
	if rf, ok := ret.Get(0).(func(context.Context) persistence.Connection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(persistence.Connection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDatabaseConnector interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabaseConnector creates a new instance of DatabaseConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabaseConnector(t mockConstructorTestingTNewDatabaseConnector) *DatabaseConnector {
	mock := &DatabaseConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
