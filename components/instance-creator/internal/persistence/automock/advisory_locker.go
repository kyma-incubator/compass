// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AdvisoryLocker is an autogenerated mock type for the AdvisoryLocker type
type AdvisoryLocker struct {
	mock.Mock
}

// Lock provides a mock function with given fields: ctx, key
func (_m *AdvisoryLocker) Lock(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryLock provides a mock function with given fields: ctx, key
func (_m *AdvisoryLocker) TryLock(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unlock provides a mock function with given fields: ctx, key
func (_m *AdvisoryLocker) Unlock(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAdvisoryLocker interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdvisoryLocker creates a new instance of AdvisoryLocker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdvisoryLocker(t mockConstructorTestingTNewAdvisoryLocker) *AdvisoryLocker {
	mock := &AdvisoryLocker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
