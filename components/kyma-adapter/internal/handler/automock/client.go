// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateBasicBundleInstanceAuth provides a mock function with given fields: ctx, tenant, bndlID, rtmID, username, password
func (_m *Client) CreateBasicBundleInstanceAuth(ctx context.Context, tenant string, bndlID string, rtmID string, username string, password string) error {
	ret := _m.Called(ctx, tenant, bndlID, rtmID, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) error); ok {
		r0 = rf(ctx, tenant, bndlID, rtmID, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOauthBundleInstanceAuth provides a mock function with given fields: ctx, tenant, bndlID, rtmID, tokenServiceURL, clientID, clientSecret
func (_m *Client) CreateOauthBundleInstanceAuth(ctx context.Context, tenant string, bndlID string, rtmID string, tokenServiceURL string, clientID string, clientSecret string) error {
	ret := _m.Called(ctx, tenant, bndlID, rtmID, tokenServiceURL, clientID, clientSecret)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) error); ok {
		r0 = rf(ctx, tenant, bndlID, rtmID, tokenServiceURL, clientID, clientSecret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBundleInstanceAuth provides a mock function with given fields: ctx, tenant, authID
func (_m *Client) DeleteBundleInstanceAuth(ctx context.Context, tenant string, authID string) error {
	ret := _m.Called(ctx, tenant, authID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tenant, authID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetApplicationBundles provides a mock function with given fields: ctx, appID, tenant
func (_m *Client) GetApplicationBundles(ctx context.Context, appID string, tenant string) ([]*graphql.BundleExt, error) {
	ret := _m.Called(ctx, appID, tenant)

	var r0 []*graphql.BundleExt
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*graphql.BundleExt); ok {
		r0 = rf(ctx, appID, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graphql.BundleExt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appID, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBasicBundleInstanceAuth provides a mock function with given fields: ctx, tenant, authID, bndlID, username, password
func (_m *Client) UpdateBasicBundleInstanceAuth(ctx context.Context, tenant string, authID string, bndlID string, username string, password string) error {
	ret := _m.Called(ctx, tenant, authID, bndlID, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) error); ok {
		r0 = rf(ctx, tenant, authID, bndlID, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOauthBundleInstanceAuth provides a mock function with given fields: ctx, tenant, authID, bndlID, tokenServiceURL, clientID, clientSecret
func (_m *Client) UpdateOauthBundleInstanceAuth(ctx context.Context, tenant string, authID string, bndlID string, tokenServiceURL string, clientID string, clientSecret string) error {
	ret := _m.Called(ctx, tenant, authID, bndlID, tokenServiceURL, clientID, clientSecret)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) error); ok {
		r0 = rf(ctx, tenant, authID, bndlID, tokenServiceURL, clientID, clientSecret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
