
enum KymaModule {
    Backup
    BackupInit
    Jaeger
    Logging
    Monitoring
    PrometheusOperator
    Kiali
    KnativeBuild
}

# Configuration of Runtime. We can consider returning kubeconfig as a part of this type.
type RuntimeConfig {
    clusterConfig: ClusterConfig
    credentialsSecretName: String
    kymaConfig: KymaConfig
    kubeconfig: String
}

union ClusterConfig = GardenerConfig | GCPConfig

type GardenerConfig {
    name: String                                    # Cluster name
    projectName: String                             # Gardener project in which the cluster is created
    kubernetesVersion: String                       # Kubernetes version to be installed on the cluster
    nodeCount: Int                                  # Number of nodes
    volumeSizeGB: Int                               # Size of the available disk, provided in GB
    machineType: String                             # Type of node machines, varies depending on the target provider
    region: String                                  # Region in which the cluster is created
    provider: String                                # Target provider on which to provision the cluster (Azure, AWS, GCP)
    seed: String                                    # Name of the seed cluster that runs the control plane of the Shoot
    targetSecret: String                            # Secret in Gardener containing credentials to the target provider
    diskType: String                                # Disk type, varies depending on the target provider
    workerCidr: String                              # Classless Inter-Domain Routing for the nodes
    autoScalerMin: Int                              # Minimum number of VMs to create
    autoScalerMax: Int                              # Maximum number of VMs to create
    maxSurge: Int                                   # Maximum number of VMs created during an update
    maxUnavailable: Int                             # Maximum number of VMs that can be unavailable during an update
    providerSpecificConfig: ProviderSpecificConfig  # Additional parameters, vary depending on the target provider
}

union ProviderSpecificConfig = GCPProviderConfig | AzureProviderConfig | AWSProviderConfig

type GCPProviderConfig {
    zone: String
}

type AzureProviderConfig {
    vnetCidr: String
}

type AWSProviderConfig {
    zone: String
    vpcCidr: String
    publicCidr: String
    internalCidr: String
}

type GCPConfig {
    name: String
    projectName: String
    kubernetesVersion: String
    numberOfNodes: Int
    bootDiskSizeGB: Int
    machineType: String
    region: String
    zone: String
}

type KymaConfig {
    version: String
    modules: [KymaModule]
}

type OperationStatus {
    id: String
    operation: OperationType!
    state: OperationState!
    message: String
    runtimeID: String
}

enum OperationType {
    Provision
    Upgrade
    Deprovision
    ReconnectRuntime
}

type Error {
    message: String
}

type RuntimeConnectionStatus {
    status: RuntimeAgentConnectionStatus!
    errors: [Error!]
}

# We should consider renamig this type, as it contains more than just status.
type RuntimeStatus {
    lastOperationStatus: OperationStatus
    runtimeConnectionStatus: RuntimeConnectionStatus
    runtimeConfiguration: RuntimeConfig
}

enum OperationState {
    Pending
    InProgress
    Succeeded
    Failed
}

enum RuntimeAgentConnectionStatus {
    Pending
    Connected
    Disconnected
}

# Inputs

input ProvisionRuntimeInput {
    clusterConfig: ClusterConfigInput!
    credentials: CredentialsInput!
    kymaConfig: KymaConfigInput!
}

input CredentialsInput {
    secretName: String!
}

input ClusterConfigInput {
    gardenerConfig: GardenerConfigInput
    gcpConfig: GCPConfigInput
}

input GardenerConfigInput {
    name: String!
    projectName: String!
    kubernetesVersion: String!
    nodeCount: Int!
    volumeSizeGB: Int!
    machineType: String!
    region: String!
    provider: String!
    seed: String!
    targetSecret: String!
    diskType: String!
    workerCidr: String!
    autoScalerMin: Int!
    autoScalerMax: Int!
    maxSurge: Int!
    maxUnavailable: Int!
    providerSpecificConfig: ProviderSpecificInput!
}

input ProviderSpecificInput {
    gcpConfig: GCPProviderConfigInput
    azureConfig: AzureProviderConfigInput
    awsConfig: AWSProviderConfigInput
}

input GCPProviderConfigInput {
    zone: String!
}

input AzureProviderConfigInput {
    vnetCidr: String!
}

input AWSProviderConfigInput {
    zone: String!
    vpcCidr: String!
    publicCidr: String!
    internalCidr: String!
}

input GCPConfigInput {
    name: String!
    projectName: String!
    kubernetesVersion: String!
    numberOfNodes: Int!
    bootDiskSizeGB: Int!
    machineType: String!
    region: String! # TODO: later we may require either Region or Zone
    zone: String
}

input KymaConfigInput {
    version: String!
    modules: [KymaModule!]
}

input UpgradeRuntimeInput {
    clusterConfig: UpgradeClusterInput
    kymaConfig: KymaConfigInput
}

input UpgradeClusterInput {
    version: String!
}

type Mutation {
    # Runtime Management; only one asynchronous operation per RuntimeID can run at any given point in time
    provisionRuntime(id: String!, config: ProvisionRuntimeInput!): String!
    upgradeRuntime(id: String!, config: UpgradeRuntimeInput!): String!
    deprovisionRuntime(id: String!): String!
    cleanupRuntimeData(id: String!): String!

    # Compass Runtime Agent Connection Management
    reconnectRuntimeAgent(id: String!): String!
}

type Query {
    # Provides current status of specified Runtime
    runtimeStatus(id: String!): RuntimeStatus

    # Provides status of specified operation
    runtimeOperationStatus(id: String!): OperationStatus
}