
# Configuration of Runtime. We can consider returning kubeconfig as a part of this type.
type RuntimeConfig {
    clusterConfig: ClusterConfig
    kymaConfig: KymaConfig
    kubeconfig: String
}

union ClusterConfig = GardenerConfig | GCPConfig

type GardenerConfig {
    name: String
    kubernetesVersion: String
    nodeCount: Int
    volumeSizeGB: Int
    machineType: String
    region: String
    provider: String
    seed: String
    targetSecret: String
    diskType: String
    workerCidr: String
    autoScalerMin: Int
    autoScalerMax: Int
    maxSurge: Int
    maxUnavailable: Int
    providerSpecificConfig: ProviderSpecificConfig
}

union ProviderSpecificConfig = GCPProviderConfig | AzureProviderConfig | AWSProviderConfig

type GCPProviderConfig {
    zone: String
}

type AzureProviderConfig {
    vnetCidr: String
}

type AWSProviderConfig {
    zone: String
    vpcCidr: String
    publicCidr: String
    internalCidr: String
}

type GCPConfig {
    name: String
    projectName: String
    kubernetesVersion: String
    numberOfNodes: Int
    bootDiskSizeGB: Int
    machineType: String
    region: String
    zone: String
}

type ConfigEntry {
    key: String!
    value: String!
    secret: Boolean
}

type ComponentConfiguration {
    component: String!
    namespace: String!
    configuration: [ConfigEntry]
}

type KymaConfig {
    version: String
    components: [ComponentConfiguration]
    configuration: [ConfigEntry]
}

type OperationStatus {
    id: String
    operation: OperationType!
    state: OperationState!
    message: String
    runtimeID: String
}

enum OperationType {
    Provision
    Upgrade
    Deprovision
    ReconnectRuntime
}

type Error {
    message: String
}

type RuntimeConnectionStatus {
    status: RuntimeAgentConnectionStatus!
    errors: [Error!]
}

# We should consider renamig this type, as it contains more than just status.
type RuntimeStatus {
    lastOperationStatus: OperationStatus
    runtimeConnectionStatus: RuntimeConnectionStatus
    runtimeConfiguration: RuntimeConfig
}

enum OperationState {
    Pending
    InProgress
    Succeeded
    Failed
}

enum RuntimeAgentConnectionStatus {
    Pending
    Connected
    Disconnected
}

# Inputs

scalar Labels

input RuntimeInput {
    name: String!           # Name of the Runtime
    description: String     # Runtime description
    labels: Labels
}

input ProvisionRuntimeInput {
    runtimeInput: RuntimeInput!         # Configuration of the Runtime to register in Director
    clusterConfig: ClusterConfigInput!  # Configuration of the cluster to provision
    kymaConfig: KymaConfigInput!        # Configuration of Kyma to be installed on the provisioned cluster
    credentials: CredentialsInput       # Credentials # Field is ignored for now
}

input CredentialsInput {
    secretName: String!     # Secret name
}

input ClusterConfigInput {
    gardenerConfig: GardenerConfigInput     # Gardener-specific configuration for the cluster to be provisioned
    gcpConfig: GCPConfigInput               # GCP-specific configuration for the cluster to be provisioned
}

input GardenerConfigInput {                   # Gardener project in which the cluster is created
    kubernetesVersion: String!                      # Kubernetes version to be installed on the cluster
    nodeCount: Int!                                 # Number of nodes to create
    volumeSizeGB: Int!                              # Size of the available disk, provided in GB
    machineType: String!                            # Type of node machines, varies depending on the target provider
    region: String!                                 # Region in which the cluster is created
    provider: String!                               # Target provider on which to provision the cluster (Azure, AWS, GCP)
    targetSecret: String!                           # Secret in Gardener containing credentials to the target provider
    diskType: String!                               # Disk type, varies depending on the target provider
    workerCidr: String!                             # Classless Inter-Domain Routing range for the nodes
    autoScalerMin: Int!                             # Minimum number of VMs to create
    autoScalerMax: Int!                             # Maximum number of VMs to create
    maxSurge: Int!                                  # Maximum number of VMs created during an update
    maxUnavailable: Int!                            # Maximum number of VMs that can be unavailable during an update
    providerSpecificConfig: ProviderSpecificInput!  # Additional parameters, vary depending on the target provider
    seed: String                                    # Name of the seed cluster that runs the control plane of the Shoot. If not provided will be assigned automatically
}

input ProviderSpecificInput {
    gcpConfig: GCPProviderConfigInput        # GCP-specific configuration for the cluster to be provisioned
    azureConfig: AzureProviderConfigInput    # Azure-specific configuration for the cluster to be provisioned
    awsConfig: AWSProviderConfigInput        # AWS-specific configuration for the cluster to be provisioned
}

input GCPProviderConfigInput {
    zone: String!      # Zone in which to create the cluster
}

input AzureProviderConfigInput {
    vnetCidr: String!   # Classless Inter-Domain Routing for the Azure Virtual Network
}

input AWSProviderConfigInput {
    zone: String!           # Zone in which to create the cluster
    vpcCidr: String!        # Classless Inter-Domain Routing for the virtual public cloud
    publicCidr: String!     # Classless Inter-Domain Routing for the public subnet
    internalCidr: String!   # Classless Inter-Domain Routing for the private subnet
}

input GCPConfigInput {
    name: String!                   # Name of the cluster to create
    projectName: String!            # GCP project in which to create the cluster
    kubernetesVersion: String!      # Kubernetes version to be installed on the cluster
    numberOfNodes: Int!             # Number of nodes to create
    bootDiskSizeGB: Int!            # Size of the available disk, provided in GB
    machineType: String!            # Type of node machines
    region: String! # TODO: later we may require either Region or Zone ## Region in which to create the cluster
    zone: String                    # Zone in which to create the cluster
}

input KymaConfigInput {
    version: String!                            # Kyma version to install on the cluster
    components: [ComponentConfigurationInput]!  # List of Kyma Components with specific configuration
    configuration: [ConfigEntryInput]           # Global Kyma configuration
}

input ConfigEntryInput {
    key: String!        # Configuration property key
    value: String!      # Configuration property value
    secret: Boolean     # Specifies if the property is confidential
}

input ComponentConfigurationInput {
    component: String!                    # Kyma component name
    namespace: String!                    # Namespace to which component should be installed
    configuration: [ConfigEntryInput]     # Component specific configuration
}

input UpgradeRuntimeInput {
    clusterConfig: UpgradeClusterInput  # Configuration of the cluster to upgrade
    kymaConfig: KymaConfigInput         # Configuration of the Kyma Runtime to upgrade
}

input UpgradeClusterInput {
    version: String!
}

type Mutation {
    # Runtime Management; only one asynchronous operation per RuntimeID can run at any given point in time
    provisionRuntime(config: ProvisionRuntimeInput!): OperationStatus
    upgradeRuntime(id: String!, config: UpgradeRuntimeInput!): String!
    deprovisionRuntime(id: String!): String!

    # Compass Runtime Agent Connection Management
    reconnectRuntimeAgent(id: String!): String!
}

type Query {
    # Provides current status of specified Runtime
    runtimeStatus(id: String!): RuntimeStatus

    # Provides status of specified operation
    runtimeOperationStatus(id: String!): OperationStatus
}