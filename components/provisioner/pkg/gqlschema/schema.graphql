
enum KymaModule {
    Backup
    BackupInit
    Jaeger
    Logging
    Monitoring
    PrometheusOperator
    Kiali
    KnativeBuild
}

# Configuration of Runtime. We can consider returning kubeconfig as a part of this type.
type RuntimeConfig {
    clusterConfig: ClusterConfig
    # TODO: should we also return credentials (secret name used for provisioning)?
    kymaConfig: KymaConfig
    kubeconfig: String
}

union ClusterConfig = GardenerConfig | GCPConfig

type GardenerConfig {
    name: String
    projectName: String
    kubernetesVersion: String
    nodeCount: Int
    volumeSize: String
    machineType: String
    region: String
    targetProvider: String
    targetSecret: String
    diskType: String
    zone: String
    cidr: String
    autoScalerMin: Int
    autoScalerMax: Int
    maxSurge: Int
    maxUnavailable: Int
}

type GCPConfig {
    name: String
    projectName: String
    kubernetesVersion: String
    numberOfNodes: Int
    bootDiskSize: String
    machineType: String
    region: String
    zone: String
}

type KymaConfig {
    version: String
    modules: [KymaModule]
}

type OperationStatus {
    id: String
    operation: OperationType!
    state: OperationState!
    message: String
    runtimeID: String
}

enum OperationType {
    Provision
    Upgrade
    Deprovision
    ReconnectRuntime
}

type Error {
    message: String
}

type RuntimeConnectionStatus {
    status: RuntimeAgentConnectionStatus!
    errors: [Error!]
}

# We should consider renamig this type, as it contains more than just status.
type RuntimeStatus {
    lastOperationStatus: OperationStatus
    runtimeConnectionStatus: RuntimeConnectionStatus
    runtimeConfiguration: RuntimeConfig
}

enum OperationState {
    Pending
    InProgress
    Succeeded
    Failed
}

enum RuntimeAgentConnectionStatus {
    Pending
    Connected
    Disconnected
}

# Inputs

input ProvisionRuntimeInput {
    clusterConfig: ClusterConfigInput!
    credentials: CredentialsInput!
    kymaConfig: KymaConfigInput!
}

input CredentialsInput {
    secretName: String!
}

input ClusterConfigInput {
    gardenerConfig: GardenerConfigInput
    gcpConfig: GCPConfigInput
}

input GardenerConfigInput {
    name: String!
    projectName: String!
    kubernetesVersion: String!
    nodeCount: Int!
    volumeSize: String!
    machineType: String!
    region: String!
    targetProvider: String!
    targetSecret: String!
    diskType: String!
    zone: String!
    cidr: String!
    autoScalerMin: Int!
    autoScalerMax: Int!
    maxSurge: Int!
    maxUnavailable: Int!
}

input GCPConfigInput {
    name: String!
    projectName: String!
    kubernetesVersion: String!
    numberOfNodes: Int!
    bootDiskSize: String!
    machineType: String!
    region: String! # TODO: later we may require either Region or Zone
    zone: String
}

input KymaConfigInput {
    version: String!
    modules: [KymaModule!]
}

input UpgradeRuntimeInput {
    clusterConfig: UpgradeClusterInput
    kymaConfig: KymaConfigInput
}

input UpgradeClusterInput {
    version: String!
}

type Mutation {
    # Runtime Management; only one asynchronous operation per RuntimeID can run at any given point in time
    provisionRuntime(id: String!, config: ProvisionRuntimeInput!): String!
    upgradeRuntime(id: String!, config: UpgradeRuntimeInput!): String!
    deprovisionRuntime(id: String!, credentials: CredentialsInput!): String!
    cleanupRuntimeData(id: String!): String!

    # Compass Runtime Agent Connection Management
    reconnectRuntimeAgent(id: String!): String!
}

type Query {
    # Provides current status of specified Runtime
    runtimeStatus(id: String!): RuntimeStatus

    # Provides status of specified operation
    runtimeOperationStatus(id: String!): OperationStatus
}