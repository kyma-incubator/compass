// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/kyma-incubator/compass/components/provisioner/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// InstallKyma provides a mock function with given fields: runtimeId, kubeconfigRaw, release, globalConfig, componentsConfig
func (_m *Service) InstallKyma(runtimeId string, kubeconfigRaw string, release model.Release, globalConfig model.Configuration, componentsConfig []model.KymaComponentConfig) error {
	ret := _m.Called(runtimeId, kubeconfigRaw, release, globalConfig, componentsConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, model.Release, model.Configuration, []model.KymaComponentConfig) error); ok {
		r0 = rf(runtimeId, kubeconfigRaw, release, globalConfig, componentsConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerInstallation provides a mock function with given fields: kubeconfigRaw, release, globalConfig, componentsConfig
func (_m *Service) TriggerInstallation(kubeconfigRaw []byte, release model.Release, globalConfig model.Configuration, componentsConfig []model.KymaComponentConfig) error {
	ret := _m.Called(kubeconfigRaw, release, globalConfig, componentsConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, model.Release, model.Configuration, []model.KymaComponentConfig) error); ok {
		r0 = rf(kubeconfigRaw, release, globalConfig, componentsConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
