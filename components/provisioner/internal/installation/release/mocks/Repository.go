// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	dberrors "github.com/kyma-incubator/compass/components/provisioner/internal/persistence/dberrors"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/provisioner/internal/model"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetReleaseByVersion provides a mock function with given fields: version
func (_m *Repository) GetReleaseByVersion(version string) (model.Release, dberrors.Error) {
	ret := _m.Called(version)

	var r0 model.Release
	if rf, ok := ret.Get(0).(func(string) model.Release); ok {
		r0 = rf(version)
	} else {
		r0 = ret.Get(0).(model.Release)
	}

	var r1 dberrors.Error
	if rf, ok := ret.Get(1).(func(string) dberrors.Error); ok {
		r1 = rf(version)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(dberrors.Error)
		}
	}

	return r0, r1
}

// ReleaseExists provides a mock function with given fields: version
func (_m *Repository) ReleaseExists(version string) (bool, dberrors.Error) {
	ret := _m.Called(version)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(version)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 dberrors.Error
	if rf, ok := ret.Get(1).(func(string) dberrors.Error); ok {
		r1 = rf(version)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(dberrors.Error)
		}
	}

	return r0, r1
}

// SaveRelease provides a mock function with given fields: artifacts
func (_m *Repository) SaveRelease(artifacts model.Release) (model.Release, dberrors.Error) {
	ret := _m.Called(artifacts)

	var r0 model.Release
	if rf, ok := ret.Get(0).(func(model.Release) model.Release); ok {
		r0 = rf(artifacts)
	} else {
		r0 = ret.Get(0).(model.Release)
	}

	var r1 dberrors.Error
	if rf, ok := ret.Get(1).(func(model.Release) dberrors.Error); ok {
		r1 = rf(artifacts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(dberrors.Error)
		}
	}

	return r0, r1
}
