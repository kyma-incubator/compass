// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	apperrors "github.com/kyma-project/control-plane/components/provisioner/internal/apperrors"
	gqlschema "github.com/kyma-project/control-plane/components/provisioner/pkg/gqlschema"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeprovisionRuntime provides a mock function with given fields: id, tenant
func (_m *Service) DeprovisionRuntime(id string, tenant string) (string, apperrors.AppError) {
	ret := _m.Called(id, tenant)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(id, tenant)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, string) apperrors.AppError); ok {
		r1 = rf(id, tenant)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// ProvisionRuntime provides a mock function with given fields: config, tenant, subAccount
func (_m *Service) ProvisionRuntime(config gqlschema.ProvisionRuntimeInput, tenant string, subAccount string) (*gqlschema.OperationStatus, apperrors.AppError) {
	ret := _m.Called(config, tenant, subAccount)

	var r0 *gqlschema.OperationStatus
	if rf, ok := ret.Get(0).(func(gqlschema.ProvisionRuntimeInput, string, string) *gqlschema.OperationStatus); ok {
		r0 = rf(config, tenant, subAccount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.OperationStatus)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(gqlschema.ProvisionRuntimeInput, string, string) apperrors.AppError); ok {
		r1 = rf(config, tenant, subAccount)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// ReconnectRuntimeAgent provides a mock function with given fields: id
func (_m *Service) ReconnectRuntimeAgent(id string) (string, apperrors.AppError) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string) apperrors.AppError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// RollBackLastUpgrade provides a mock function with given fields: runtimeID
func (_m *Service) RollBackLastUpgrade(runtimeID string) (*gqlschema.RuntimeStatus, apperrors.AppError) {
	ret := _m.Called(runtimeID)

	var r0 *gqlschema.RuntimeStatus
	if rf, ok := ret.Get(0).(func(string) *gqlschema.RuntimeStatus); ok {
		r0 = rf(runtimeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.RuntimeStatus)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string) apperrors.AppError); ok {
		r1 = rf(runtimeID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// RuntimeOperationStatus provides a mock function with given fields: id
func (_m *Service) RuntimeOperationStatus(id string) (*gqlschema.OperationStatus, apperrors.AppError) {
	ret := _m.Called(id)

	var r0 *gqlschema.OperationStatus
	if rf, ok := ret.Get(0).(func(string) *gqlschema.OperationStatus); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.OperationStatus)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string) apperrors.AppError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// RuntimeStatus provides a mock function with given fields: id
func (_m *Service) RuntimeStatus(id string) (*gqlschema.RuntimeStatus, apperrors.AppError) {
	ret := _m.Called(id)

	var r0 *gqlschema.RuntimeStatus
	if rf, ok := ret.Get(0).(func(string) *gqlschema.RuntimeStatus); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.RuntimeStatus)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string) apperrors.AppError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// UpgradeGardenerShoot provides a mock function with given fields: id, input
func (_m *Service) UpgradeGardenerShoot(id string, input gqlschema.UpgradeShootInput) (*gqlschema.OperationStatus, error) {
	ret := _m.Called(id, input)

	var r0 *gqlschema.OperationStatus
	if rf, ok := ret.Get(0).(func(string, gqlschema.UpgradeShootInput) *gqlschema.OperationStatus); ok {
		r0 = rf(id, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.OperationStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, gqlschema.UpgradeShootInput) error); ok {
		r1 = rf(id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeRuntime provides a mock function with given fields: id, config
func (_m *Service) UpgradeRuntime(id string, config gqlschema.UpgradeRuntimeInput) (*gqlschema.OperationStatus, apperrors.AppError) {
	ret := _m.Called(id, config)

	var r0 *gqlschema.OperationStatus
	if rf, ok := ret.Get(0).(func(string, gqlschema.UpgradeRuntimeInput) *gqlschema.OperationStatus); ok {
		r0 = rf(id, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.OperationStatus)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, gqlschema.UpgradeRuntimeInput) apperrors.AppError); ok {
		r1 = rf(id, config)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}
