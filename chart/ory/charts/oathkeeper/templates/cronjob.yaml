#Kyma resource
# TODO!!! Custom implementation; this job does not exist in OS
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ory-oathkeeper-keys-service-account
  namespace: {{ .Release.Namespace }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: {{.Release.Namespace}}
  name: ory-oathkeeper-keys-job-role
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "update", "patch"]
    resourceNames: ["{{ include "oathkeeper.secretname" . }}"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ory-oathkeeper-keys-job-role-binding
  namespace: {{.Release.Namespace}}
subjects:
  - kind: ServiceAccount
    name: ory-oathkeeper-keys-service-account
    namespace: {{.Release.Namespace}}
roleRef:
  kind: Role
  name: ory-oathkeeper-keys-job-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: oathkeeper-jwks-rotator
spec:
  schedule: "0 0 1 * *"
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "false"
        spec:
          initContainers:
            - name: keys-generator
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              command:
                - /bin/sh
                - -c
                - |
                  oathkeeper credentials generate --alg RS256 > {{ .Values.secret.mountPath }}/newJWKS.json
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                runAsGroup: 101
                runAsNonRoot: true
                runAsUser: 100
              volumeMounts:
                - name: {{ include "oathkeeper.name" . }}-keys-volume
                  mountPath: {{ .Values.secret.mountPath }}
          containers:
          - name: keys-supplier
            image: {{ include "imageurl" (dict "reg" .Values.global.containerRegistry "img" .Values.global.images.k8s_tools) }}
            command:
            - /bin/bash
            - -c
            - |
              set -e
              keepJWKS=$(kubectl get secret {{ include "oathkeeper.secretname" . }} -n {{ .Release.Namespace }} -o json \
              | jq -r '.data."jwks.json"' | base64 -d | jq -r '.keys[-1]')

              jq ".keys |= [$keepJWKS] + ." {{ .Values.secret.mountPath }}/newJWKS.json > /tmp/jwks.json

              kubectl create secret generic {{ include "oathkeeper.secretname" . }} \
              --from-file=/tmp/jwks.json \
              -n {{ .Release.Namespace }} -o yaml --dry-run=client | kubectl apply -f -
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              privileged: false
              runAsGroup: 65534
              runAsNonRoot: true
              runAsUser: 65534
            volumeMounts:
            - name: {{ include "oathkeeper.name" . }}-keys-volume
              mountPath: {{ .Values.secret.mountPath }}
              readOnly: true
          volumes:
          - name: {{ include "oathkeeper.name" . }}-keys-volume
            emptyDir: {}
          restartPolicy: OnFailure
          serviceAccountName: ory-oathkeeper-keys-service-account
