# Custom implementation; this job does not exist in OS
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ory-oathkeeper-keys-service-account
  namespace: {{ .Release.Namespace }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: {{.Release.Namespace}}
  name: ory-oathkeeper-keys-job-role
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "update", "patch"]
    resourceNames: ["{{ include "oathkeeper.secretname" . }}"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ory-oathkeeper-keys-job-role-binding
  namespace: {{.Release.Namespace}}
subjects:
  - kind: ServiceAccount
    name: ory-oathkeeper-keys-service-account
    namespace: {{.Release.Namespace}}
roleRef:
  kind: Role
  name: ory-oathkeeper-keys-job-role
  apiGroup: rbac.authorization.k8s.io
---
# Rotate the Oathkeeper JWKS for security measures
# The new JWKS is used to sign the new tokens, the old JWKS is kept to validate old tokens
# This approach was needed as the rotation of JWKS invalidates old tokens, tokens which are kept in the cache of the Oathkeeper
# https://github.com/ory/oathkeeper/issues/763 & https://github.com/kyma-project/kyma/issues/11550
apiVersion: batch/v1
kind: CronJob
metadata:
  name: oathkeeper-jwks-rotator
  labels:
    {{ include "oathkeeper.labels" . | indent 4 }}
spec:
  schedule: "0 0 1 * *"
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
          - name: keys-generator
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            command:
              - /bin/sh
              - -c
              - |
                oathkeeper credentials generate --alg RS256 > {{ .Values.secret.mountPath }}/newJWKS.json
            securityContext:
              {{- toYaml .Values.deployment.securityContext.oathkeeper | nindent 14 }}
            volumeMounts:
              - name: {{ include "oathkeeper.name" . }}-keys-volume
                mountPath: {{ .Values.secret.mountPath }}
          containers:
          - name: keys-supplier
            image: {{ .Values.global.images.job }}
            command:
            - /bin/bash
            - -c
            - |
              set -e
              until wget -q --spider http://127.0.0.1:15021/healthz/ready 2>/dev/null; do echo "Waiting for Istio sidecar..."; sleep 3; done;
              echo \"Sidecar available. Running...\";

              keepJWKS=$(kubectl get secret {{ include "oathkeeper.secretname" . }} -n {{ .Release.Namespace }} -o json \
              | jq -r '.data."jwks.json"' | base64 -d | jq -r '.keys[-1]')

              jq ".keys |= [$keepJWKS] + ." {{ .Values.secret.mountPath }}/newJWKS.json > /tmp/jwks.json

              kubectl create secret generic {{ include "oathkeeper.secretname" . }} \
              --from-file=/tmp/jwks.json \
              -n {{ .Release.Namespace }} -o yaml --dry-run=client | kubectl apply -f -

              x=$?; wget -q --post-data='' -S -O /dev/null http://127.0.0.1:15020/quitquitquit && exit $x
            securityContext:
              {{- toYaml .Values.deployment.securityContext.anonymous | nindent 14 }}
            volumeMounts:
            - name: {{ include "oathkeeper.name" . }}-keys-volume
              mountPath: {{ .Values.secret.mountPath }}
              readOnly: true
          volumes:
          - name: {{ include "oathkeeper.name" . }}-keys-volume
            emptyDir: {}
          restartPolicy: OnFailure
          serviceAccountName: ory-oathkeeper-keys-service-account
