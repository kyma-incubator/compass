apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: {{ .Chart.Name }}-oathkeeper-token-rewrite
  namespace: {{ .Values.global.oathkeeperFilters.namespace }}
spec:
  workloadSelector:
    labels:
      app.kubernetes.io/name: {{ .Values.global.oathkeeperFilters.workloadLabel }}
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: "envoy.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function envoy_on_request(request_handle)
                function urldecode(s)
                  s = s:gsub('+', ' ')
                    :gsub('%%(%x%x)', function(h)
                                        return string.char(tonumber(h, 16))
                                      end)
                  return s
                end

                function parsequery(s)
                  local ans = {}
                  for k,v in s:gmatch('([^&?]-)=([^&?]+)' ) do
                    ans[ k ] = urldecode(v)
                  end
                  return ans
                end

                function startswith(str, start)
                  return str:sub(1, #start) == start
                end

                local headers = request_handle:headers()
                local path = headers:get(":path")

                if startswith(path, "/v1/applications/signingRequests/info") or startswith(path, "/v1/applications/certificates") then
                  local query_params = parsequery(path)
                  local token_param = query_params["token"]

                  if token_param ~= nil then
                    headers:add("{{ .Values.global.oathkeeperFilters.tokenDataHeader }}", token_param)
                  end
                end
              end