global:
  disableLegacyConnectivity: true
  defaultTenant: 3e64ebae-38b5-46a0-b1ed-9ccee153a0ae
  tenants:
    - name: default
      id: 3e64ebae-38b5-46a0-b1ed-9ccee153a0ae
    - name: foo
      id: 1eba80dd-8ff6-54ee-be4d-77944d17b10b
    - name: bar
      id: af9f84a9-1d3a-4d9f-ae0c-94f883b33b6e
  images:
    containerRegistry:
      path: eu.gcr.io/kyma-project/incubator
    connector:
      dir:
      version: "PR-1720"
    connectivity_adapter:
      dir:
      version: "PR-1732"
    pairing_adapter:
      dir:
      version: "PR-1720"
    director:
      dir:
      version: "PR-1733"
    gateway:
      dir:
      version: "PR-1720"
    operations_controller:
      dir:
      version: "PR-1747"
    tenant_fetcher:
      dir:
      version: "PR-1752"
    ord_service:
      dir:
      version: "PR-14"
    schema_migrator:
      dir:
      version: "PR-1736"
    system_broker:
      dir:
      version: "PR-1733"
    certs_setup_job:
      containerRegistry:
        path: eu.gcr.io/kyma-project
      dir:
      version: "0a651695"
    external_services_mock:
      dir:
      version: "PR-1726"
    console:
      dir:
      version: "PR-19"
    tests:
      director:
        dir:
        version: "PR-1738"
      connector:
        dir:
        version: "PR-1715"
      connectivity_adapter:
        dir:
        version: "PR-1693"
      operations_controller:
        dir:
        version: "PR-1717"
      tenant_fetcher:
        dir:
        version: "PR-1752"
      system_broker:
        dir:
        version: "PR-1738"
      ord_service:
        dir:
        version: "PR-1719"
  isLocalEnv: false
  oauth2:
    host: oauth2
  livenessProbe:
    initialDelaySeconds: 30
    timeoutSeconds: 1
    periodSeconds: 10
  readinessProbe:
    initialDelaySeconds: 5
    timeoutSeconds: 1
    periodSeconds: 2

  agentPreconfiguration: false

  director:
    prefix: /director
    port: 3000
    operations:
      port: 3002

    clientIDHeaderKey: client_user

    tests:
      scopes: "runtime:write application:write label_definition:write integration_system:write application:read runtime:read label_definition:read integration_system:read health_checks:read application_template:read application_template:write eventing:manage tenant:read automatic_scenario_assignment:read automatic_scenario_assignment:write"

  auditlog:
    configMapName: "compass-gateway-auditlog-config"
    secretName: "compass-gateway-auditlog-secret"
    script:
      configMapName: "auditlog-script"

  testCredentials:
    secretName: "test-credentials-secret"

  enableCompassDefaultScenarioAssignment: true

  tenantConfig:
    useDefaultTenants: true
    dbPool:
      maxOpenConnections: 1
      maxIdleConnections: 1

  connector:
    prefix: /connector
    graphql:
      external:
        port: 3000
      internal:
        port: 3001
    validator:
      port: 8080
    # If secrets do not exist they will be created
    secrets:
      ca:
        name: compass-connector-app-ca
        namespace: compass-system
        certificateKey: ca.crt
        keyKey: ca.key
      rootCA:
        namespace: istio-system # For Ingress Gateway to work properly the namespace needs to be istio-system
        # In order for istio mTLS to work we should have two different secrets one containing the server certificate (let’s say X) and one used for validation of the client’s certificates.
        # The second one should be our root certificate and istio wants it to be named X-cacert. (-cacert suffix).
        # This is the reason for the confusing name of our root certificate. https://preliminary.istio.io/v1.6/docs/tasks/traffic-management/ingress/secure-ingress/#configure-a-mutual-tls-ingress-gateway
        cacert: compass-gateway-mtls-certs-cacert # For cert-rotation the cacert should be in different secret
        certificateKey: cacert
    certificateDataHeader: "Certificate-Data"
    revocation:
      configmap:
        name: revocations-config
        namespace: "{{ .Release.Namespace }}"
    # If key and certificate are not provided they will be generated
    caKey: ""
    caCertificate: ""

  system_broker:
    enabled: true
    port: 5001
    prefix: /broker
    tokenProviderFromHeader:
      forwardHeaders: Authorization
    tokenProviderFromSecret:
      enabled: false
      secrets:
        integrationSystemCredentials:
          name: compass-system-broker-credentials
          namespace: compass-system
    testNamespace: kyma-system

  gateway:
    port: 3000
    tls:
      host: compass-gateway
      secure:
        oauth:
          host: compass-gateway-auth-oauth
    mtls:
      host: compass-gateway-mtls
      certSecret: compass-gateway-mtls-certs
    headers:
      request:
        remove:
          - "Client-Id-From-Token"
          - "Client-Id-From-Certificate"
          - "Client-Certificate-Hash"
          - "Certificate-Data"

  operations_controller:
    enabled: true

  connectivity_adapter:
    port: 8080
    tls:
      host: adapter-gateway
    mtls:
      host: adapter-gateway-mtls

  rewriteFilters:
    workloadLabel: oathkeeper
    namespace: kyma-system
    tokenDataHeader: "Connector-Token"
    certificateDataHeader: "Certificate-Data"

  istio:
    mtlsGateway:
      name: "compass-gateway-mtls"
      namespace: "compass-system"
    gateway:
      name: "kyma-gateway"
      namespace: "kyma-system"
    proxy:
      port: 15020
    namespace: istio-system
    ingressgateway:
      workloadLabel: istio-ingressgateway
      correlationHeaderRewriteFilter:
        expectedHeaders:
        - "x-request-id"
        - "x-correlation-id"
        - "x-correlationid"
        - "x-forrequest-id"
        - "x-vcap-request-id"
        - "x-broker-api-request-identity"

  ingress:
    domainName: "kyma.local"

  database:
    manageSecrets: true
    embedded:
      enabled: true
      director:
        name: "postgres"
      directorDBName: "postgres"
    managedGCP:
      serviceAccountKey: ""
      instanceConnectionName: ""
      director:
        name: ""
        user: ""
        password: ""
      host: "localhost"
      hostPort: "5432"
      sslMode: ""

      #TODO remove below after migration to separate user will be done
      dbUser: ""
      dbPassword: ""
      directorDBName: ""

  oathkeeper:
    host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
    port: 4455
    idTokenConfig:
      claims: '{"scopes": "{{ print .Extra.scope }}", "tenant": "{{ print .Extra.tenant }}", "externalTenant": "{{ print .Extra.externalTenant }}", "consumerID": "{{ print .Extra.consumerID}}", "consumerType": "{{ print .Extra.consumerType }}"}'
    mutators:
      runtimeMappingService:
        config:
          api:
            url: http://compass-director.compass-system.svc.cluster.local:3000/runtime-mapping
            retry:
              give_up_after: 3s
              max_delay: 2000ms
      authenticationMappingService:
        config:
          api:
            url: http://compass-director.compass-system.svc.cluster.local:3000/authn-mapping
            retry:
              give_up_after: 3s
              max_delay: 2000ms
      tenantMappingService:
        config:
          api:
            url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
            retry:
              give_up_after: 3s
              max_delay: 2000ms
      certificateResolverService:
        config:
          api:
            url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/certificate/data/resolve
            retry:
              give_up_after: 3s
              max_delay: 2000ms
      tokenResolverService:
        config:
          api:
            url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/tokens/resolve
            retry:
              give_up_after: 3s
              max_delay: 2000ms

  tenantFetcher:
    host: compass-tenant-fetcher.compass-system.svc.cluster.local
    prefix: /tenants
    port: 3000
    authentication:
      allowJWTSigningNone: true
      jwksEndpoint: "http://ory-oathkeeper-api.kyma-system.svc.cluster.local:4456/.well-known/jwks.json"
      identityZone: "id-zone"
    tenantProvider:
      tenantIdProperty: "tenantId"
      name: "provider"

  ordService:
    host: compass-ord-service.compass-system.svc.cluster.local
    prefix: /open-resource-discovery-service/v0
    docsPrefix: /open-resource-discovery-docs
    staticPrefix: /open-resource-discovery-static/v0
    port: 3000
    defaultResponseType: "xml"

  tenantFetchers:
    job1:
      enabled: false
      configMapNamespace: "compass-system"
      manageSecrets: true
      providerName: "compass"
      schedule: "*/5 * * * *"
      kubernetes:
        configMapNamespace: "compass-system"
        pollInterval: 2s
        pollTimeout: 1m
        timeout: 2m
      oauth:
        client: ""
        secret: ""
        tokenURL: ""
      endpoints:
        tenantCreated: "127.0.0.1/events?type=created"
        tenantDeleted: "127.0.0.1/events?type=deleted"
        tenantUpdated: "127.0.0.1/events?type=updated"
      fieldMapping:
        totalPagesField: "totalPages"
        totalResultsField: "totalResults"
        tenantEventsField: "events"
        idField: "id"
        nameField: "name"
        discriminatorField: ""
        discriminatorValue: ""
        detailsField: "details"
      queryMapping:
        pageNumField: "pageNum"
        pageSizeField: "pageSize"
        timestampField: "timestamp"
      query:
        startPage: "0"
        pageSize: "100"
      dbPool:
        maxOpenConnections: 1
        maxIdleConnections: 1

  metrics:
    enabled: true
    pushEndpoint: http://monitoring-prometheus-pushgateway.kyma-system.svc.cluster.local:9091

  authenticators:
    authenticator0:
      enabled: true
      gatewayHost: "compass-gateway-authenticator0"
      trusted_issuers: '[{"domain_url": "authenticator.domain", "scope_prefix": "prefix."}, {}]'
      attributes: '{"uniqueAttribute": { "key": "key", "value": "val" }, "tenant": { "key": "key" }, "identity": { "key": "key" } }'

  externalServicesMock:
    enabled: false

pairing-adapter:
  enabled: false
