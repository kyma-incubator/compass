global:
  disableLegacyConnectivity: true
  defaultTenant: 3e64ebae-38b5-46a0-b1ed-9ccee153a0ae
  tenants:
    - name: default
      id: 3e64ebae-38b5-46a0-b1ed-9ccee153a0ae
      type: account
    - name: foo
      id: 1eba80dd-8ff6-54ee-be4d-77944d17b10b
      type: account
    - name: bar
      id: af9f84a9-1d3a-4d9f-ae0c-94f883b33b6e
      type: account
    - name: TestTenantSeparation
      id: f1c4b5be-b0e1-41f9-b0bc-b378200dcca0
      type: account
    - name: TestDeleteLastScenarioForApplication
      id: 0403be1e-f854-475e-9074-922120277af5
      type: account
    - name: Test_DeleteAutomaticScenarioAssignmentForSelector
      id: d9553135-6115-4c67-b4d9-962c00f3725f
      type: account
    - name: Test_AutomaticScenarioAssigmentForRuntime
      id: 8c733a45-d988-4472-af10-1256b82c70c0
      type: account
    - name: TestAutomaticScenarioAssignmentsWholeScenario
      id: 65a63692-c00a-4a7d-8376-8615ee37f45c
      type: account
    - name: TestTenantsQueryTenantNotInitialized
      id: 72329135-27fd-4284-9bcb-37ea8d6307d0
      type: account
    - name: Test Default
      id: 5577cf46-4f78-45fa-b55f-a42a3bdba868
      type: account
      parent: 2c4f4a25-ba9a-4dbc-be68-e0beb77a7eb0
    - name: Test_DefaultCustomer
      id: 2c4f4a25-ba9a-4dbc-be68-e0beb77a7eb0
      type: customer
    - name: TestListLabelDefinitions
      id: 3f641cf5-2d14-4e0f-a122-16e7569926f1
      type: account
    - name: Test_AutomaticScenarioAssignmentQueries
      id: 8263cc13-5698-4a2d-9257-e8e76b543e88
      type: account
    - name: TestGetScenariosLabelDefinitionCreatesOneIfNotExists
      id: 2263cc13-5698-4a2d-9257-e8e76b543e33
      type: account
    - name: TestApplicationsForRuntime
      id: 5984a414-1eed-4972-af2c-b2b6a415c7d7
      type: account
    - name: Test_DeleteAutomaticScenarioAssignmentForScenario
      id: d08e4cb6-a77f-4a07-b021-e3317a373597
      type: account
    - name: TestApplicationsForRuntimeWithHiddenApps
      id: 7e1f2df8-36dc-4e40-8be3-d1555d50c91c
      type: account
    - name: TestTenantsQueryTenantInitialized
      id: 8cf0c909-f816-4fe3-a507-a7917ccd8380
      type: account
    - name: TestDeleteApplicationIfInScenario
      id: 0d597250-6b2d-4d89-9c54-e23cb497cd01
      type: account

  images:
    containerRegistry:
      path: eu.gcr.io/kyma-project/incubator
    connector:
      dir:
      version: "PR-2027"
    connectivity_adapter:
      dir:
      version: "PR-2027"
    pairing_adapter:
      dir:
      version: "PR-2027"
    director:
      dir:
      version: "PR-2051"
    gateway:
      dir:
      version: "PR-2034"
    operations_controller:
      dir:
      version: "PR-2027"
    ord_service:
      dir:
      version: "PR-41"
    schema_migrator:
      dir:
      version: "PR-1998"
    system_broker:
      dir:
      version: "PR-2027"
    certs_setup_job:
      containerRegistry:
        path: eu.gcr.io/kyma-project
      dir:
      version: "0a651695"
    external_services_mock:
      dir:
      version: "PR-2051"
    console:
      dir:
      version: "PR-45"
    e2e_tests:
      dir:
      version: "PR-2051"
  isLocalEnv: false
  oauth2:
    host: oauth2
  livenessProbe:
    initialDelaySeconds: 30
    timeoutSeconds: 1
    periodSeconds: 10
  readinessProbe:
    initialDelaySeconds: 5
    timeoutSeconds: 1
    periodSeconds: 2

  agentPreconfiguration: false

  director:
    prefix: /director
    graphql:
      external:
        port: 3000
      internal:
        port: 3001
    validator:
      port: 8080
    metrics:
      port: 3003
      enableClientInstrumentation: true
      censoredFlows: "JWT"
    operations:
      port: 3002
      path: "/operation"
      lastOperationPath: "/last_operation"

    clientIDHeaderKey: client_user
    suggestTokenHeaderKey: suggest_token

  auditlog:
    configMapName: "compass-gateway-auditlog-config"
    secretName: "compass-gateway-auditlog-secret"
    script:
      configMapName: "auditlog-script"

  log:
    format: "kibana"

  testCredentials:
    secretName: "test-credentials-secret"

  enableCompassDefaultScenarioAssignment: true

  tenantConfig:
    useDefaultTenants: true
    dbPool:
      maxOpenConnections: 1
      maxIdleConnections: 1

  connector:
    prefix: /connector
    graphql:
      external:
        port: 3000
    validator:
      port: 8080
    # If secrets do not exist they will be created
    secrets:
      ca:
        name: compass-connector-app-ca
        namespace: compass-system
        certificateKey: ca.crt
        keyKey: ca.key
      rootCA:
        namespace: istio-system # For Ingress Gateway to work properly the namespace needs to be istio-system
        # In order for istio mTLS to work we should have two different secrets one containing the server certificate (let’s say X) and one used for validation of the client’s certificates.
        # The second one should be our root certificate and istio wants it to be named X-cacert. (-cacert suffix).
        # This is the reason for the confusing name of our root certificate. https://preliminary.istio.io/v1.6/docs/tasks/traffic-management/ingress/secure-ingress/#configure-a-mutual-tls-ingress-gateway
        cacert: compass-gateway-mtls-certs-cacert # For cert-rotation the cacert should be in different secret
        certificateKey: cacert
    certificateDataHeader: "Certificate-Data"
    revocation:
      configmap:
        name: revocations-config
        namespace: "{{ .Release.Namespace }}"
    # If key and certificate are not provided they will be generated
    caKey: ""
    caCertificate: ""

  system_broker:
    enabled: true
    port: 5001
    prefix: /broker
    tokenProviderFromHeader:
      forwardHeaders: Authorization
    tokenProviderFromSecret:
      enabled: false
      secrets:
        integrationSystemCredentials:
          name: compass-system-broker-credentials
          namespace: compass-system
    testNamespace: kyma-system

  gateway:
    port: 3000
    tls:
      host: compass-gateway
      secure:
        internal:
          host: compass-gateway-internal
        oauth:
          host: compass-gateway-auth-oauth
    mtls:
      host: compass-gateway-mtls
      certSecret: compass-gateway-mtls-certs
      external:
        host: compass-gateway-sap-mtls
        certSecret: compass-gateway-mtls-certs # Use connector's root CA as root CA by default. This should be overridden for productive deployments.
    headers:
      request:
        remove:
          - "Client-Id-From-Token"
          - "Client-Id-From-Certificate"
          - "Client-Certificate-Hash"
          - "Certificate-Data"

  operations_controller:
    enabled: true

  connectivity_adapter:
    port: 8080
    tls:
      host: adapter-gateway
    mtls:
      host: adapter-gateway-mtls

  oathkeeperFilters:
    workloadLabel: oathkeeper
    namespace: kyma-system
    tokenDataHeader: "Connector-Token"
    certificateDataHeader: "Certificate-Data"

  istio:
    externalMtlsGateway:
      name: "compass-gateway-external-mtls"
      namespace: "compass-system"
    mtlsGateway:
      name: "compass-gateway-mtls"
      namespace: "compass-system"
    gateway:
      name: "kyma-gateway"
      namespace: "kyma-system"
    proxy:
      port: 15020
    namespace: istio-system
    ingressgateway:
      workloadLabel: istio-ingressgateway
      requestPayloadSizeLimit: 2097152 # 2 MB
      correlationHeaderRewriteFilter:
        expectedHeaders:
        - "x-request-id"
        - "x-correlation-id"
        - "x-correlationid"
        - "x-forrequest-id"
        - "x-vcap-request-id"
        - "x-broker-api-request-identity"

  kubernetes:
    serviceAccountTokenJWKS: https://kubernetes.default.svc.cluster.local/openid/v1/jwks

  ingress:
    domainName: "kyma.local"

  database:
    manageSecrets: true
    embedded:
      enabled: true
      director:
        name: "postgres"
      directorDBName: "postgres"
    managedGCP:
      serviceAccountKey: ""
      instanceConnectionName: ""
      director:
        name: ""
        user: ""
        password: ""
      host: "localhost"
      hostPort: "5432"
      sslMode: ""

      #TODO remove below after migration to separate user will be done
      dbUser: ""
      dbPassword: ""
      directorDBName: ""

  oathkeeper:
    host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
    port: 4455
    timeout_ms: 120000
    idTokenConfig:
      claims: '{"scopes": "{{ print .Extra.scope }}", "tenant": "{{ print .Extra.tenant }}", "externalTenant": "{{ print .Extra.externalTenant }}", "consumerID": "{{ print .Extra.consumerID}}", "consumerType": "{{ print .Extra.consumerType }}", "flow": "{{ print .Extra.flow }}"}'
      internalClaims: '{"scopes": "application:read application:write application.webhooks:read application_template.webhooks:read webhooks.auth:read", "tenant": "{{ print (index .Header.Tenant 0) }}", "consumerType": "Internal Component", "flow": "Internal"}'
    mutators:
      runtimeMappingService:
        config:
          api:
            url: http://compass-director.compass-system.svc.cluster.local:3000/runtime-mapping
            retry:
              give_up_after: 6s
              max_delay: 2000ms
      authenticationMappingService:
        config:
          api:
            url: http://compass-director.compass-system.svc.cluster.local:3000/authn-mapping
            retry:
              give_up_after: 6s
              max_delay: 2000ms
      tenantMappingService:
        config:
          api:
            url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
            retry:
              give_up_after: 6s
              max_delay: 2000ms
      certificateResolverService:
        config:
          api:
            url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/certificate/data/resolve
            retry:
              give_up_after: 6s
              max_delay: 2000ms
      tokenResolverService:
        config:
          api:
            url: http://compass-director.compass-system.svc.cluster.local:8080/v1/tokens/resolve
            retry:
              give_up_after: 6s
              max_delay: 2000ms

  tenantFetcher:
    host: compass-tenant-fetcher.compass-system.svc.cluster.local
    prefix: /tenants
    port: 3000
    requiredAuthScope: Callback
    authentication:
      jwksEndpoint: "http://ory-oathkeeper-api.kyma-system.svc.cluster.local:4456/.well-known/jwks.json"
    tenantProvider:
      tenantIdProperty: "tenantId"
      customerIdProperty: "customerId"
      subaccountTenantIdProperty: "subaccountTenantId"
      subdomainProperty: "subdomain"
      name: "provider"
      subscriptionProviderIdProperty: "subscriptionProviderId"

    server:
      handlerEndpoint: "/v1/callback/{tenantId}"
      regionalHandlerEndpoint: "/v1/regional/{region}/callback/{tenantId}"
      dependenciesEndpoint: "/v1/dependencies"
      tenantPathParam: "tenantId"
      regionPathParam: "region"
      subscriptionProviderLabelKey: "subscriptionProviderId"
      consumerSubaccountIdsLabelKey: "consumerSubaccountIds"

  ordService:
    host: compass-ord-service.compass-system.svc.cluster.local
    prefix: /open-resource-discovery-service/v0
    docsPrefix: /open-resource-discovery-docs
    staticPrefix: /open-resource-discovery-static/v0
    port: 3000
    defaultResponseType: "xml"

  ordAggregator:
    name: ord-aggregator
    enabled: true
    schedule: "*/1 * * * *"
    dbPool:
      maxOpenConnections: 2
      maxIdleConnections: 2
    securedApplicationTypes: "sample-app-type" # comma-separated values are used for specifying multiple application types

  systemFetcher:
    enabled: false
    name: "system-fetcher"
    schedule: "0 0 * * *"
    manageSecrets: true
    # enableSystemDeletion - whether systems in deleted state should be deleted from director database
    enableSystemDeletion: true
    # fetchParallellism - shows how many http calls will be made in parallel to fetch systems
    fetchParallellism: 30
    # queueSize - shows how many system fetches (individual requests may fetch more than 1 system)
    # can be put in the queue for processing before blocking. It is best for the queue to be about 2 times bigger than the parallellism
    queueSize: 100
    # fetchRequestTimeout - shows the timeout to wait for oauth token and for fetching systems (in one request) separately
    fetchRequestTimeout: "5s"
    # directorRequestTimeout - graphql requests timeout to director
    directorRequestTimeout: "30s"
    dbPool:
      maxOpenConnections: 2
      maxIdleConnections: 2
    # systemsAPIEndpoint - endpoint of the service to fetch systems from
    systemsAPIEndpoint: ""
    # systemsAPIFilterCriteria - criteria for fetching systems
    systemsAPIFilterCriteria: ""
    # systemsAPIFilterTenantCriteriaPattern - criateria for fetching systems with tenant filter
    systemsAPIFilterTenantCriteriaPattern: ""
    # systemToTemplateMappings - how to map system properties to an existing application template
    systemToTemplateMappings: '{}'
    http:
      client:
        skipSSLValidation: false
    oauth:
      client: ""
      secret: ""
      tokenURLPattern: ""
      scopesClaim: ""
      tenantHeaderName: ""
    paging:
      pageSize: 200
      sizeParam: "$top"
      skipParam: "$skip"

  tenantFetchers:
    job1:
      enabled: false
      configMapNamespace: "compass-system"
      manageSecrets: true
      providerName: "compass"
      schedule: "*/5 * * * *"
      kubernetes:
        configMapNamespace: "compass-system"
        pollInterval: 2s
        pollTimeout: 1m
        timeout: 2m
      oauth:
        client: ""
        secret: ""
        tokenURL: ""
      endpoints:
        tenantCreated: "127.0.0.1/events?type=created"
        tenantDeleted: "127.0.0.1/events?type=deleted"
        tenantUpdated: "127.0.0.1/events?type=updated"
      fieldMapping:
        totalPagesField: "totalPages"
        totalResultsField: "totalResults"
        tenantEventsField: "events"
        idField: "id"
        nameField: "name"
        customerIdField: "customerId"
        subdomainField: "subdomain"
        discriminatorField: ""
        discriminatorValue: ""
        detailsField: "details"
      queryMapping:
        pageNumField: "pageNum"
        pageSizeField: "pageSize"
        timestampField: "timestamp"
      query:
        startPage: "0"
        pageSize: "100"
      dbPool:
        maxOpenConnections: 1
        maxIdleConnections: 1

  metrics:
    enabled: true
    pushEndpoint: http://monitoring-prometheus-pushgateway.kyma-system.svc.cluster.local:9091

  authenticators:
    tenant-fetcher:
      enabled: false
      gatewayHost: "compass-gateway"
      trusted_issuers: '[{"domain_url": "compass-system.svc.cluster.local:8080", "scope_prefix": "prefix.", "protocol": "http"}]'
      attributes: '{"uniqueAttribute": { "key": "test", "value": "tenant-fetcher" }, "tenant": { "key": "tenant" }, "identity": { "key": "identity" } }'
      path: /tenants/<.*>
      upstreamComponent: "compass-tenant-fetcher"

  externalServicesMock:
    enabled: false
    auditlog: false

  tests:
    ordService:
      skipPattern: ""
    namespace: kyma-system
    connectivityAdapterFQDN: http://compass-connectivity-adapter.compass-system.svc.cluster.local
    directorFQDN: http://compass-director.compass-system.svc.cluster.local
    connectorFQDN: http://compass-connector.compass-system.svc.cluster.local
    externalServicesMockFQDN: http://compass-external-services-mock.compass-system.svc.cluster.local
    ordServiceFQDN: http://compass-ord-service.compass-system.svc.cluster.local
    systemBrokerFQDN: http://compass-system-broker.compass-system.svc.cluster.local
    tenantFetcherFQDN: http://compass-tenant-fetcher.compass-system.svc.cluster.local
    db:
      maxOpenConnections: 3
      maxIdleConnections: 1
    skipTLSVerify: true

    token:
      server:
        enabled: false
        port: 5000
    securityContext: # Set on container level
      runAsUser: 2000
      allowPrivilegeEscalation: false

  expectedSchemaVersionUpdateJob:
    cm:
      name: "expected-schema-version"

  migratorJob:
    nodeSelectorEnabled: false
    pvc:
      name: "compass-director-migrations"
      namespace: "compass-system"
      migrationsPath: "/compass-migrations"

pairing-adapter:
  enabled: false
