global:
  disableLegacyConnectivity: true
  defaultTenant: 3e64ebae-38b5-46a0-b1ed-9ccee153a0ae
  tenants:
    - name: default
      id: 3e64ebae-38b5-46a0-b1ed-9ccee153a0ae
      type: account
    - name: foo
      id: 1eba80dd-8ff6-54ee-be4d-77944d17b10b
      type: account
    - name: bar
      id: af9f84a9-1d3a-4d9f-ae0c-94f883b33b6e
      type: account
    - name: TestTenantSeparation
      id: f1c4b5be-b0e1-41f9-b0bc-b378200dcca0
      type: account
    - name: TestDeleteLastScenarioForApplication
      id: 0403be1e-f854-475e-9074-922120277af5
      type: account
    - name: Test_DeleteAutomaticScenarioAssignmentForSelector
      id: d9553135-6115-4c67-b4d9-962c00f3725f
      type: account
    - name: Test_AutomaticScenarioAssigmentForRuntime
      id: 8c733a45-d988-4472-af10-1256b82c70c0
      type: account
    - name: TestAutomaticScenarioAssignmentsWholeScenario
      id: 65a63692-c00a-4a7d-8376-8615ee37f45c
      type: account
    - name: TestTenantsQueryTenantNotInitialized
      id: 72329135-27fd-4284-9bcb-37ea8d6307d0
      type: account
    - name: Test Default
      id: 5577cf46-4f78-45fa-b55f-a42a3bdba868
      type: account
      parent: 2c4f4a25-ba9a-4dbc-be68-e0beb77a7eb0
    - name: Test_DefaultCustomer
      id: 2c4f4a25-ba9a-4dbc-be68-e0beb77a7eb0
      type: customer
    - name: TestListLabelDefinitions
      id: 3f641cf5-2d14-4e0f-a122-16e7569926f1
      type: account
    - name: Test_AutomaticScenarioAssignmentQueries
      id: 8263cc13-5698-4a2d-9257-e8e76b543e88
      type: account
    - name: TestGetScenariosLabelDefinitionCreatesOneIfNotExists
      id: 2263cc13-5698-4a2d-9257-e8e76b543e33
      type: account
    - name: TestApplicationsForRuntime
      id: 5984a414-1eed-4972-af2c-b2b6a415c7d7
      type: account
    - name: Test_DeleteAutomaticScenarioAssignmentForScenario
      id: d08e4cb6-a77f-4a07-b021-e3317a373597
      type: account
    - name: TestApplicationsForRuntimeWithHiddenApps
      id: 7e1f2df8-36dc-4e40-8be3-d1555d50c91c
      type: account
    - name: TestTenantsQueryTenantInitialized
      id: 8cf0c909-f816-4fe3-a507-a7917ccd8380
      type: account
    - name: TestDeleteApplicationIfInScenario
      id: 0d597250-6b2d-4d89-9c54-e23cb497cd01
      type: account
    - name: TestProviderSubaccount
      id: f8075207-1478-4a80-bd26-24a4785a2bfd
      type: subaccount
      parent: 5577cf46-4f78-45fa-b55f-a42a3bdba868
    - name: TestCertificateSubaccount
      id: 123e4567-e89b-12d3-a456-426614174001
      type: subaccount
      parent: 5577cf46-4f78-45fa-b55f-a42a3bdba868
    - name: TestNsAdapter
      id: 08b6da37-e911-48fb-a0cb-fa635a6c5678
      type: subaccount
      parent: 5577cf46-4f78-45fa-b55f-a42a3bdba868
    - name: TestNsAdapterSubaccountWithApplications
      id: 08b6da37-e911-48fb-a0cb-fa635a6c4321
      type: subaccount
      parent: 5577cf46-4f78-45fa-b55f-a42a3bdba868
    - name: TestIntegrationSystemManagedSubaccount
      id: 3cfcdd62-320d-403b-b66a-4ee3cdd06947
      type: subaccount
      parent: 5577cf46-4f78-45fa-b55f-a42a3bdba868
    - name: TestIntegrationSystemManagedAccount
      id: 7e8ab2e3-3bb4-42e3-92b2-4e0bf48559d3
      type: account
      parent: 2c4f4a25-ba9a-4dbc-be68-e0beb77a7eb0
  images:
    containerRegistry:
      path: eu.gcr.io/kyma-project/incubator
    connector:
      dir:
      version: "PR-2297"
    connectivity_adapter:
      dir:
      version: "PR-2297"
    pairing_adapter:
      dir:
      version: "PR-2297"
    director:
      dir:
      version: "PR-2294"
    gateway:
      dir:
      version: "PR-2297"
    operations_controller:
      dir:
      version: "PR-2297"
    ord_service:
      dir:
      version: "PR-65"
    schema_migrator:
      dir:
      version: "PR-2297"
    system_broker:
      dir:
      version: "PR-2297"
    certs_setup_job:
      containerRegistry:
        path: eu.gcr.io/kyma-project
      dir:
      version: "0a651695"
    external_services_mock:
      dir:
      version: "PR-2298"
    console:
      dir:
      version: "PR-64"
    e2e_tests:
      dir:
      version: "PR-2308"
  isLocalEnv: false
  isForTesting: false
  oauth2:
    host: oauth2
  livenessProbe:
    initialDelaySeconds: 30
    timeoutSeconds: 1
    periodSeconds: 10
  readinessProbe:
    initialDelaySeconds: 5
    timeoutSeconds: 1
    periodSeconds: 2
  agentPreconfiguration: false
  nsAdapter:
    external:
      port: 3005
    e2eTests:
      gatewayHost: "compass-gateway-xsuaa"
    prefix: /nsadapter
    path: /nsadapter/api/v1/notifications
    systemToTemplateMappings: '[{  "Name": "S4HANA",  "SourceKey": ["type"],  "SourceValue": ["abapSys"]},{  "Name": "S4HANA",  "SourceKey": ["type"],  "SourceValue": ["nonSAPsys"]},{  "Name": "S4HANA",  "SourceKey": ["type"],  "SourceValue": ["hana"]}]'
    secret:
      name: nsadapter-secret
      subaccountKey: subaccount
      local:
        subaccountValue: subaccount
    authSecret:
      name: "compass-external-services-mock-oauth-credentials"
      clientIdKey: client-id
      clientSecretKey: client-secret
      tokenUrlKey: url
      instanceUrlKey: url
      certKey: cert
      keyKey: key
    registerPath: "/register"
    tokenPath: "/secured/oauth/token"
    createClonePattern: '{"key": "%s"}'
    createBindingPattern: '{}'
    useClone: "false"
  director:
    host: compass-director.compass-system.svc.cluster.local
    prefix: /director
    graphql:
      external:
        port: 3000
    tls:
      secure:
        internal:
          host: compass-director-internal
    validator:
      port: 8080
    metrics:
      port: 3003
      enableClientInstrumentation: true
      censoredFlows: "JWT"
    operations:
      port: 3002
      path: "/operation"
      lastOperationPath: "/last_operation"
    info:
      path: "/v1/info"
    selfRegister:
      secret:
        name: "region-instances-credentials"
        key: "keyConfig"
        path: "/tmp"
      clientIdPath: "clientId"
      clientSecretPath: "clientSecret"
      urlPath: "url"
      tokenUrlPath: "tokenUrl"
      clientCertPath: "clientCert"
      clientKeyPath: "clientKey"
      local:
        templateMappings:
          clientIDMapping: '{{ printf "\"%s\":\"client_id\"" .Values.global.director.selfRegister.clientIdPath }}'
          clientSecretMapping: '{{ printf "\"%s\":\"client_secret\"" .Values.global.director.selfRegister.clientSecretPath }}'
          urlMapping: '{{ printf "\"%s\":\"http://compass-external-services-mock.%s.svc.cluster.local:%s\"" .Values.global.director.selfRegister.urlPath .Release.Namespace (.Values.service.port | toString) }}'
          tokenURLMapping: '{{ printf "\"%s\":\"https://%s.%s:%s\"" .Values.global.director.selfRegister.tokenUrlPath .Values.global.externalServicesMock.certSecuredHost .Values.global.ingress.domainName (.Values.service.certPort | toString) }}'
          x509CertificateMapping: '{{ printf "\"%s\":\"%s\"" .Values.global.director.selfRegister.clientCertPath .Values.global.connector.caCertificate }}'
          x509KeyMapping: '{{ printf "\"%s\":\"%s\"" .Values.global.director.selfRegister.clientKeyPath .Values.global.connector.caKey }}'
      oauthTokenPath: "/cert/token"
      oauthMode: "oauth-mtls"
      label: "selfRegLabel"
      labelValuePrefix: "self-reg-prefix-"
      responseKey: "self-reg-key"
      path: "/external-api/self-reg"
      nameQueryParam: "name"
      tenantQueryParam: "tenant"
      requestBodyPattern: '{"key": "%s"}'
    clientIDHeaderKey: client_user
    suggestTokenHeaderKey: suggest_token
  auditlog:
    configMapName: "compass-gateway-auditlog-config"
    mtlsTokenPath: "/cert/token"
    standardTokenPath: "/secured/oauth/token"
    skipSSLValidation: false
    secret:
      name: "compass-gateway-auditlog-secret"
      urlKey: url
      clientIdKey: client-id
      clientSecretKey: client-secret
      clientCertKey: client-cert
      clientKeyKey: client-key
  log:
    format: "kibana"
  enableCompassDefaultScenarioAssignment: true
  tenantConfig:
    useDefaultTenants: true
    dbPool:
      maxOpenConnections: 1
      maxIdleConnections: 1
  connector:
    prefix: /connector
    graphql:
      external:
        port: 3000
    validator:
      port: 8080
    # If secrets do not exist they will be created
    secrets:
      ca:
        name: compass-connector-app-ca
        namespace: compass-system
        certificateKey: ca.crt
        keyKey: ca.key
      rootCA:
        namespace: istio-system # For Ingress Gateway to work properly the namespace needs to be istio-system
        # In order for istio mTLS to work we should have two different secrets one containing the server certificate (let’s say X) and one used for validation of the client’s certificates.
        # The second one should be our root certificate and istio wants it to be named X-cacert. (-cacert suffix).
        # This is the reason for the confusing name of our root certificate. https://preliminary.istio.io/v1.6/docs/tasks/traffic-management/ingress/secure-ingress/#configure-a-mutual-tls-ingress-gateway
        cacert: compass-gateway-mtls-certs-cacert # For cert-rotation the cacert should be in different secret
        certificateKey: cacert
    certificateDataHeader: "Certificate-Data"
    revocation:
      configmap:
        name: revocations-config
        namespace: "{{ .Release.Namespace }}"
    # If key and certificate are not provided they will be generated
    caKey: ""
    caCertificate: ""
    subjectConsumerMappingConfig: '[{"consumer_type": "Super Admin", "tenant_access_levels": ["customer", "account","subaccount"], "subject": "C=DE, L=local, O=SAP SE, OU=Region, OU=SAP Cloud Platform Clients, OU=f8075207-1478-4a80-bd26-24a4785a2bfd, CN=compass"},{"consumer_type": "Integration System", "tenant_access_levels": ["account","subaccount"], "subject": "C=DE, L=local, O=SAP SE, OU=Region, OU=SAP Cloud Platform Clients, OU=f8075207-1478-4a80-bd26-24a4785a2bfd, CN=integration-system-test"}]'
  system_broker:
    enabled: true
    port: 5001
    prefix: /broker
    tokenProviderFromHeader:
      forwardHeaders: Authorization
    tokenProviderFromSecret:
      enabled: false
      secrets:
        integrationSystemCredentials:
          name: compass-system-broker-credentials
          namespace: compass-system
    testNamespace: kyma-system
  gateway:
    port: 3000
    tls:
      host: compass-gateway
      adapterHost: compass-ns-adapter
      secure:
        internal:
          host: compass-gateway-internal
        oauth:
          host: compass-gateway-auth-oauth
    mtls:
      manageCerts: true
      host: compass-gateway-mtls
      certSecret: compass-gateway-mtls-certs
      external:
        host: compass-gateway-sap-mtls
        certSecret: compass-gateway-mtls-certs # Use connector's root CA as root CA by default. This should be overridden for productive deployments.
    headers:
      rateLimit: X-Flow-Identity
      request:
        remove:
          - "Client-Id-From-Token"
          - "Client-Id-From-Certificate"
          - "Client-Certificate-Hash"
          - "Certificate-Data"
  operations_controller:
    enabled: true
  connectivity_adapter:
    port: 8080
    tls:
      host: adapter-gateway
    mtls:
      host: adapter-gateway-mtls
  oathkeeperFilters:
    workloadLabel: oathkeeper
    namespace: kyma-system
    tokenDataHeader: "Connector-Token"
    certificateDataHeader: "Certificate-Data"
  istio:
    externalMtlsGateway:
      name: "compass-gateway-external-mtls"
      namespace: "compass-system"
    mtlsGateway:
      name: "compass-gateway-mtls"
      namespace: "compass-system"
    gateway:
      name: "kyma-gateway"
      namespace: "kyma-system"
    proxy:
      port: 15020
    namespace: istio-system
    ingressgateway:
      workloadLabel: istio-ingressgateway
      requestPayloadSizeLimit2MB: 2097152
      requestPayloadSizeLimit2MBLabel: "2MB"
      requestPayloadSizeLimit5MB: 5097152
      requestPayloadSizeLimit5MBLabel: "5MB"
      correlationHeaderRewriteFilter:
        expectedHeaders:
          - "x-request-id"
          - "x-correlation-id"
          - "x-correlationid"
          - "x-forrequest-id"
          - "x-vcap-request-id"
          - "x-broker-api-request-identity"
  kubernetes:
    serviceAccountTokenIssuer: kubernetes/serviceaccount
    serviceAccountTokenJWKS: https://kubernetes.default.svc.cluster.local/openid/v1/jwks
  ingress:
    domainName: "kyma.local"
  database:
    sqlProxyServiceAccount: "proxy-user@gcp-cmp.iam.gserviceaccount.com"
    manageSecrets: true
    embedded:
      enabled: true
      director:
        name: "postgres"
      directorDBName: "postgres"
    managedGCP:
      serviceAccountKey: ""
      instanceConnectionName: ""
      director:
        name: ""
        user: ""
        password: ""
      host: "localhost"
      hostPort: "5432"
      sslMode: ""
      #TODO remove below after migration to separate user will be done
      dbUser: ""
      dbPassword: ""
      directorDBName: ""
  oathkeeper:
    host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
    port: 4455
    timeout_ms: 120000
    idTokenConfig:
      claims: '{"scopes": "{{ print .Extra.scope }}","tenant": "{{ .Extra.tenant }}", "consumerID": "{{ print .Extra.consumerID}}", "consumerType": "{{ print .Extra.consumerType }}", "flow": "{{ print .Extra.flow }}", "onBehalfOf": "{{ print .Extra.onBehalfOf }}", "region": "{{ print .Extra.region }}", "tokenClientID": "{{ print .Extra.tokenClientID }}"}'
      internalClaims: '{"scopes": "application:read application:write application.webhooks:read application_template.webhooks:read webhooks.auth:read runtime:write runtime:read tenant:write tenant_subscription:write fetch_tenant","tenant":"{ {{ if .Header.Tenant }} \"consumerTenant\":\"{{ print (index .Header.Tenant 0) }}\", {{ end }} \"externalTenant\":\"\"}", "consumerType": "Internal Component", "flow": "Internal"}'
    mutators:
      runtimeMappingService:
        config:
          api:
            url: http://compass-director.compass-system.svc.cluster.local:3000/runtime-mapping
            retry:
              give_up_after: 6s
              max_delay: 2000ms
      authenticationMappingServices:
        nsadapter:
          cfg:
            config:
              api:
                url: http://compass-director.compass-system.svc.cluster.local:3000/authn-mapping/nsadapter
                retry:
                  give_up_after: 6s
                  max_delay: 2000ms
          authenticator:
            enabled: false
            createRule: true
            gatewayHost: "compass-gateway-xsuaa"
            trusted_issuers: '[{"domain_url": "compass-system.svc.cluster.local:8080", "scope_prefix": "prefix.", "protocol": "http"}]'
            attributes: '{"uniqueAttribute": { "key": "ns-adapter-test", "value": "ns-adapter-flow" }, "tenant": { "key": "tenant" }, "identity": { "key": "identity" }, "clientid": { "key": "client_id" } }'
            path: /nsadapter/api/v1/notifications
            upstreamComponent: "compass-gateway"
            checkSuffix: true
        tenant-fetcher:
          cfg:
            config:
              api:
                url: http://compass-director.compass-system.svc.cluster.local:3000/authn-mapping/tenant-fetcher
                retry:
                  give_up_after: 6s
                  max_delay: 2000ms
          authenticator:
            enabled: false
            createRule: true
            gatewayHost: "compass-gateway"
            trusted_issuers: '[{"domain_url": "compass-system.svc.cluster.local:8080", "scope_prefix": "prefix.", "protocol": "http"}]'
            attributes: '{"uniqueAttribute": { "key": "test", "value": "tenant-fetcher" }, "tenant": { "key": "tenant" }, "identity": { "key": "identity" } }'
            path: /tenants/<.*>
            upstreamComponent: "compass-tenant-fetcher"
            checkSuffix: false
        subscriber:
          cfg:
            config:
              api:
                url: http://compass-director.compass-system.svc.cluster.local:3000/authn-mapping/subscriber
                retry:
                  give_up_after: 6s
                  max_delay: 2000ms
          authenticator:
            enabled: false
            createRule: false
            gatewayHost: "compass-gateway-sap-mtls"
            trusted_issuers: '[{"domain_url": "compass-system.svc.cluster.local:8080", "scope_prefix": "prefix.", "protocol": "http"}]'
            attributes: '{"uniqueAttribute": { "key": "subsc-key-test", "value": "subscription-flow" }, "tenant": { "key": "tenant" }, "identity": { "key": "identity" } }'
            path: /<.*>
            checkSuffix: false
      tenantMappingService:
        config:
          api:
            url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
            retry:
              give_up_after: 6s
              max_delay: 2000ms
      certificateResolverService:
        config:
          api:
            url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/certificate/data/resolve
            retry:
              give_up_after: 6s
              max_delay: 2000ms
      tokenResolverService:
        config:
          api:
            url: http://compass-director.compass-system.svc.cluster.local:8080/v1/tokens/resolve
            retry:
              give_up_after: 6s
              max_delay: 2000ms
  cockpit:
    auth:
      allowedConnectSrc: "https://*.ondemand.com"
      secretName: "cockpit-auth-secret"
      idpHost: ""
      clientID: ""
      scopes: "openid profile email"
      path: "/oauth2/certs"
  tenantFetcher:
    host: compass-tenant-fetcher.compass-system.svc.cluster.local
    prefix: /tenants
    port: 3000
    requiredAuthScope: Callback
    fetchTenantAuthScope: fetch_tenant
    authentication:
      jwksEndpoint: "http://ory-oathkeeper-api.kyma-system.svc.cluster.local:4456/.well-known/jwks.json"
    tenantProvider:
      tenantIdProperty: "tenantId"
      customerIdProperty: "customerId"
      subaccountTenantIdProperty: "subaccountTenantId"
      subdomainProperty: "subdomain"
      name: "provider"
      subscriptionProviderIdProperty: "subscriptionProviderIdProperty"
    server:
      regionalHandlerEndpoint: "/v1/regional/{region}/callback/{tenantId}"
      dependenciesEndpoint: "/v1/dependencies"
      tenantPathParam: "tenantId"
      regionPathParam: "region"
      subscriptionProviderLabelKey: "subscriptionProviderId"
      consumerSubaccountIdsLabelKey: "consumer_subaccount_ids"
    containerName: "tenant-fetcher"
    oauth:
      client: ""
      secret: ""
      tokenURL: ""
      tokenPath: ""
    secret:
      name: "compass-tenant-fetcher-secret"
      clientIdKey: client-id
      oauthMode: oauth-mtls
      clientCertKey: client-cert
      clientKeyKey: client-key
      oauthUrlKey: url
      skipSSLValidation: true
    endpoints:
      subaccountCreated: "127.0.0.1/events?type=subaccount-created"
    fieldMapping:
      totalPagesField: "totalPages"
      totalResultsField: "totalResults"
      tenantEventsField: "events"
      idField: "id"
      nameField: "name"
      customerIdField: "customerId"
      subdomainField: "subdomain"
      discriminatorField: ""
      discriminatorValue: ""
      detailsField: "details"
      entityTypeField: "entityType"
      globalAccountID: "gaID"
      regionField: "region"
  externalCertConfiguration:
    issuer: "C=DE, L=local, O=SAP SE, OU=SAP Cloud Platform Clients, CN=compass-ca"
    issuerLocality: "local" # In local setup we have manually created connector CA certificate with 'local' Locality property
    subjectPattern: "/C=DE/O=SAP SE/OU=SAP Cloud Platform Clients/OU=Region/OU=%s/L=%s/CN=%s"
    ouCertSubaccountID: "f8075207-1478-4a80-bd26-24a4785a2bfd"
    commonName: "compass"
    locality: "local"
    certSvcApiPath: "/cert"
    tokenPath: "/cert/token"
    secrets:
      externalCertSvcSecret:
        manage: false
        name: "cert-svc-secret"
        clientIdKey: client-id
        clientSecretKey: client-secret
        oauthUrlKey: url
        csrEndpointKey: csr-endpoint
        clientCert: client-cert
        clientKey: client-key
        skipSSLValidationFlag: "-k"
      externalClientCertSecret:
        name: "external-client-certificate"
        namespace: compass-system
        certKey: tls.crt
        keyKey: tls.key
    rotationCronjob:
      name: "external-certificate-rotation"
      schedule: "*/1 * * * *" # Executes every minute
      certValidity: "7"
      clientCertRetryAttempts: "8"
      containerName: "certificate-rotation"
  ordService:
    host: compass-ord-service.compass-system.svc.cluster.local
    prefix: /open-resource-discovery-service/v0
    docsPrefix: /open-resource-discovery-docs
    staticPrefix: /open-resource-discovery-static/v0
    port: 3000
    defaultResponseType: "xml"
  ordAggregator:
    name: ord-aggregator
    enabled: true
    schedule: "*/1 * * * *"
    http:
      client:
        skipSSLValidation: false
    dbPool:
      maxOpenConnections: 2
      maxIdleConnections: 2
    globalRegistryUrl: http://compass-external-services-mock.compass-system.svc.cluster.local:8087/.well-known/open-resource-discovery
    maxOrdParallelDownloads: 4
  systemFetcher:
    enabled: false
    name: "system-fetcher"
    schedule: "0 0 * * *"
    manageSecrets: true
    # enableSystemDeletion - whether systems in deleted state should be deleted from director database
    enableSystemDeletion: true
    # fetchParallelism - shows how many http calls will be made in parallel to fetch systems
    fetchParallellism: 30
    # queueSize - shows how many system fetches (individual requests may fetch more than 1 system)
    # can be put in the queue for processing before blocking. It is best for the queue to be about 2 times bigger than the parallellism
    queueSize: 100
    # fetchRequestTimeout - shows the timeout to wait for oauth token and for fetching systems (in one request) separately
    fetchRequestTimeout: "15s"
    # directorRequestTimeout - graphql requests timeout to director
    directorRequestTimeout: "30s"
    dbPool:
      maxOpenConnections: 20
      maxIdleConnections: 2
    # systemsAPIEndpoint - endpoint of the service to fetch systems from
    systemsAPIEndpoint: ""
    # systemsAPIFilterCriteria - criteria for fetching systems
    systemsAPIFilterCriteria: ""
    # systemToTemplateMappings - how to map system properties to an existing application template
    systemToTemplateMappings: '{}'
    templatePlaceholderToSystemKeyMappings: '[{"placeholder_name": "name","system_key": "displayName"},{"placeholder_name": "display-name","system_key": "displayName"},{"placeholder_name": "systemNumber","system_key": "systemNumber"},{"placeholder_name": "productId","system_key": "productId"},{"placeholder_name": "ppmsProductVersionId","system_key": "ppmsProductVersionId"},{"placeholder_name": "description","system_key": "productDescription", "optional": true},{"placeholder_name": "baseUrl","system_key": "additionalUrls.mainUrl", "optional":true},{"placeholder_name": "providerName","system_key": "infrastructureProvider", "optional": true}]'
    templateOverrideApplicationInput: '{"name": "{{name}}","description": "{{description}}","providerName": "{{providerName}}","statusCondition": "INITIAL","systemNumber": "{{systemNumber}}","labels": {"managed": "true","productId": "{{productId}}","ppmsProductVersionId": "{{ppmsProductVersionId}}"},"baseUrl": "{{baseUrl}}"}'
    http:
      client:
        skipSSLValidation: false
    oauth:
      client: "client_id"
      tokenEndpointProtocol: "https"
      tokenBaseHost: "compass-external-services-mock-sap-mtls"
      tokenPath: "/cert/token"
      scopesClaim: "scopes"
      tenantHeaderName: "x-zid"
      tokenRequestTimeout: 15s
      skipSSLValidation: true
    secret:
      name: "compass-system-fetcher-secret"
      clientIdKey: client-id
      oauthUrlKey: url
    paging:
      pageSize: 200
      sizeParam: "$top"
      skipParam: "$skip"
    containerName: "system-fetcher"
  tenantFetchers:
    job1:
      enabled: false
      configMapNamespace: "compass-system"
      manageSecrets: true
      providerName: "compass"
      schedule: "*/5 * * * *"
      tenantInsertChunkSize: "500"
      kubernetes:
        configMapNamespace: "compass-system"
        pollInterval: 2s
        pollTimeout: 1m
        timeout: 2m
      oauth:
        client: ""
        secret: ""
        tokenURL: ""
        tokenPath: ""
      secret:
        name: "compass-tenant-fetcher-secret-job1"
        clientIdKey: client-id
        clientSecretKey: client-secret
        oauthUrlKey: url
        oauthMode: "oauth-mtls"
        clientCertKey: client-cert
        clientKeyKey: client-key
        skipSSLValidation: true
      endpoints:
        accountCreated: "127.0.0.1/events?type=account-created"
        accountDeleted: "127.0.0.1/events?type=account-deleted"
        accountUpdated: "127.0.0.1/events?type=account-updated"
        subaccountCreated: "127.0.0.1/events?type=subaccount-created"
        subaccountDeleted: "127.0.0.1/events?type=subaccount-deleted"
        subaccountUpdated: "127.0.0.1/events?type=subaccount-updated"
        subaccountMoved: "127.0.0.1/events?type=subaccount-moved"
      fieldMapping:
        totalPagesField: "totalPages"
        totalResultsField: "totalResults"
        tenantEventsField: "events"
        idField: "id"
        nameField: "name"
        customerIdField: "customerId"
        subdomainField: "subdomain"
        discriminatorField: ""
        discriminatorValue: ""
        detailsField: "details"
        entityTypeField: "entityType"
        globalAccountID: "gaID"
        regionField: "region"
        movedSubaccountTargetField: "targetGlobalAccountGUID"
        movedSubaccountSourceField: "sourceGlobalAccountGUID"
      queryMapping:
        pageNumField: "pageNum"
        pageSizeField: "pageSize"
        timestampField: "timestamp"
      query:
        startPage: "0"
        pageSize: "100"
      shouldSyncSubaccounts: "false"
      dbPool:
        maxOpenConnections: 1
        maxIdleConnections: 1
  metrics:
    enabled: true
    pushEndpoint: http://monitoring-prometheus-pushgateway.kyma-system.svc.cluster.local:9091
  externalServicesMock:
    enabled: false
    certSecuredPort: 8081
    ordCertSecuredPort: 8082
    unsecuredPort: 8083
    basicSecuredPort: 8084
    oauthSecuredPort: 8085
    ordGlobalRegistryCertPort: 8086
    ordGlobalRegistryUnsecuredPort: 8087
    certSecuredHost: compass-external-services-mock-sap-mtls
    ordCertSecuredHost: compass-external-services-mock-sap-mtls-ord
    ordGlobalCertSecuredHost: compass-external-services-mock-sap-mtls-global-ord-registry
    unSecuredHost: compass-external-services-mock
    host: compass-external-services-mock.compass-system.svc.cluster.local
    regionInstancesCredentials:
      manage: false
    oauthSecret:
      manage: false
      name: compass-external-services-mock-oauth-credentials
      clientIdKey: client-id
      clientSecretKey: client-secret
      oauthUrlKey: url
      oauthTokenPath: "/secured/oauth/token"
    auditlog:
      applyMockConfiguration: false
      managementApiPath: /audit-log/v2/configuration-changes/search
      mtlsTokenPath: "/cert/token"
      secret:
        name: "auditlog-instance-management"
        urlKey: url
        tokenUrlKey: token-url
        clientIdKey: client-id
        clientSecretKey: client-secret
        clientCertKey: client-cert
        clientKeyKey: client-key
  tests:
    http:
      client:
        skipSSLValidation: false
    director:
      externalClientCertTestSecretName: "external-client-certificate-integration-system-test-secret"
      externalClientCertTestSecretNamespace: "compass-system"
      externalCertIntSystemCN: "integration-system-test"
      externalCertTestJobName: "external-client-certificate-integration-system-test-job"
    ordService:
      accountTenantID: "5577cf46-4f78-45fa-b55f-a42a3bdba868" # testDefaultTenant from our testing tenants
      consumerAccountID: "5984a414-1eed-4972-af2c-b2b6a415c7d7" # ApplicationsForRuntimeTenantName from our testing tenants
      providerSubaccountID: "f8075207-1478-4a80-bd26-24a4785a2bfd" # TestProviderSubaccount from our testing tenants
      consumerSubaccountID: "1f538f34-30bf-4d3d-aeaa-02e69eef84ae" # randomly chosen
      consumerTenantID: "ba49f1aa-ddc1-43ff-943c-fe949857a34a" # randomly chosen
      externalClientCertTestSecretName: "external-client-certificate-test-secret"
      externalClientCertTestSecretNamespace: "compass-system"
      externalCertTestJobName: "external-certificate-rotation-test-job"
      certSvcInstanceTestSecretName: "cert-svc-secret"
      consumerTokenURL: "http://compass-external-services-mock.compass-system.svc.cluster.local:8080"
      skipPattern: ""
      subscriptionOauthSecret:
        manage: false
        name: compass-subscription-secret
        clientIdKey: client-id
        clientSecretKey: client-secret
        oauthUrlKey: url
    selfRegistration:
      region: "eu-1"
    externalServicesMock:
      skipPattern: ""
    namespace: kyma-system
    connectivityAdapterFQDN: http://compass-connectivity-adapter.compass-system.svc.cluster.local
    directorFQDN: http://compass-director.compass-system.svc.cluster.local
    connectorFQDN: http://compass-connector.compass-system.svc.cluster.local
    externalServicesMockFQDN: http://compass-external-services-mock.compass-system.svc.cluster.local
    ordServiceFQDN: http://compass-ord-service.compass-system.svc.cluster.local
    systemBrokerFQDN: http://compass-system-broker.compass-system.svc.cluster.local
    tenantFetcherFQDN: http://compass-tenant-fetcher.compass-system.svc.cluster.local
    basicCredentials:
      manage: false
      secretName: "test-basic-credentials-secret"
    subscriptionURL: "http://compass-external-services-mock.compass-system.svc.cluster.local:8080"
    subscriptionProviderIdValue: "id-value!t12345"
    db:
      maxOpenConnections: 3
      maxIdleConnections: 1
    securityContext: # Set on container level
      runAsUser: 2000
      allowPrivilegeEscalation: false
  expectedSchemaVersionUpdateJob:
    cm:
      name: "expected-schema-version"
  migratorJob:
    nodeSelectorEnabled: false
    pvc:
      name: "compass-director-migrations"
      namespace: "compass-system"
      migrationsPath: "/compass-migrations"
  http:
    client:
      skipSSLValidation: false
  pairingAdapter:
    e2e:
      appName: "test-app"
      appID: "123-test-456"
      clientUser: "test-user"
      tenant: "test-tenant"
