{{if eq .Values.global.kyma_environment_broker.environmentsCleanup.enabled true}}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: "compass-kyma-environments-cleanup"
  namespace: compass-system
spec:
  schedule: {{.Values.environmentsCleanup.schedule}}
  failedJobsHistoryLimit: 5
  successfulJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        cronjob: environments-cleanup
    spec:
      template:
        metadata:
          name: kyma-environments-cleanup
          labels:
            cronjob: environments-cleanup
        spec:
          serviceAccountName: compass-kyma-environment-broker
          securityContext:
            runAsUser: 2000
          restartPolicy: Never
          shareProcessNamespace: true
          containers:
          - name: environments-cleanup
            image: "{{ .Values.global.images.containerRegistry.path }}/{{ .Values.global.images.kyma_environments_cleanup_job.dir }}kyma-environments-cleanup-job:{{ .Values.global.images.kyma_environments_cleanup_job.version }}"
            imagePullPolicy: IfNotPresent
            env:
              - name: APP_MAX_AGE_HOURS
                value: "{{ .Values.environmentsCleanup.maxAge }}"
              - name: APP_LABEL_SELECTOR
                value: "{{ .Values.environmentsCleanup.labelSelector }}"
              - name: APP_GARDENER_PROJECT
                value: "{{ .Values.gardener.project }}"
              - name: APP_GARDENER_KUBECONFIG_PATH
                value: "{{.Values.gardener.kubeconfigPath}}"
              - name: APP_DATABASE_USER
                valueFrom:
                  secretKeyRef:
                    key: postgresql-broker-username
                    name: compass-postgresql
              - name: APP_DATABASE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: postgresql-broker-password
                    name: compass-postgresql
              - name: APP_DATABASE_HOST
                valueFrom:
                  secretKeyRef:
                    key: postgresql-serviceName
                    name: compass-postgresql
              - name: APP_DATABASE_PORT
                valueFrom:
                  secretKeyRef:
                    key: postgresql-servicePort
                    name: compass-postgresql
              - name: APP_DATABASE_NAME
                valueFrom:
                  secretKeyRef:
                    key: postgresql-broker-db-name
                    name: compass-postgresql
              - name: APP_DATABASE_SSL
                valueFrom:
                  secretKeyRef:
                    key: postgresql-sslMode
                    name: compass-postgresql
              - name: APP_BROKER_URL
                value: "https://{{ .Values.host }}.{{ .Values.global.ingress.domainName }}"
              - name: APP_BROKER_TOKEN_URL
                value: "https://oauth2.{{ .Values.global.ingress.domainName }}/oauth2/token"
              - name: APP_BROKER_CLIENT_ID
                valueFrom:
                  secretKeyRef:
                    key: client_id
                    name: {{.Values.environmentsCleanup.secretName}}
              - name: APP_BROKER_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    key: client_secret
                    name: {{.Values.environmentsCleanup.secretName}}
              - name: APP_BROKER_SCOPE
                value: {{.Values.environmentsCleanup.scope}}
            command:
              - bin/sh
            args:
              - -c
              - "sleep 20; ./bin/environments-cleanup; exit_code=$?; echo '# KILLING PILOT-AGENT #'; pkill -INT cloud_sql_proxy; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 5; exit $exit_code;"
            volumeMounts:
              - mountPath: /gardener/kubeconfig
                name: gardener-kubeconfig
                readOnly: true
          {{if eq .Values.global.database.embedded.enabled false}}
              - name: cloudsql-instance-credentials
                mountPath: /secrets/cloudsql-instance-credentials
                readOnly: true
          - name: cloudsql-proxy
            image: gcr.io/cloudsql-docker/gce-proxy:1.14
            command:
              - /bin/sh
            args:
              - -c
              - "trap 'exit 0' SIGINT; /cloud_sql_proxy -instances={{ .Values.global.database.managedGCP.instanceConnectionName }}=tcp:5432 -credential_file=/secrets/cloudsql-instance-credentials/credentials.json"
            volumeMounts:
              - name: cloudsql-instance-credentials
                mountPath: /secrets/cloudsql-instance-credentials
                readOnly: true
            securityContext:
              runAsUser: 2000
          {{end}}
          volumes:
            {{- if eq .Values.global.database.embedded.enabled false}}
            - name: cloudsql-instance-credentials
              secret:
                secretName: cloudsql-instance-credentials
            {{- end}}
            - name: gardener-kubeconfig
              secret:
                optional: true
                defaultMode: 420
                secretName: gardener-credentials
{{end}}