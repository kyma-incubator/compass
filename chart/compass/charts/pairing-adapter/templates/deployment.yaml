{{ $global := . }}
{{- range $adapterName, $config := .Values.deployment.adapters -}}
{{if eq $config.enabled true}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: "compass-pairing-adapter-{{ $adapterName }}"
    namespace: {{ $.Release.Namespace }}
    labels:
        app: {{ $.Chart.Name }}
        release: {{ $.Release.Name }}
        system: {{ $adapterName }}
spec:
    replicas: {{ $.Values.deployment.replicaCount }}
    selector:
        matchLabels:
            app: {{ $.Chart.Name }}
            release: {{ $.Release.Name }}
            system: {{ $adapterName }}
    strategy:
        {{- toYaml $.Values.deployment.strategy | nindent 8 }}
    template:
        metadata:
            annotations:
                cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
                restartOnNewInstallationMarker: {{ randAlphaNum 5 | quote }} # Restarts the deployment on a new Helm installation. (https://helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments)
            labels:
                app: {{ $.Chart.Name }}
                reqlimit: {{ $.Values.global.istio.ingressgateway.requestPayloadSizeLimit2MBLabel }}
                release: {{ $.Release.Name }}
                system: {{ $adapterName }}
        spec:
            serviceAccountName: {{ $.Release.Name }}-pairing-adapter
            nodeSelector:
              {{- toYaml $.Values.deployment.nodeSelector | nindent 14 }}
          {{ if eq $.Values.global.portieris.isEnabled true }}
            imagePullSecrets:
            - name: {{ $.Values.global.portieris.imagePullSecretName }}
          {{ end }}
            containers:
            - name: {{ $.Chart.Name }}
              image: {{ $.Values.global.images.containerRegistry.path }}/{{ $.Values.global.images.pairing_adapter.dir }}compass-pairing-adapter:{{ $.Values.global.images.pairing_adapter.version }}
              imagePullPolicy: {{ $.Values.deployment.image.pullPolicy }}
              env:
              - name: MAPPING_TEMPLATE_EXTERNAL_URL
{{ if contains "local" $adapterName }}
                value: {{ tpl $config.envs.mappingTemplateExternalURL $global }}
{{ else }}
                value: {{ $config.envs.mappingTemplateExternalURL }}
{{ end }}
              - name: MAPPING_TEMPLATE_HEADERS
                value: {{ $config.envs.mappingTemplateHeaders | quote }}
              - name: MAPPING_TEMPLATE_JSON_BODY
                value: {{ $config.envs.mappingTemplateJSONBody | quote }}
              - name: MAPPING_TEMPLATE_TOKEN_FROM_RESPONSE
                value: {{ $config.envs.mappingTemplateTokenFromResponse | quote }}
              - name: AUTH_TYPE
                value: {{ $config.auth.type }}
{{if eq $config.auth.type "oauth" }}
              - name: AUTH_URL
                valueFrom:
                    secretKeyRef:
                        name: {{ $config.auth.secret }}
                        key: url
              - name: AUTH_CLIENT_ID
                valueFrom:
                    secretKeyRef:
                        name: {{ $config.auth.secret }}
                        key: clientID
              - name: AUTH_CLIENT_SECRET
                valueFrom:
                    secretKeyRef:
                        name: {{ $config.auth.secret }}
                        key: clientSecret
              - name: AUTH_OAUTH_STYLE
                value: {{ $config.envs.oauthStyle | quote }}
{{ else if eq $config.auth.type "mtls" }}
              - name: APP_EXTERNAL_CLIENT_CERT_SECRET
                value: "{{ $.Values.global.externalCertConfiguration.secrets.externalClientCertSecret.namespace }}/{{ $.Values.global.externalCertConfiguration.secrets.externalClientCertSecret.name }}"
              - name: APP_EXTERNAL_CLIENT_CERT_KEY
                value: "{{ $.Values.global.externalCertConfiguration.secrets.externalClientCertSecret.certKey }}"
              - name: APP_EXTERNAL_CLIENT_KEY_KEY
                value: "{{ $.Values.global.externalCertConfiguration.secrets.externalClientCertSecret.keyKey }}"
              - name: APP_EXT_SVC_CLIENT_CERT_SECRET
                value: "{{ .Values.global.extSvcCertConfiguration.secrets.extSvcClientCertSecret.namespace }}/{{ .Values.global.extSvcCertConfiguration.secrets.extSvcClientCertSecret.name }}"
              - name: APP_EXT_SVC_CLIENT_CERT_KEY
                value: "{{ .Values.global.extSvcCertConfiguration.secrets.extSvcClientCertSecret.certKey }}"
              - name: APP_EXT_SVC_CLIENT_KEY_KEY
                value: "{{ .Values.global.extSvcCertConfiguration.secrets.extSvcClientCertSecret.keyKey }}"
              - name: SKIP_SSL_VERIFY
                value: "{{ $config.envs.skipSSLVerify }}"
{{ end }}
              - name: LOG_FORMAT
                value: {{ $.Values.global.log.format | quote }}
              ports:
              - name: http
                containerPort: {{ $.Values.deployment.port }}
                protocol: TCP
              resources:
                {{- toYaml $.Values.deployment.resources | nindent 16 }}
                    {{- with $.Values.deployment.securityContext }}
              securityContext:
{{ toYaml . | indent 16 }}
        {{- end }}
              livenessProbe:
                  httpGet:
                      port: {{ $.Values.deployment.port }}
                      path: "/healthz"
                  initialDelaySeconds: {{ $.Values.global.livenessProbe.initialDelaySeconds }}
                  timeoutSeconds: {{ $.Values.global.livenessProbe.timeoutSeconds }}
                  periodSeconds: {{ $.Values.global.livenessProbe.periodSeconds }}
              readinessProbe:
                  httpGet:
                      port: {{ $.Values.deployment.port }}
                      path: "/healthz"
                  initialDelaySeconds: {{ $.Values.global.readinessProbe.initialDelaySeconds }}
                  timeoutSeconds: {{ $.Values.global.readinessProbe.timeoutSeconds }}
                  periodSeconds: {{ $.Values.global.readinessProbe.periodSeconds }}
{{ end }}
{{- end -}}
