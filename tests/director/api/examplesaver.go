package api

import (
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"regexp"
	"strings"
	"testing"

	"github.com/stretchr/testify/require"
)

func saveExample(t *testing.T, query string, exampleName string) {
	t.Helper()
	sanitizedName := strings.Replace(exampleName, " ", "-", -1)
	sanitizedName = strings.ToLower(sanitizedName)
	sanitizedDirectory := strings.Replace(exampleName, " ", "-", -1)
	sanitizedDirectory = strings.ToLower(sanitizedDirectory)
	// replace uuids with constant value
	r, err := regexp.Compile("[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}")
	require.NoError(t, err)
	query = r.ReplaceAllString(query, "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
	content := fmt.Sprintf("# Code generated by Compass integration tests, DO NOT EDIT.\n%s", query)
	dir := path.Join(os.Getenv("GOPATH"), "src/github.com/kyma-incubator/compass/components/director/examples/", sanitizedDirectory)
	err = os.MkdirAll(dir, os.ModePerm)
	require.NoError(t, err)

	err = ioutil.WriteFile(fmt.Sprintf("%s/%s.graphql", dir, sanitizedName), []byte(content), 0660)
	require.NoError(t, err)
}

func saveExampleInCustomDir(t *testing.T, query string, exampleDirectory string, exampleName string) {
	t.Helper()
	sanitizedName := strings.Replace(exampleName, " ", "-", -1)
	sanitizedName = strings.ToLower(sanitizedName)
	sanitizedDirectory := strings.Replace(exampleDirectory, " ", "-", -1)
	sanitizedDirectory = strings.ToLower(sanitizedDirectory)
	// replace uuids with constant value
	r, err := regexp.Compile("[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}")
	require.NoError(t, err)
	query = r.ReplaceAllString(query, "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
	content := fmt.Sprintf("# Code generated by Compass integration tests, DO NOT EDIT.\n%s", query)
	dir := path.Join(os.Getenv("GOPATH"), "src/github.com/kyma-incubator/compass/components/director/examples/", sanitizedDirectory)
	err = os.MkdirAll(dir, os.ModePerm)
	require.NoError(t, err)

	err = ioutil.WriteFile(fmt.Sprintf("%s/%s.graphql", dir, sanitizedName), []byte(content), 0660)
	require.NoError(t, err)
}
